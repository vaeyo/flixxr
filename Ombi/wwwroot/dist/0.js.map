{"version":3,"sources":["webpack:///./ClientApp/app/settings/settings.module.ts","webpack:///./ClientApp/app/interfaces/index.ts","webpack:///./ClientApp/app/interfaces/INotificationSettings.ts","webpack:///./ClientApp/app/interfaces/IRequestModel.ts","webpack:///./ClientApp/app/interfaces/IUser.ts","webpack:///./ClientApp/app/interfaces/IIssues.ts","webpack:///./ClientApp/app/pipes/pipe.module.ts","webpack:///./ClientApp/app/pipes/HumanizePipe.ts","webpack:///delegated ./node_modules/rxjs/add/operator/takeUntil.js from dll-reference vendor_a449fdf94c391aac3fe0","webpack:///delegated ./node_modules/ngx-clipboard/dist/index.js from dll-reference vendor_a449fdf94c391aac3fe0","webpack:///./ClientApp/app/settings/about/about.component.ts","webpack:///./ClientApp/app/settings/about/about.component.html","webpack:///./ClientApp/app/settings/authentication/authentication.component.ts","webpack:///./ClientApp/app/settings/authentication/authentication.component.html","webpack:///./ClientApp/app/settings/couchpotato/couchpotato.component.ts","webpack:///./ClientApp/app/settings/couchpotato/couchpotato.component.html","webpack:///./ClientApp/app/settings/customization/customization.component.ts","webpack:///./ClientApp/app/settings/customization/customization.component.html","webpack:///./ClientApp/app/settings/dognzb/dognzb.component.ts","webpack:///./ClientApp/app/settings/dognzb/dognzb.component.html","webpack:///./ClientApp/app/settings/emby/emby.component.ts","webpack:///./ClientApp/app/settings/emby/emby.component.html","webpack:///./ClientApp/app/settings/issues/issues.component.ts","webpack:///./ClientApp/app/settings/issues/issues.component.html","webpack:///./ClientApp/app/settings/jobs/jobs.component.ts","webpack:///./ClientApp/app/settings/jobs/jobs.component.html","webpack:///./ClientApp/app/settings/landingpage/landingpage.component.ts","webpack:///./ClientApp/app/settings/landingpage/landingpage.component.html","webpack:///./ClientApp/app/settings/notifications/discord.component.ts","webpack:///./ClientApp/app/settings/notifications/discord.component.html","webpack:///./ClientApp/app/settings/notifications/emailnotification.component.ts","webpack:///./ClientApp/app/settings/notifications/emailnotification.component.html","webpack:///./ClientApp/app/settings/notifications/mattermost.component.ts","webpack:///./ClientApp/app/settings/notifications/mattermost.component.html","webpack:///./ClientApp/app/settings/notifications/mobile.component.ts","webpack:///./ClientApp/app/settings/notifications/mobile.component.html","webpack:///./ClientApp/app/settings/notifications/notificationtemplate.component.ts","webpack:///./ClientApp/app/settings/notifications/notificationtemplate.component.html","webpack:///./ClientApp/app/settings/notifications/pushbullet.component.ts","webpack:///./ClientApp/app/settings/notifications/pushbullet.component.html","webpack:///./ClientApp/app/settings/notifications/pushover.component.ts","webpack:///./ClientApp/app/settings/notifications/pushover.component.html","webpack:///./ClientApp/app/settings/notifications/slack.component.ts","webpack:///./ClientApp/app/settings/notifications/slack.component.html","webpack:///./ClientApp/app/settings/notifications/telegram.component.ts","webpack:///./ClientApp/app/settings/notifications/telegram.component.html","webpack:///./ClientApp/app/settings/ombi/ombi.component.ts","webpack:///./ClientApp/app/settings/ombi/ombi.component.html","webpack:///./ClientApp/app/settings/plex/plex.component.ts","webpack:///./ClientApp/app/settings/plex/plex.component.html","webpack:///./ClientApp/app/settings/radarr/radarr.component.ts","webpack:///./ClientApp/app/settings/radarr/radarr.component.html","webpack:///./ClientApp/app/settings/sickrage/sickrage.component.ts","webpack:///./ClientApp/app/settings/sickrage/sickrage.component.html","webpack:///./ClientApp/app/settings/sonarr/sonarr.component.ts","webpack:///./ClientApp/app/settings/sonarr/sonarr.component.html","webpack:///./ClientApp/app/settings/update/update.component.ts","webpack:///./ClientApp/app/settings/update/update.component.html","webpack:///./ClientApp/app/settings/usermanagement/usermanagement.component.ts","webpack:///./ClientApp/app/settings/usermanagement/usermanagement.component.html","webpack:///./ClientApp/app/settings/wiki.component.ts","webpack:///./ClientApp/app/settings/wiki.component.html","webpack:///./ClientApp/app/settings/settingsmenu.component.ts","webpack:///./ClientApp/app/settings/settingsmenu.component.html"],"names":["common_1","__webpack_require__","core_1","forms_1","router_1","ng_bootstrap_1","dist_1","auth_guard_1","auth_service_1","services_1","pipe_module_1","about_component_1","authentication_component_1","couchpotato_component_1","customization_component_1","dognzb_component_1","emby_component_1","issues_component_1","jobs_component_1","landingpage_component_1","discord_component_1","emailnotification_component_1","mattermost_component_1","mobile_component_1","notificationtemplate_component_1","pushbullet_component_1","pushover_component_1","slack_component_1","telegram_component_1","ombi_component_1","plex_component_1","radarr_component_1","sickrage_component_1","sonarr_component_1","update_component_1","usermanagement_component_1","wiki_component_1","settingsmenu_component_1","primeng_1","routes","path","component","OmbiComponent","canActivate","AuthGuard","AboutComponent","PlexComponent","EmbyComponent","SonarrComponent","RadarrComponent","LandingPageComponent","CustomizationComponent","EmailNotificationComponent","DiscordComponent","SlackComponent","PushoverComponent","PushbulletComponent","MattermostComponent","UserManagementComponent","UpdateComponent","CouchPotatoComponent","DogNzbComponent","TelegramComponent","JobsComponent","SickRageComponent","IssuesComponent","AuthenticationComponent","MobileComponent","SettingsModule","__decorate","NgModule","imports","CommonModule","FormsModule","ReactiveFormsModule","RouterModule","forChild","MenuModule","InputSwitchModule","InputTextModule","NgbModule","TooltipModule","NgbAccordionModule","AutoCompleteModule","CalendarModule","ClipboardModule","PipeModule","RadioButtonModule","declarations","SettingsMenuComponent","NotificationTemplate","WikiComponent","exports","providers","SonarrService","AuthService","RadarrService","ValidationService","TesterService","JobService","CouchPotatoService","IssuesService","PlexService","EmbyService","MobileService","__export","NotificationAgent","NotificationType","RequestType","FilterType","UserType","IssueStatus","HumanizePipe_1","forRoot","ngModule","PipeModule_1","HumanizePipe","prototype","transform","value","split","join","toUpperCase","slice","Pipe","name","module","settingsService","jobService","this","ngOnInit","_this","about","subscribe","x","getCachedUpdate","newUpdate","Component","template","SettingsService","services_2","notificationService","fb","getAuthentication","form","group","allowNoPassword","requiredDigit","requiredLength","requiredLowercase","requireNonAlphanumeric","requireUppercase","onSubmit","invalid","error","saveAuthentication","success","NotificationService","FormBuilder","couchPotatoService","testerService","getCouchPotatoSettings","enabled","username","password","apiKey","Validators","required","ip","port","ssl","subDir","defaultProfileId","getProfiles","profilesRunning","profiles","settings","saveCouchPotatoSettings","test","couchPotatoTest","requestToken","getApiKey","controls","setValue","api_key","getCustomization","getThemes","t","themes","existingTheme","filter","item","fullName","presetThemeName","index","indexOf","splice","hasPresetTheme","unshift","displayName","presetThemeDisplayName","url","version","presetThemeVersion","save","saveCustomization","dropDownChange","event","selectedThemeFullName","target","selectedTheme","val","presetThemeContent","getThemeContent","getDogNzbSettings","movies","tvShows","saveDogNzbSettings","getEmby","addTab","servers","push","id","Math","floor","random","administratorId","enableEpisodeSearching","server","embyTest","removeServer","saveEmby","runCacher","runEmbyCacher","issuesService","categoryToAdd","getIssueSettings","enableInProgress","getCategories","addCategory","createCategory","deleteCategory","saveIssueSettings","categories","getJobSettings","automaticUpdater","couchPotatoSync","embyContentSync","plexContentSync","userImporter","sonarrSync","radarrSync","sickRageSync","saveJobSettings","getLandingPage","saveLandingPage","interfaces_1","services_3","getDiscordNotificationSettings","templates","notificationTemplates","webhookUrl","saveDiscordNotificationSettings","discordTest","services_4","validationService","getEmailNotificationSettings","emailForm","authentication","host","senderAddress","email","senderName","adminEmail","disableTLS","disableCertificateChecking","enableValidation","subscribeToAuthChanges","saveEmailNotificationSettings","emailTest","valueChanges","auth","disableValidation","getMattermostNotificationSettings","channel","iconUrl","saveMattermostNotificationSettings","mattermostTest","mobileService","getMobileNotificationSettings","getUserDeviceList","userList","saveMobileNotificationSettings","showSubject","Input","selector","getPushbulletNotificationSettings","channelTag","accessToken","savePushbulletNotificationSettings","pushbulletTest","getPushoverNotificationSettings","userToken","savePushoverNotificationSettings","pushoverTest","getSlackNotificationSettings","iconEmoji","saveSlackNotificationSettings","slackTest","getTelegramNotificationSettings","botApi","chatId","parseMode","saveTelegramNotificationSettings","telegramTest","getOmbi","collectAnalyticData","ignoreCertificateErrors","baseUrl","doNotSendNotificationsForAutoApprove","refreshApiKey","resetOmbiApi","patchValue","result","length","startsWith","saveOmbi","successfullyCopied","Subject_1","plexService","serversButton","advanced","subscriptions","Subject","getPlex","requestServers","getServers","takeUntil","loadedServers","warning","selectServer","selectedServer","localAddresses","machineIdentifier","plexAuthToken","parseInt","scheme","testPlex","plexTest","loadLibraries","getLibraries","plexSelectedLibraries","successful","data","mediaContainer","directory","forEach","lib","key","title","message","err","filtered","savePlex","runPlexCacher","ngOnDestroy","next","complete","radarrService","getRadarr","defaultQualityProfile","defaultRootPath","addOnly","minimumAvailability","getRootFolders","qualities","rootFolders","minimumAvailabilityOptions","getQualityProfiles","rootFoldersRunning","radarrTest","saveRadarr","getSickRageSettings","qualityProfile","sickrageTest","saveSickRageSettings","sonarrService","getSonarr","rootPath","seasonFolders","sonarrTest","saveSonarr","updateService","updateAvailable","enableUpdateButton","isWindows","Object","defineProperty","get","getUpdateSettings","autoUpdateEnabled","processName","useScript","scriptLocation","windowsService","windowsServiceName","checkForUpdate","checkForNewUpdate","update","forceUpdate","saveUpdateSettings","identityService","embyService","bannedPlexUsers","bannedEmbyUsers","enableImportButton","getUserManagementSettings","importEmbyUsers","importPlexUsers","getFriends","f","plexUsers","plex","bannedPlexUserIds","some","getUsers","embyUsers","emby","getAllAvailableClaims","c","claims","claim","defaultRoles","hasClaim","plexEnabled","enable","embyEnabled","submit","enabledClaims","map","u","bannedEmbyUserIds","saveUserManagementSettings","filterPlexList","filteredPlexUsers","query","filterEmbyList","filteredEmbyUsers","runImporter","runPlexImporter","runEmbyImporter","users","toLowerCase","IdentityService","ignore","preventDefault"],"mappings":"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","file":"0.js","sourcesContent":["import { CommonModule } from \"@angular/common\";\nimport { NgModule } from \"@angular/core\";\nimport { FormsModule, ReactiveFormsModule } from \"@angular/forms\";\nimport { RouterModule, Routes } from \"@angular/router\";\nimport { NgbAccordionModule, NgbModule } from \"@ng-bootstrap/ng-bootstrap\";\nimport { ClipboardModule } from \"ngx-clipboard/dist\";\n\nimport { AuthGuard } from \"../auth/auth.guard\";\nimport { AuthService } from \"../auth/auth.service\";\nimport { CouchPotatoService, EmbyService, IssuesService, JobService, MobileService, PlexService, RadarrService, SonarrService, TesterService, ValidationService } from \"../services\";\n\nimport { PipeModule } from \"../pipes/pipe.module\";\nimport { AboutComponent } from \"./about/about.component\";\nimport { AuthenticationComponent } from \"./authentication/authentication.component\";\nimport { CouchPotatoComponent } from \"./couchpotato/couchpotato.component\";\nimport { CustomizationComponent } from \"./customization/customization.component\";\nimport { DogNzbComponent } from \"./dognzb/dognzb.component\";\nimport { EmbyComponent } from \"./emby/emby.component\";\nimport { IssuesComponent } from \"./issues/issues.component\";\nimport { JobsComponent } from \"./jobs/jobs.component\";\nimport { LandingPageComponent } from \"./landingpage/landingpage.component\";\nimport { DiscordComponent } from \"./notifications/discord.component\";\nimport { EmailNotificationComponent } from \"./notifications/emailnotification.component\";\nimport { MattermostComponent } from \"./notifications/mattermost.component\";\nimport { MobileComponent } from \"./notifications/mobile.component\";\nimport { NotificationTemplate } from \"./notifications/notificationtemplate.component\";\nimport { PushbulletComponent } from \"./notifications/pushbullet.component\";\nimport { PushoverComponent } from \"./notifications/pushover.component\";\nimport { SlackComponent } from \"./notifications/slack.component\";\nimport { TelegramComponent } from \"./notifications/telegram.component\";\nimport { OmbiComponent } from \"./ombi/ombi.component\";\nimport { PlexComponent } from \"./plex/plex.component\";\nimport { RadarrComponent } from \"./radarr/radarr.component\";\nimport { SickRageComponent } from \"./sickrage/sickrage.component\";\nimport { SonarrComponent } from \"./sonarr/sonarr.component\";\nimport { UpdateComponent } from \"./update/update.component\";\nimport { UserManagementComponent } from \"./usermanagement/usermanagement.component\";\nimport { WikiComponent } from \"./wiki.component\";\n\nimport { SettingsMenuComponent } from \"./settingsmenu.component\";\n\nimport { AutoCompleteModule, CalendarModule, InputSwitchModule, InputTextModule, MenuModule, RadioButtonModule, TooltipModule } from \"primeng/primeng\";\n\nconst routes: Routes = [\n    { path: \"Ombi\", component: OmbiComponent, canActivate: [AuthGuard] },\n    { path: \"About\", component: AboutComponent, canActivate: [AuthGuard] },\n    { path: \"Plex\", component: PlexComponent, canActivate: [AuthGuard] },\n    { path: \"Emby\", component: EmbyComponent, canActivate: [AuthGuard] },\n    { path: \"Sonarr\", component: SonarrComponent, canActivate: [AuthGuard] },\n    { path: \"Radarr\", component: RadarrComponent, canActivate: [AuthGuard] },\n    { path: \"LandingPage\", component: LandingPageComponent, canActivate: [AuthGuard] },\n    { path: \"Customization\", component: CustomizationComponent, canActivate: [AuthGuard] },\n    { path: \"Email\", component: EmailNotificationComponent, canActivate: [AuthGuard] },\n    { path: \"Discord\", component: DiscordComponent, canActivate: [AuthGuard] },\n    { path: \"Slack\", component: SlackComponent, canActivate: [AuthGuard] },\n    { path: \"Pushover\", component: PushoverComponent, canActivate: [AuthGuard] },\n    { path: \"Pushbullet\", component: PushbulletComponent, canActivate: [AuthGuard] },\n    { path: \"Mattermost\", component: MattermostComponent, canActivate: [AuthGuard] },\n    { path: \"UserManagement\", component: UserManagementComponent, canActivate: [AuthGuard] },\n    { path: \"Update\", component: UpdateComponent, canActivate: [AuthGuard] },\n    { path: \"CouchPotato\", component: CouchPotatoComponent, canActivate: [AuthGuard] },\n    { path: \"DogNzb\", component: DogNzbComponent, canActivate: [AuthGuard] },\n    { path: \"Telegram\", component: TelegramComponent, canActivate: [AuthGuard] },\n    { path: \"Jobs\", component: JobsComponent, canActivate: [AuthGuard] },\n    { path: \"SickRage\", component: SickRageComponent, canActivate: [AuthGuard] },\n    { path: \"Issues\", component: IssuesComponent, canActivate: [AuthGuard] },\n    { path: \"Authentication\", component: AuthenticationComponent, canActivate: [AuthGuard] },\n    { path: \"Mobile\", component: MobileComponent, canActivate: [AuthGuard] },\n];\n\n@NgModule({\n    imports: [\n        CommonModule,\n        FormsModule,\n        ReactiveFormsModule,\n        RouterModule.forChild(routes),\n        MenuModule,\n        InputSwitchModule,\n        InputTextModule,\n        NgbModule,\n        TooltipModule,\n        NgbAccordionModule,\n        AutoCompleteModule,\n        CalendarModule,\n        ClipboardModule,\n        PipeModule,\n        RadioButtonModule,\n    ],\n    declarations: [\n        SettingsMenuComponent,\n        OmbiComponent,\n        PlexComponent,\n        EmbyComponent,\n        JobsComponent,\n        LandingPageComponent,\n        CustomizationComponent,\n        DiscordComponent,\n        SonarrComponent,\n        SlackComponent,\n        RadarrComponent,\n        EmailNotificationComponent,\n        NotificationTemplate,\n        PushoverComponent,\n        MattermostComponent,\n        PushbulletComponent,\n        UserManagementComponent,\n        UpdateComponent,\n        AboutComponent,\n        WikiComponent,\n        CouchPotatoComponent,\n        DogNzbComponent,\n        SickRageComponent,\n        TelegramComponent,\n        IssuesComponent,\n        AuthenticationComponent,\n        MobileComponent,\n    ],\n    exports: [\n        RouterModule,\n    ],\n    providers: [\n        SonarrService,\n        AuthService,\n        RadarrService,\n        AuthGuard,\n        ValidationService,\n        TesterService,\n        JobService,\n        CouchPotatoService,\n        IssuesService,\n        PlexService,\n        EmbyService,\n        MobileService,\n    ],\n\n})\nexport class SettingsModule { }\n\n\n\n// WEBPACK FOOTER //\n// ./node_modules/angular2-template-loader!./node_modules/angular-router-loader/src!./ClientApp/app/settings/settings.module.ts","export * from \"./ICommon\";\nexport * from \"./ICouchPotato\";\nexport * from \"./IImages\";\nexport * from \"./IMediaServerStatus\";\nexport * from \"./INotificationSettings\";\nexport * from \"./IPlex\";\nexport * from \"./IRadarr\";\nexport * from \"./IRequestEngineResult\";\nexport * from \"./IRequestModel\";\nexport * from \"./ISearchMovieResult\";\nexport * from \"./ISearchTvResult\";\nexport * from \"./ISettings\";\nexport * from \"./ISonarr\";\nexport * from \"./IUser\";\nexport * from \"./IIssues\";\n\n\n\n// WEBPACK FOOTER //\n// ./node_modules/angular2-template-loader!./node_modules/angular-router-loader/src!./ClientApp/app/interfaces/index.ts","import { ISettings } from \"./ICommon\";\n\nexport interface INotificationSettings extends ISettings {\n    enabled: boolean;\n}\n\nexport interface IEmailNotificationSettings extends INotificationSettings {\n    host: string;\n    password: string;\n    port: number;\n    senderAddress: string;\n    senderName: string;\n    username: string;\n    authentication: boolean;\n    adminEmail: string;\n    disableTLS: boolean;\n    disableCertificateChecking: boolean;\n    notificationTemplates: INotificationTemplates[];\n}\n\nexport interface INotificationTemplates {\n    subject: string;\n    message: string;\n    notificationType: NotificationType;\n    notificationAgent: NotificationAgent;\n    enabled: boolean;\n}\n\nexport enum NotificationAgent {\n    Email,\n    Discord,\n    Pushbullet,\n    Pushover,\n    Telegram,\n}\n\nexport enum NotificationType {\n    NewRequest,\n    Issue,\n    RequestAvailable,\n    RequestApproved,\n    AdminNote,\n    Test,\n    RequestDeclined,\n    ItemAddedToFaultQueue,\n    WelcomeEmail,\n    IssueResolved,\n}\n\nexport interface IDiscordNotifcationSettings extends INotificationSettings {\n    webhookUrl: string;\n    username: string;\n    notificationTemplates: INotificationTemplates[];\n}\n\nexport interface ITelegramNotifcationSettings extends INotificationSettings {\n    botApi: string;\n    chatId: string;\n    parseMode: string;\n    notificationTemplates: INotificationTemplates[];\n}\n\nexport interface ISlackNotificationSettings extends INotificationSettings {\n    webhookUrl: string;\n    username: string;\n    channel: string;\n    iconEmoji: string;\n    iconUrl: string;\n    notificationTemplates: INotificationTemplates[];\n}\n\nexport interface IPushbulletNotificationSettings extends INotificationSettings {\n    accessToken: string;\n    notificationTemplates: INotificationTemplates[];\n    channelTag: string;\n}\n\nexport interface IPushoverNotificationSettings extends INotificationSettings {\n    accessToken: string;\n    notificationTemplates: INotificationTemplates[];\n    userToken: string;\n}\n\nexport interface IMattermostNotifcationSettings extends INotificationSettings {\n    webhookUrl: string;\n    username: string;\n    channel: string;\n    iconUrl: string;\n    notificationTemplates: INotificationTemplates[];\n}\n\nexport interface IMobileNotifcationSettings extends INotificationSettings {\n    notificationTemplates: INotificationTemplates[];\n}\n\n\n\n// WEBPACK FOOTER //\n// ./node_modules/angular2-template-loader!./node_modules/angular-router-loader/src!./ClientApp/app/interfaces/INotificationSettings.ts","import { IUser } from \"./IUser\";\n\nexport interface IMediaBase {\n  imdbId: string;\n  id: number;\n  providerId: number;\n  title: string;\n  overview: string;\n  posterPath: string;\n  releaseDate: Date;\n  status: string;\n  requestedDate: Date;\n  approved: boolean;\n  type: RequestType;\n  requested: boolean;\n  available: boolean;\n  otherMessage: string;\n  adminNote: string;\n  requestedUser: string;\n  issueId: number;\n  denied: boolean;\n  deniedReason: string;\n  released: boolean;\n}\n\nexport enum RequestType {\n  movie = 1,\n  tvShow = 2,\n}\n\n// NEW WORLD\n\nexport interface IMovieRequests extends IFullBaseRequest {\n  theMovieDbId: number;\n  rootPathOverride: number;\n  qualityOverride: number;\n\n  rootPathOverrideTitle: string;\n  qualityOverrideTitle: string;\n}\n\nexport interface IMovieUpdateModel {\n  id: number;\n}\n\nexport interface IFullBaseRequest extends IBaseRequest {\n  imdbId: string;\n  overview: string;\n  title: string;\n  posterPath: string;\n  backdropPath: string;\n  releaseDate: Date;\n  status: string;\n  released: boolean;\n  background: string;\n\n  // Used in the UI\n  backgroundPath: any;\n}\n\nexport interface IBaseRequest {\n  id: number;\n  approved: boolean;\n  requestedDate: Date;\n  available: boolean;\n  requestedUserId: number;\n  issueId: number;\n  denied: boolean;\n  deniedReason: string;\n  requestType: RequestType;\n  requestedUser: IUser;\n  canApprove: boolean;\n  title: string;\n}\n\nexport interface ITvRequests {\n  id: number;\n  imdbId: string;\n  rootFolder: number;\n  overview: string;\n  title: string;\n  posterPath: string;\n  backdropPath: string;\n  releaseDate: Date;\n  status: string;\n  childRequests: IChildRequests[];\n}\n\nexport interface IChildRequests extends IBaseRequest {\n  seasonRequests: INewSeasonRequests[];\n}\n\nexport interface ITvUpdateModel {\n  id: number;\n}\n\nexport interface INewSeasonRequests {\n  id: number;\n  seasonNumber: number;\n  episodes: IEpisodesRequests[];\n}\n\nexport interface IEpisodesRequests {\n  id: number;\n  episodeNumber: number;\n  title: string;\n  airDate: Date;\n  url: string;\n  available: boolean;\n  requested: boolean;\n  approved: boolean;\n  selected: boolean; // This is for the UI only\n}\n\nexport interface IMovieRequestModel {\n  theMovieDbId: number;\n}\n\nexport interface IFilter {\n  availabilityFilter: FilterType;\n  statusFilter: FilterType;\n}\n\nexport enum FilterType {\n  None = 0,\n  Available = 1,\n  NotAvailable = 2,\n  Approved = 3,\n  Processing = 4,\n  PendingApproval = 5,\n}\n\n\n\n// WEBPACK FOOTER //\n// ./node_modules/angular2-template-loader!./node_modules/angular-router-loader/src!./ClientApp/app/interfaces/IRequestModel.ts","import { ICheckbox } from \"./index\";\n\nexport interface IUser {\n    id: string;\n    userName: string;\n    alias: string;\n    claims: ICheckbox[];\n    emailAddress: string;\n    password: string;\n    userType: UserType;\n    lastLoggedIn: Date;\n    hasLoggedIn: boolean;\n    movieRequestLimit: number;\n    episodeRequestLimit: number;\n    userAccessToken: string;\n    // FOR UI\n    checked: boolean;\n}\n\nexport interface ICreateWizardUser {\n    username: string;\n    password: string;\n    usePlexAdminAccount: boolean;\n}\n\nexport enum UserType {\n    LocalUser = 1,\n    PlexUser = 2,\n    EmbyUser = 3,\n}\n\nexport interface IIdentityResult {\n    errors: string[];\n    successful: boolean;\n}\n\nexport interface IUpdateLocalUser extends IUser {\n    currentPassword: string;\n    confirmNewPassword: string;\n}\n\nexport interface IResetPasswordToken {\n    email: string;\n    token: string;\n    password: string;\n}\n\nexport interface IMobileUsersViewModel {\n    username: string;\n    devices: number;\n}\n\n\n\n// WEBPACK FOOTER //\n// ./node_modules/angular2-template-loader!./node_modules/angular-router-loader/src!./ClientApp/app/interfaces/IUser.ts","import { IIssueCategory, IUser, RequestType } from \"./\";\n\nexport interface IIssues {\n    id?: number;\n    title: string;\n    requestType: RequestType;\n    providerId: string;\n    subject: string;\n    description: string;\n    issueCategory: IIssueCategory;\n    issueCategoryId: number;\n    status: IssueStatus;\n    resolvedDate?: Date;\n    comments: IIssueComments[];\n    requestId: number | undefined;\n    userReported: IUser | undefined;\n}\n\nexport enum IssueStatus {\n    Pending = 0,\n    InProgress = 1,\n    Resolved = 2,\n}\n\nexport interface IIssueCount {\n    pending: number;\n    inProgress: number;\n    resolved: number;\n}\n\nexport interface IPagenator {\n        first: number;\n        rows: number;\n        page: number;\n        pageCount: number;\n}\n\nexport interface IIssueComments {\n    userId: string;\n    comment: string;\n    movieIssueId: number | undefined;\n    tvIssueId: number | undefined;\n    date: Date;\n    user: IUser;\n    issues: IIssues | undefined;\n}\n\nexport interface IIssuesChat {\n    comment: string;\n    date: Date;\n    username: string;\n    adminComment: boolean;\n}\n\nexport interface INewIssueComments {\n    comment: string;\n    issueId: number;\n}\n\nexport interface IUpdateStatus {\n    issueId: number;\n    status: IssueStatus;\n}\n\n\n\n// WEBPACK FOOTER //\n// ./node_modules/angular2-template-loader!./node_modules/angular-router-loader/src!./ClientApp/app/interfaces/IIssues.ts","import { ModuleWithProviders, NgModule } from \"@angular/core\";\nimport { HumanizePipe } from \"./HumanizePipe\";\n\n@NgModule({\n    imports:        [],\n    declarations:   [HumanizePipe],\n    exports:        [HumanizePipe],\n})\nexport class PipeModule {\n\n    public static forRoot(): ModuleWithProviders {\n        return {\n            ngModule: PipeModule,\n            providers: [],\n        };\n    }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./node_modules/angular2-template-loader!./node_modules/angular-router-loader/src!./ClientApp/app/pipes/pipe.module.ts","import { Pipe, PipeTransform } from \"@angular/core\";\n\n@Pipe({\n    name: \"humanize\",\n})\nexport class HumanizePipe implements PipeTransform  {\n    public transform(value: string) {\n        if ((typeof value) !== \"string\") {\n            return value;\n        }\n        value = value.split(/(?=[A-Z])/).join(\" \");\n        value = value[0].toUpperCase() + value.slice(1);\n        return value;\n    }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./node_modules/angular2-template-loader!./node_modules/angular-router-loader/src!./ClientApp/app/pipes/HumanizePipe.ts","module.exports = (__webpack_require__(1))(920);\n\n\n//////////////////\n// WEBPACK FOOTER\n// delegated ./node_modules/rxjs/add/operator/takeUntil.js from dll-reference vendor_a449fdf94c391aac3fe0\n// module id = 185\n// module chunks = 0 2","module.exports = (__webpack_require__(1))(967);\n\n\n//////////////////\n// WEBPACK FOOTER\n// delegated ./node_modules/ngx-clipboard/dist/index.js from dll-reference vendor_a449fdf94c391aac3fe0\n// module id = 196\n// module chunks = 0","import { Component, OnInit } from \"@angular/core\";\nimport { IAbout } from \"../../interfaces/ISettings\";\nimport { JobService, SettingsService } from \"../../services\";\n\n@Component({\n    template: require('./about.component.html'),\n})\nexport class AboutComponent implements OnInit {\n\n    public about: IAbout;\n    public newUpdate: boolean;\n\n    constructor(private readonly settingsService: SettingsService,\n                private readonly jobService: JobService) { }\n\n    public ngOnInit() {\n        this.settingsService.about().subscribe(x => this.about = x);\n        this.jobService.getCachedUpdate().subscribe(x => {\n            if (x === true) {\n                this.newUpdate = true;\n            }\n        });\n\n    }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./node_modules/angular2-template-loader!./node_modules/angular-router-loader/src!./ClientApp/app/settings/about/about.component.ts","module.exports = \"\\n<settings-menu></settings-menu>\\n<div *ngIf=\\\"about\\\">\\n    <fieldset>\\n        <legend>About</legend>\\n        <form>\\n            <div class=\\\"col-md-8\\\">\\n                <table class=\\\"table table-striped table-hover table-responsive table-condensed\\\">\\n                    <thead>\\n                    </thead>\\n                    <tbody>\\n                        <tr>\\n                            <td>\\n                                <span>Version</span>\\n                            </td>\\n                            <td>\\n                                <span>{{about.version}} <a [routerLink]=\\\"['/Settings/Update']\\\" *ngIf=\\\"newUpdate\\\" style=\\\"color:#df691a\\\"><b>(New Update Available)</b></a></span>\\n                            </td>\\n                        </tr>\\n                        <tr>\\n                            <td>\\n                                <span>Branch</span>\\n                            </td>\\n                            <td>\\n                                <span>{{about.branch}}</span>\\n                            </td>\\n                        </tr>\\n                        <tr>\\n                            <td>\\n                                <span>Github</span>\\n                            </td>\\n                            <td>\\n                                <a href=\\\"https://github.com/tidusjar/Ombi\\\" target=\\\"_blank\\\">https://github.com/tidusjar/Ombi</a>\\n                            </td>\\n                        </tr>\\n                        <tr>\\n                            <td>\\n                                <span>Discord</span>\\n                            </td>\\n                            <td>\\n                                <a href=\\\"https://discord.gg/KxYZ64w\\\" target=\\\"_blank\\\">https://discord.gg/KxYZ64w</a>\\n                            </td>\\n                        </tr>\\n\\n                        <tr>\\n                            <td>\\n                                <span>Reddit</span>\\n                            </td>\\n                            <td>\\n                                <a href=\\\"https://www.reddit.com/r/Ombi/\\\" target=\\\"_blank\\\">https://www.reddit.com/r/Ombi/</a>\\n                            </td>\\n                        </tr>\\n                        <tr>\\n                            <td>\\n                                <span>OS Architecture</span>\\n                            </td>\\n                            <td>\\n                                <span>{{about.osArchitecture}}</span>\\n                            </td>\\n                        </tr>\\n                        <tr>\\n                            <td>\\n                                <span>OS Description</span>\\n                            </td>\\n                            <td>\\n                                <span>{{about.osDescription}}</span>\\n                            </td>\\n                        </tr>\\n                        <tr>\\n                            <td>\\n                                <span>Process Architecture</span>\\n                            </td>\\n                            <td>\\n                                <span>{{about.processArchitecture}}</span>\\n                            </td>\\n                        </tr>\\n                        <tr>\\n                            <td>\\n                                <span>Application Base Path</span>\\n                            </td>\\n                            <td>\\n                                <span>{{about.applicationBasePath}}</span>\\n                            </td>\\n                        </tr>\\n                    </tbody>\\n                </table>\\n            </div>\\n        </form>\\n    </fieldset>\\n</div>\\n\";\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./ClientApp/app/settings/about/about.component.html\n// module id = 198\n// module chunks = 0","import { Component, OnInit } from \"@angular/core\";\nimport { FormBuilder, FormGroup } from \"@angular/forms\";\n\nimport { NotificationService } from \"../../services\";\nimport { SettingsService } from \"../../services\";\n\n@Component({\n    template: require('./authentication.component.html'),\n})\nexport class AuthenticationComponent implements OnInit {\n\n    public form: FormGroup;\n\n    constructor(private settingsService: SettingsService,\n                private notificationService: NotificationService,\n                private fb: FormBuilder) { }\n\n    public ngOnInit() {\n        this.settingsService.getAuthentication().subscribe(x => {\n            this.form = this.fb.group({\n                allowNoPassword: [x.allowNoPassword],\n                requiredDigit: [x.requiredDigit],\n                requiredLength: [x.requiredLength],\n                requiredLowercase: [x.requiredLowercase],\n                requireNonAlphanumeric: [x.requireNonAlphanumeric],\n                requireUppercase: [x.requireUppercase],\n            });\n        });\n    }\n\n    public onSubmit(form: FormGroup) {\n        if (form.invalid) {\n            this.notificationService.error(\"Please check your entered values\");\n            return;\n        }\n\n        this.settingsService.saveAuthentication(form.value).subscribe(x => {\n            if (x) {\n                this.notificationService.success(\"Successfully saved Authentication settings\");\n            } else {\n                this.notificationService.success(\"There was an error when saving the Authentication settings\");\n            }\n        });\n    }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./node_modules/angular2-template-loader!./node_modules/angular-router-loader/src!./ClientApp/app/settings/authentication/authentication.component.ts","module.exports = \"<settings-menu></settings-menu>\\n\\n<wiki [url]=\\\"'https://github.com/tidusjar/Ombi/wiki/Authentication-Settings'\\\"></wiki>\\n<fieldset *ngIf=\\\"form\\\">\\n    <legend>Authentication</legend>\\n    <form novalidate [formGroup]=\\\"form\\\" (ngSubmit)=\\\"onSubmit(form)\\\">\\n\\n        <div class=\\\"col-md-6\\\">\\n\\n            <div class=\\\"form-group\\\">\\n                <div class=\\\"checkbox\\\">\\n                    <input type=\\\"checkbox\\\" id=\\\"allowNoPassword\\\" name=\\\"allowNoPassword\\\" formControlName=\\\"allowNoPassword\\\">\\n                    <label for=\\\"allowNoPassword\\\" tooltipPosition=\\\"top\\\" pTooltip=\\\"Allow users to login with out a password\\\">Allow users to login without a password</label>\\n                </div>\\n            </div>\\n\\n            <!-- <hr/>\\n            <div class=\\\"form-group\\\">\\n                <div class=\\\"checkbox\\\">\\n                    <input type=\\\"checkbox\\\" id=\\\"requiredDigit\\\" name=\\\"requiredDigit\\\" formControlName=\\\"requiredDigit\\\">\\n                    <label for=\\\"requiredDigit\\\">Require a digit in the password</label>\\n                </div>\\n            </div>\\n\\n            <div class=\\\"form-group\\\">\\n                <label for=\\\"requiredLength\\\" class=\\\"control-label\\\">Required password length</label>\\n                <div>\\n                    <input type=\\\"text\\\" class=\\\"form-control form-control-custom \\\" id=\\\"requiredLength\\\" name=\\\"requiredLength\\\" formControlName=\\\"requiredLength\\\">\\n                </div>\\n            </div>\\n\\n            <div class=\\\"form-group\\\">\\n                <div class=\\\"checkbox\\\">\\n                    <input type=\\\"checkbox\\\" id=\\\"requiredLowercase\\\" name=\\\"requiredLowercase\\\" formControlName=\\\"requiredLowercase\\\">\\n                    <label for=\\\"requiredLowercase\\\">Require a lowercase character in the password</label>\\n                </div>\\n            </div>\\n\\n            <div class=\\\"form-group\\\">\\n                <div class=\\\"checkbox\\\">\\n                    <input type=\\\"checkbox\\\" id=\\\"requireNonAlphanumeric\\\" name=\\\"requireNonAlphanumeric\\\" formControlName=\\\"requireNonAlphanumeric\\\">\\n                    <label for=\\\"requireNonAlphanumeric\\\">Require a NonAlphanumeric character in the password</label>\\n                </div>\\n            </div>\\n            \\n            <div class=\\\"form-group\\\">\\n                <div class=\\\"checkbox\\\">\\n                    <input type=\\\"checkbox\\\" id=\\\"requireUppercase\\\" name=\\\"requireUppercase\\\" formControlName=\\\"requireUppercase\\\">\\n                    <label for=\\\"requireUppercase\\\">Require a uppercase character in the password</label>\\n                </div>\\n            </div> -->\\n\\n            <div class=\\\"form-group\\\">\\n                <div>\\n                    <button [disabled]=\\\"form.invalid\\\" type=\\\"submit\\\" id=\\\"save\\\" class=\\\"btn btn-primary-outline\\\">Submit</button>\\n                </div>\\n            </div>\\n        </div>\\n    </form>\\n</fieldset>\";\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./ClientApp/app/settings/authentication/authentication.component.html\n// module id = 200\n// module chunks = 0","import { Component, OnInit } from \"@angular/core\";\nimport { FormBuilder, FormControl, FormGroup, Validators } from \"@angular/forms\";\n\nimport { CouchPotatoService, NotificationService, SettingsService, TesterService } from \"../../services\";\n\nimport { ICouchPotatoProfiles } from \"../../interfaces\";\n\n@Component({\n    template: require('./couchpotato.component.html'),\n})\nexport class CouchPotatoComponent implements OnInit {\n\n    public form: FormGroup;\n    public profiles: ICouchPotatoProfiles;\n\n    public profilesRunning: boolean;\n\n    constructor(private readonly settingsService: SettingsService,\n                private readonly fb: FormBuilder,\n                private readonly notificationService: NotificationService,\n                private readonly couchPotatoService: CouchPotatoService,\n                private readonly testerService: TesterService) { }\n\n    public ngOnInit() {\n        this.settingsService.getCouchPotatoSettings().subscribe(x => {\n            this.form = this.fb.group({\n                enabled:            [x.enabled],\n                username:           [x.username],\n                password:           [x.password],\n                apiKey:             [x.apiKey, Validators.required],\n                ip:                 [x.ip, Validators.required],\n                port:               [x.port, Validators.required],\n                ssl:                [x.ssl],\n                subDir:             [x.subDir],\n                defaultProfileId:   [x.defaultProfileId],\n            });\n\n            if(x.defaultProfileId) {\n                this.getProfiles(this.form);\n            }\n        });\n    }\n\n    public getProfiles(form: FormGroup) {\n        this.profilesRunning = true;\n        this.couchPotatoService.getProfiles(form.value).subscribe(x => {\n            this.profiles = x;\n            this.profilesRunning = false;\n        });\n    }\n\n    public onSubmit(form: FormGroup) {\n        if (form.invalid) {\n            this.notificationService.error(\"Please check your entered values\");\n            return;\n        }\n\n        const settings = form.value;\n\n        this.settingsService.saveCouchPotatoSettings(settings).subscribe(x => {\n            if (x) {\n                this.notificationService.success(\"Successfully saved the CouchPotato settings\");\n            } else {\n                this.notificationService.success(\"There was an error when saving the CouchPotato settings\");\n            }\n        });\n    }\n\n    public test(form: FormGroup) {\n        if (form.invalid) {\n            this.notificationService.error(\"Please check your entered values\");\n            return;\n        }\n        const settings = form.value;\n        this.testerService.couchPotatoTest(settings).subscribe(x => {\n            if (x === true) {\n                this.notificationService.success(\"Successfully connected to CouchPotato!\");\n            } else {\n                this.notificationService.error(\"We could not connect to CouchPotato!\");\n            }\n        });\n    }\n\n    public requestToken(form: FormGroup) {\n        this.couchPotatoService.getApiKey(form.value).subscribe(x => {\n            if (x.success === true) {\n                (<FormControl>this.form.controls.apiKey).setValue(x.api_key);\n                this.notificationService.success(\"Successfully grabbed the Api Key\");\n            } else {\n                this.notificationService.error(\"Could not get the Api Key\");\n            }\n        });\n    }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./node_modules/angular2-template-loader!./node_modules/angular-router-loader/src!./ClientApp/app/settings/couchpotato/couchpotato.component.ts","module.exports = \"<settings-menu>\\n</settings-menu>\\n<div *ngIf=\\\"form\\\">\\n    <fieldset>\\n        <legend>CouchPotato Settings</legend>\\n        <form novalidate [formGroup]=\\\"form\\\" (ngSubmit)=\\\"onSubmit(form)\\\" style=\\\"padding-top:5%;\\\">\\n            <div class=\\\"col-md-6\\\">\\n                <div class=\\\"form-group\\\">\\n                    <div class=\\\"checkbox\\\">\\n                        <input type=\\\"checkbox\\\" id=\\\"enable\\\" formControlName=\\\"enabled\\\" ng-checked=\\\"form.enabled\\\">\\n                        <label for=\\\"enable\\\">Enable</label>\\n                    </div>\\n                </div>\\n\\n\\n                <div class=\\\"form-group\\\">\\n                    <label for=\\\"Ip\\\" class=\\\"control-label\\\">Hostname or IP</label>\\n                    <div class=\\\"\\\">\\n                        <input type=\\\"text\\\" class=\\\"form-control form-control-custom\\\" [ngClass]=\\\"{'form-error': form.get('ip').hasError('required')}\\\"\\n                            id=\\\"Ip\\\" name=\\\"Ip\\\" placeholder=\\\"localhost\\\" formControlName=\\\"ip\\\">\\n                        <small *ngIf=\\\"form.get('ip').hasError('required')\\\" class=\\\"error-text\\\">The IP/Hostname is required</small>\\n                    </div>\\n                </div>\\n\\n                <div class=\\\"form-group\\\">\\n                    <label for=\\\"portNumber\\\" class=\\\"control-label\\\">Port</label>\\n                    <input type=\\\"text\\\" class=\\\"form-control form-control-custom\\\" [ngClass]=\\\"{'form-error': form.get('port').hasError('required')}\\\" formControlName=\\\"port\\\" id=\\\"portNumber\\\" name=\\\"Port\\\" placeholder=\\\"Port Number\\\">\\n\\n                    <small *ngIf=\\\"form.get('port').hasError('required')\\\" class=\\\"error-text\\\">The Port is required</small>\\n                </div>\\n\\n\\n                <div class=\\\"form-group\\\">\\n                    <label for=\\\"ApiKey\\\" class=\\\"control-label\\\">API Key</label>\\n                 \\n                        <input type=\\\"text\\\" class=\\\"form-control form-control-custom\\\" [ngClass]=\\\"{'form-error': form.get('apiKey').hasError('required')}\\\" id=\\\"ApiKey\\\" name=\\\"ApiKey\\\" formControlName=\\\"apiKey\\\">\\n\\n                        <small *ngIf=\\\"form.get('apiKey').hasError('required')\\\" class=\\\"error-text\\\">The API Key is required</small>\\n                </div>\\n                <div class=\\\"form-group\\\">\\n                    <div class=\\\"checkbox\\\">\\n\\n                        <input type=\\\"checkbox\\\" id=\\\"Ssl\\\" name=\\\"Ssl\\\" formControlName=\\\"ssl\\\"><label for=\\\"Ssl\\\">SSL</label>\\n\\n                    </div>\\n                </div>\\n                <div class=\\\"form-group\\\">\\n                    <label for=\\\"SubDir\\\" class=\\\"control-label\\\">Base Url</label>\\n                    <div>\\n                        <input type=\\\"text\\\" class=\\\"form-control form-control-custom\\\" formControlName=\\\"subDir\\\" id=\\\"SubDir\\\" name=\\\"SubDir\\\">\\n                    </div>\\n                </div>\\n            </div>\\n            <div class=\\\"col-md-6\\\">\\n                <div class=\\\"form-group\\\">\\n                    <label for=\\\"username\\\" class=\\\"control-label\\\">Username</label>\\n                    <input type=\\\"text\\\" class=\\\"form-control form-control-custom \\\" formControlName=\\\"username\\\" name=\\\"username\\\">\\n                </div>\\n                <div class=\\\"form-group\\\">\\n                    <label for=\\\"password\\\" class=\\\"control-label\\\">Password</label>\\n                    <input type=\\\"password\\\" class=\\\"form-control form-control-custom \\\" formControlName=\\\"password\\\" name=\\\"password\\\">\\n                </div>\\n                <div class=\\\"form-group\\\">\\n                    <button type=\\\"button\\\" class=\\\"btn btn-primary-outline\\\" (click)=\\\"requestToken(form)\\\">Request Api Key <i class=\\\"fa fa-key\\\"></i></button>\\n                </div>\\n\\n\\n                <div class=\\\"form-group\\\">\\n                    <div>\\n                        <button type=\\\"submit\\\" (click)=\\\"getProfiles(form)\\\" class=\\\"btn btn-primary-outline\\\">Get Quality Profiles <span *ngIf=\\\"profilesRunning\\\" class=\\\"fa fa-spinner fa-spin\\\"> </span></button>\\n                    </div>\\n                </div>\\n                <div class=\\\"form-group\\\">\\n                    <label for=\\\"select\\\" class=\\\"control-label\\\">Quality Profiles</label>\\n                    <div id=\\\"profiles\\\">\\n                        <select formControlName=\\\"defaultProfileId\\\" class=\\\"form-control form-control-custom\\\" id=\\\"select\\\">\\n                            <option *ngFor=\\\"let profile of profiles?.list\\\" value=\\\"{{profile._id}}\\\">{{profile.label}}</option>\\n                        </select>\\n                    </div>\\n                </div>\\n\\n\\n\\n\\n                <div class=\\\"form-group\\\">\\n                    <div>\\n                        <button [disabled]=\\\"form.invalid\\\" (click)=\\\"test(form)\\\" class=\\\"btn btn-primary-outline\\\">Test Connectivity <span id=\\\"spinner\\\"></span></button>\\n                    </div>\\n                </div>\\n\\n\\n                <div class=\\\"form-group\\\">\\n                    <div>\\n                        <button type=\\\"submit\\\" [disabled]=\\\"form.invalid\\\" class=\\\"btn btn-primary-outline \\\">Submit</button>\\n                    </div>\\n                </div>\\n            </div>\\n        </form>\\n    </fieldset>\\n</div>\";\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./ClientApp/app/settings/couchpotato/couchpotato.component.html\n// module id = 202\n// module chunks = 0","import { Component, OnInit } from \"@angular/core\";\n\nimport { ICustomizationSettings, IThemes } from \"../../interfaces\";\nimport { NotificationService } from \"../../services\";\nimport { SettingsService } from \"../../services\";\n\n@Component({\n    template: require('./customization.component.html'),\n})\nexport class CustomizationComponent implements OnInit {\n\n    public settings: ICustomizationSettings;\n    public themes: IThemes[];\n\n    constructor(private settingsService: SettingsService, private notificationService: NotificationService) {  }\n\n    public ngOnInit() {\n        this.settingsService.getCustomization().subscribe(x => {\n            this.settings = x;\n            this.settingsService.getThemes().subscribe(t => {\n                this.themes = t;\n\n                const existingTheme = this.themes.filter((item) => {\n                    return item.fullName === this.settings.presetThemeName;\n                })[0];\n\n                if(existingTheme) {\n                    const index = this.themes.indexOf(existingTheme, 0);\n                    if (index > -1) {\n                        this.themes.splice(index, 1);\n                    }\n                }\n                if(x.hasPresetTheme) {\n                    this.themes.unshift({displayName: x.presetThemeDisplayName, fullName: x.presetThemeName, url: existingTheme.url, version: x.presetThemeVersion});\n                    this.themes.unshift({displayName: \"None\", fullName: \"None\", url: \"\", version: \"\"});\n                } else {\n                    this.themes.unshift({displayName: \"Please Select\", fullName: \"-1\", url: \"-1\", version: \"\"});\n                }\n            });\n        });\n\n    }\n\n    public save() {\n        this.settingsService.saveCustomization(this.settings).subscribe(x => {\n            if (x) {\n                this.notificationService.success(\"Successfully saved Ombi settings\");\n            } else {\n                this.notificationService.success(\"There was an error when saving the Ombi settings\");\n            }\n        });\n    }\n\n    public dropDownChange(event: any): void {\n        const selectedThemeFullName = <string>event.target.value;\n        const selectedTheme = this.themes.filter((val) => {\n            return val.fullName === selectedThemeFullName;\n        })[0];\n\n        if(selectedTheme.fullName === this.settings.presetThemeName) {\n            return;\n        }\n        \n        if(selectedTheme.fullName === \"None\" || selectedTheme.fullName === \"-1\") {\n            this.settings.presetThemeName = \"\";\n            this.settings.presetThemeContent = \"\";\n            return;\n        }\n\n        this.settings.presetThemeName = selectedThemeFullName;\n        this.settingsService.getThemeContent(selectedTheme.url).subscribe(x => {\n            this.settings.presetThemeContent = x;\n        });\n    }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./node_modules/angular2-template-loader!./node_modules/angular-router-loader/src!./ClientApp/app/settings/customization/customization.component.ts","module.exports = \"<settings-menu></settings-menu>\\n<wiki [url]=\\\"'https://github.com/tidusjar/Ombi/wiki/Customization-Settings'\\\"></wiki>\\n\\n<fieldset *ngIf=\\\"settings\\\">\\n    <legend>Customization</legend>\\n    <div class=\\\"col-md-5\\\">\\n        <div class=\\\"form-group\\\">\\n            <label for=\\\"applicationName\\\" class=\\\"control-label\\\">Application Name</label>\\n            <div>\\n                <input type=\\\"text\\\" [(ngModel)]=\\\"settings.applicationName\\\" class=\\\"form-control form-control-custom \\\" id=\\\"applicationName\\\"\\n                    name=\\\"applicationName\\\" placeholder=\\\"Ombi\\\" value=\\\"{{settings.applicationName}}\\\">\\n            </div>\\n        </div>\\n\\n        <div class=\\\"form-group\\\">\\n            <label for=\\\"applicationurl\\\" class=\\\"control-label\\\">Application URL</label>\\n            <div>\\n                <input type=\\\"text\\\" [(ngModel)]=\\\"settings.applicationUrl\\\" class=\\\"form-control form-control-custom \\\" id=\\\"applicationurl\\\" name=\\\"applicationurl\\\"\\n                    placeholder=\\\"http://ombi.io/\\\" value=\\\"{{settings.applicationUrl}}\\\">\\n            </div>\\n        </div>\\n\\n        <div class=\\\"form-group\\\">\\n            <label for=\\\"logo\\\" class=\\\"control-label\\\">Custom Logo</label>\\n            <div>\\n                <input type=\\\"text\\\" [(ngModel)]=\\\"settings.logo\\\" class=\\\"form-control form-control-custom \\\" id=\\\"logo\\\" name=\\\"logo\\\" value=\\\"{{settings.logo}}\\\"\\n                    tooltipPosition=\\\"top\\\" pTooltip=\\\"Use a URL e.g. www.google.com/logo.png\\\">\\n            </div>\\n        </div>\\n        <div *ngIf=\\\"settings.logo\\\" class=\\\"form-group\\\">\\n            <label for=\\\"logo\\\" class=\\\"control-label\\\">Logo Preview:</label>\\n            <div>\\n                <img [src]=\\\"settings.logo\\\" style=\\\"width: 300px\\\" />\\n            </div>\\n        </div>\\n\\n\\n        <div class=\\\"form-group\\\">\\n            <label for=\\\"customLink\\\" class=\\\"control-label\\\">Custom CSS Link</label>\\n            <div>\\n                <input type=\\\"text\\\" [(ngModel)]=\\\"settings.customCssLink\\\" class=\\\"form-control form-control-custom \\\" name=\\\"customLink\\\" value=\\\"{{settings.customCssLink}}\\\"\\n                    tooltipPosition=\\\"top\\\" pTooltip=\\\"A link to a CSS file, you can use this to use your own styles for Ombi\\\">\\n            </div>\\n        </div>\\n\\n        <div class=\\\"form-group\\\">\\n            <div class=\\\"checkbox\\\">\\n                <input type=\\\"checkbox\\\" id=\\\"enableCustomDonations\\\" name=\\\"enableCustomDonations\\\" [(ngModel)]=\\\"settings.enableCustomDonations\\\">\\n                <label for=\\\"enableCustomDonations\\\" tooltipPosition=\\\"top\\\" pTooltip=\\\"Enable to show a custom donation link in the navigation bar\\\">Enable custom donation link</label>\\n            </div>\\n        </div>\\n\\n        <div class=\\\"form-group\\\">\\n            <label for=\\\"customDonation\\\" class=\\\"control-label\\\">Custom Donation URL</label>\\n            <div>\\n                <input [disabled]=\\\"!settings.enableCustomDonations\\\" type=\\\"text\\\" [(ngModel)]=\\\"settings.customDonationUrl\\\" class=\\\"form-control form-control-custom \\\" name=\\\"customDonation\\\" value=\\\"{{settings.customDonationUrl}}\\\"\\n                    tooltipPosition=\\\"top\\\" pTooltip=\\\"A link to a Paypal address, or your custom donation url.\\\">\\n            </div>\\n        </div>\\n\\n        <div class=\\\"form-group\\\">\\n            <label for=\\\"customDonationMessage\\\" class=\\\"control-label\\\">Donation Button Message</label>\\n            <div>\\n                <input [disabled]=\\\"!settings.enableCustomDonations\\\" type=\\\"text\\\" [(ngModel)]=\\\"settings.customDonationMessage\\\" class=\\\"form-control form-control-custom \\\" name=\\\"customDonationMessage\\\" value=\\\"{{settings.customDonationMessage}}\\\"\\n                    tooltipPosition=\\\"top\\\" pTooltip=\\\"Set a custom message to be displayed in the navigation bar.\\\">\\n            </div>\\n        </div>\\n\\n\\n\\n        <div class=\\\"form-group\\\">\\n            <div>\\n                <button (click)=\\\"save()\\\" type=\\\"submit\\\" id=\\\"save\\\" class=\\\"btn btn-primary-outline\\\">Submit</button>\\n            </div>\\n        </div>\\n\\n    </div>\\n    <div class=\\\"col-md-7\\\">\\n        <div *ngIf=\\\"themes\\\">\\n            <div class=\\\"form-group\\\">\\n                <label for=\\\"presetTheme\\\" class=\\\"control-label\\\">Preset Themes</label>\\n                <div id=\\\"presetTheme\\\">\\n                    <select class=\\\"form-control form-control-custom\\\" (change)=\\\"dropDownChange($event)\\\">\\n                        <option *ngFor=\\\"let theme of themes\\\" value=\\\"{{theme.fullName}}\\\" [selected]=\\\"settings.presetThemeName === theme.fullName\\\">{{theme.displayName}} {{theme.version}}</option>\\n                    </select>\\n                </div>\\n            </div>\\n            <div class=\\\"form-group\\\" *ngIf=\\\"settings.presetThemeContent\\\">\\n                <textarea rows=\\\"25\\\" type=\\\"text\\\" class=\\\"form-control-custom form-control \\\" id=\\\"themeContent\\\" name=\\\"themeContent\\\" [(ngModel)]=\\\"settings.presetThemeContent\\\"> {{settings.presetThemeContent}} </textarea>\\n            </div>\\n            <small>Preset themes are powered by\\n                <a href=\\\"https://github.com/leram84/layer.Cake\\\" target=\\\"_blank\\\">layer#Cake</a>.\\n            </small>\\n        </div>\\n    </div>\\n\\n\\n\\n\\n</fieldset>\";\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./ClientApp/app/settings/customization/customization.component.html\n// module id = 204\n// module chunks = 0","import { Component, OnInit } from \"@angular/core\";\nimport { FormBuilder, FormGroup, Validators } from \"@angular/forms\";\n\nimport { NotificationService, SettingsService } from \"../../services\";\n\n@Component({\n    template: require('./dognzb.component.html'),\n})\nexport class DogNzbComponent implements OnInit {\n\n    public form: FormGroup;\n\n    public profilesRunning: boolean;\n\n    constructor(private readonly settingsService: SettingsService,\n                private readonly fb: FormBuilder,\n                private readonly notificationService: NotificationService) { }\n\n    public ngOnInit() {\n        this.settingsService.getDogNzbSettings().subscribe(x => {\n            this.form = this.fb.group({\n                enabled:            [x.enabled],\n                apiKey:             [x.apiKey, Validators.required],\n                movies:             [x.movies],\n                tvShows:            [x.tvShows],\n            });\n        });\n    }\n\n    public onSubmit(form: FormGroup) {\n        if (form.invalid) {\n            this.notificationService.error(\"Please check your entered values\");\n            return;\n        }\n\n        const settings = form.value;\n\n        this.settingsService.saveDogNzbSettings(settings).subscribe(x => {\n            if (x) {\n                this.notificationService.success(\"Successfully saved the DogNzb settings\");\n            } else {\n                this.notificationService.success(\"There was an error when saving the DogNzb settings\");\n            }\n        });\n    }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./node_modules/angular2-template-loader!./node_modules/angular-router-loader/src!./ClientApp/app/settings/dognzb/dognzb.component.ts","module.exports = \"<settings-menu>\\n</settings-menu>\\n\\n<wiki [url]=\\\"'https://github.com/tidusjar/Ombi/wiki/DogNzb-Settings'\\\"></wiki>\\n<div *ngIf=\\\"form\\\">\\n    <fieldset>\\n        <legend>DogNzb Settings</legend>\\n        <form novalidate [formGroup]=\\\"form\\\" (ngSubmit)=\\\"onSubmit(form)\\\" style=\\\"padding-top:5%;\\\">\\n            <div class=\\\"col-md-6\\\">\\n                <div class=\\\"form-group\\\">\\n                    <div class=\\\"checkbox\\\">\\n                        <input type=\\\"checkbox\\\" id=\\\"enable\\\" formControlName=\\\"enabled\\\" ng-checked=\\\"form.enabled\\\">\\n                        <label for=\\\"enable\\\">Enable</label>\\n                    </div>\\n                </div>\\n\\n\\n               \\n                <div class=\\\"form-group\\\">\\n                    <label for=\\\"ApiKey\\\" class=\\\"control-label\\\">API Key</label>\\n                 \\n                        <input type=\\\"text\\\" class=\\\"form-control form-control-custom\\\" [ngClass]=\\\"{'form-error': form.get('apiKey').hasError('required')}\\\" id=\\\"ApiKey\\\" name=\\\"ApiKey\\\" formControlName=\\\"apiKey\\\">\\n\\n                        <small *ngIf=\\\"form.get('apiKey').hasError('required')\\\" class=\\\"error-text\\\">The API Key is required</small>\\n                </div>\\n                \\n\\n\\n\\n                <div class=\\\"form-group\\\">\\n                    <div>\\n                        <button type=\\\"submit\\\" [disabled]=\\\"form.invalid\\\" class=\\\"btn btn-primary-outline \\\">Submit</button>\\n                    </div>\\n                </div>\\n            </div>\\n            <div class=\\\"col-md-6\\\">\\n                <div class=\\\"form-group\\\">\\n                    <div class=\\\"checkbox\\\">\\n                        <input type=\\\"checkbox\\\" id=\\\"movies\\\" formControlName=\\\"movies\\\" ng-checked=\\\"form.movies\\\">\\n                        <label for=\\\"movies\\\">Enable for Movies</label>\\n                    </div>\\n                </div>\\n\\n                <div class=\\\"form-group\\\">\\n                    <div class=\\\"checkbox\\\">\\n                        <input type=\\\"checkbox\\\" id=\\\"tvShows\\\" formControlName=\\\"tvShows\\\" ng-checked=\\\"form.tvShows\\\">\\n                        <label for=\\\"tvShows\\\">Enable for Tv Shows</label>\\n                    </div>\\n                </div>\\n\\n            </div>\\n        </form>\\n    </fieldset>\\n</div>\";\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./ClientApp/app/settings/dognzb/dognzb.component.html\n// module id = 206\n// module chunks = 0","import { Component, OnInit } from \"@angular/core\";\n\nimport { IEmbyServer, IEmbySettings } from \"../../interfaces\";\nimport { JobService, NotificationService, SettingsService, TesterService } from \"../../services\";\n\n@Component({\n    template: require('./emby.component.html'),\n})\nexport class EmbyComponent implements OnInit {\n\n    public settings: IEmbySettings;\n\n    constructor(private settingsService: SettingsService,\n                private notificationService: NotificationService,\n                private testerService: TesterService,\n                private jobService: JobService) { }\n\n    public ngOnInit() {\n        this.settingsService.getEmby().subscribe(x => this.settings = x);\n    }\n\n    public addTab() {\n        if (this.settings.servers == null) {\n            this.settings.servers = [];\n        }\n        this.settings.servers.push({\n            name: \"New*\",\n            id: Math.floor(Math.random() * (99999 - 0 + 1) + 1),\n            apiKey: \"\",\n            administratorId: \"\",\n            enableEpisodeSearching: false,\n            ip: \"\",\n            port: 0,\n            ssl: false,\n            subDir: \"\",\n        } as IEmbyServer);\n    }\n\n    public test(server: IEmbyServer) {\n        this.testerService.embyTest(server).subscribe(x => {\n            if (x === true) {\n                this.notificationService.success(`Successfully connected to the Emby server ${server.name}!`);\n            } else {\n                this.notificationService.error(`We could not connect to the Emby server  ${server.name}!`);\n            }\n        });\n    }\n\n    public removeServer(server: IEmbyServer) {\n        const index = this.settings.servers.indexOf(server, 0);\n        if (index > -1) {\n            this.settings.servers.splice(index, 1);\n        }\n    }\n\n    public save() {\n        this.settingsService.saveEmby(this.settings).subscribe(x => {\n            if (x) {\n                this.notificationService.success(\"Successfully saved Emby settings\");\n            } else {\n                this.notificationService.success(\"There was an error when saving the Emby settings\");\n            }\n        });\n    }\n\n    public runCacher(): void {\n        this.jobService.runEmbyCacher().subscribe(x => {\n            if(x) {\n                this.notificationService.success(\"Triggered the Emby Content Cacher\");\n            }\n        });\n    }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./node_modules/angular2-template-loader!./node_modules/angular-router-loader/src!./ClientApp/app/settings/emby/emby.component.ts","module.exports = \"\\n<settings-menu></settings-menu>\\n<div *ngIf=\\\"settings\\\">\\n    <fieldset>\\n        <legend>\\n            Emby Configuration\\n        </legend>\\n\\n        <div class=\\\"row\\\">\\n            <div class=\\\"form-group col-md-3\\\">\\n                <div class=\\\"checkbox\\\">\\n                    <input type=\\\"checkbox\\\" id=\\\"enable\\\" [(ngModel)]=\\\"settings.enable\\\" [checked]=\\\"settings.enable\\\">\\n                    <label for=\\\"enable\\\">Enable</label>\\n                </div>\\n            </div>\\n            <div class=\\\"col-md-2 col-md-push-7\\\">\\n                <button type=\\\"button\\\" (click)=\\\"addTab()\\\" class=\\\"btn btn-success-outline\\\">Add Server</button>\\n            </div>\\n        </div>\\n\\n        <ngb-tabset>\\n            <div *ngFor=\\\"let server of settings.servers\\\">\\n                <ngb-tab [id]=\\\"server.id\\\" [title]=\\\"server.name\\\">\\n                    <ng-template ngbTabContent>\\n                        <br />\\n                        <br />\\n                        <div class=\\\"col-md-2\\\" style=\\\"float: right;\\\">\\n                            <button type=\\\"button\\\" (click)=\\\"removeServer(server)\\\" class=\\\"btn btn-danger-outline\\\">Remove Server</button>\\n                        </div>\\n                        <br />\\n                        <br />\\n                        <div class=\\\"col-md-6\\\">\\n                            <div class=\\\"form-group\\\">\\n                                <label for=\\\"name\\\" class=\\\"control-label\\\">Server name</label>\\n                                <div>\\n                                    <input type=\\\"text\\\" class=\\\"form-control form-control-custom \\\" id=\\\"name\\\" name=\\\"name\\\" placeholder=\\\"Server\\\" [(ngModel)]=\\\"server.name\\\" value=\\\"{{server.name}}\\\">\\n                                </div>\\n                            </div>\\n                            <div class=\\\"form-group\\\">\\n                                <label for=\\\"Ip\\\" class=\\\"control-label\\\">Hostname or IP</label>\\n                                <div>\\n                                    <input type=\\\"text\\\" class=\\\"form-control form-control-custom \\\" id=\\\"Ip\\\" name=\\\"Ip\\\" placeholder=\\\"localhost\\\" [(ngModel)]=\\\"server.ip\\\" value=\\\"{{server.ip}}\\\">\\n                                </div>\\n                            </div>\\n\\n                            <div class=\\\"form-group\\\">\\n                                <label for=\\\"portNumber\\\" class=\\\"control-label\\\">Port</label>\\n                                <div>\\n                                    <input type=\\\"text\\\" [(ngModel)]=\\\"server.port\\\" class=\\\"form-control form-control-custom \\\" id=\\\"portNumber\\\" name=\\\"Port\\\" placeholder=\\\"Port Number\\\" value=\\\"{{server.port}}\\\">\\n                                </div>\\n                            </div>\\n\\n                            <div class=\\\"form-group\\\">\\n                                <div class=\\\"checkbox\\\">\\n                                    <input type=\\\"checkbox\\\" id=\\\"ssl\\\" [(ngModel)]=\\\"server.ssl\\\" ng-checked=\\\"server.ssl\\\">\\n                                    <label for=\\\"ssl\\\">SSL</label>\\n                                </div>\\n                            </div>\\n\\n                            <div class=\\\"form-group\\\">\\n                                <label for=\\\"authToken\\\" class=\\\"control-label\\\">Emby Api Key</label>\\n                                <div class=\\\"\\\">\\n                                    <input type=\\\"text\\\" class=\\\"form-control-custom form-control\\\" id=\\\"authToken\\\" [(ngModel)]=\\\"server.apiKey\\\" placeholder=\\\"Emby Api Key\\\" value=\\\"{{server.apiKey}}\\\">\\n                                </div>\\n                            </div>\\n                            <div class=\\\"form-group\\\">\\n                                <div>\\n                                    <button id=\\\"testEmby\\\" type=\\\"button\\\" (click)=\\\"test(server)\\\" class=\\\"btn btn-primary-outline\\\">Test Connectivity <div id=\\\"spinner\\\"></div></button>\\n                                </div>\\n                            </div>\\n                        </div>\\n                    </ng-template>\\n                </ngb-tab>\\n            </div>\\n        </ngb-tabset>\\n        <div class=\\\"col-md-1\\\">\\n            <div class=\\\"form-group\\\">\\n                <div>\\n                    <button (click)=\\\"save()\\\" type=\\\"submit\\\" id=\\\"save\\\" class=\\\"btn btn-primary-outline\\\">Submit</button>\\n                </div>\\n            </div>\\n        </div>\\n        <div class=\\\"col-md-1\\\">\\n            <div class=\\\"form-group\\\">\\n                <div>\\n                    <button (click)=\\\"runCacher()\\\" type=\\\"button\\\" id=\\\"save\\\" class=\\\"btn btn-primary-outline\\\">Manually Run Cacher</button>\\n                </div>\\n            </div>\\n        </div>\\n    </fieldset>\\n</div>\";\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./ClientApp/app/settings/emby/emby.component.html\n// module id = 208\n// module chunks = 0","import { Component, OnInit } from \"@angular/core\";\nimport { FormBuilder, FormGroup } from \"@angular/forms\";\n\nimport { IIssueCategory } from \"../../interfaces\";\nimport { IssuesService, NotificationService, SettingsService } from \"../../services\";\n\n@Component({\n    template: require('./issues.component.html'),\n})\nexport class IssuesComponent implements OnInit {\n\n    public categories: IIssueCategory[];\n    public categoryToAdd: IIssueCategory = {id: 0, value: \"\"};\n    public form: FormGroup;\n\n    constructor(private issuesService: IssuesService,\n                private settingsService: SettingsService,\n                private readonly fb: FormBuilder,\n                private notificationService: NotificationService) {  }\n\n    public ngOnInit() {\n        this.settingsService.getIssueSettings().subscribe(x => {\n            this.form = this.fb.group({\n                enabled:            [x.enabled],\n                enableInProgress:   [x.enableInProgress],\n            });\n        });\n        this.getCategories();\n    }    \n\n    public addCategory(): void {\n        this.issuesService.createCategory(this.categoryToAdd).subscribe(x => {\n            if(x) {\n                this.getCategories();\n                this.categoryToAdd.value = \"\";\n            }\n        });\n    }\n\n    public deleteCategory(id: number) {\n        this.issuesService.deleteCategory(id).subscribe(x => {\n            if(x) {\n                this.getCategories();\n            }\n        });\n    }\n    \n    public onSubmit(form: FormGroup) {\n        if (form.invalid) {\n            this.notificationService.error(\"Please check your entered values\");\n            return;\n        }\n\n        const settings = form.value;\n\n        this.settingsService.saveIssueSettings(settings).subscribe(x => {\n            if (x) {\n                this.notificationService.success(\"Successfully saved the Issue settings\");\n            } else {\n                this.notificationService.success(\"There was an error when saving the Issue settings\");\n            }\n        });\n    }\n\n    private getCategories() {\n        this.issuesService.getCategories().subscribe(x => {\n            this.categories = x;\n        });\n    }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./node_modules/angular2-template-loader!./node_modules/angular-router-loader/src!./ClientApp/app/settings/issues/issues.component.ts","module.exports = \"<settings-menu></settings-menu>\\n<wiki [url]=\\\"'https://github.com/tidusjar/Ombi/wiki/Issue-Settings'\\\"></wiki>\\n\\n<fieldset>\\n    <legend>Issues</legend>\\n    <form *ngIf=\\\"form\\\" novalidate [formGroup]=\\\"form\\\" (ngSubmit)=\\\"onSubmit(form)\\\" style=\\\"padding-top:5%;\\\">\\n        <div class=\\\"col-md-6\\\">\\n            <div class=\\\"form-group\\\">\\n                <div class=\\\"checkbox\\\">\\n                    <input type=\\\"checkbox\\\" id=\\\"enable\\\" formControlName=\\\"enabled\\\" ng-checked=\\\"form.enabled\\\">\\n                    <label for=\\\"enable\\\">Enable</label>\\n                </div>\\n            </div>\\n            <div class=\\\"form-group\\\">\\n                <div class=\\\"checkbox\\\">\\n                    <input type=\\\"checkbox\\\" id=\\\"enableInProgress\\\" formControlName=\\\"enableInProgress\\\" ng-checked=\\\"form.enableInProgress\\\">\\n                    <label for=\\\"enableInProgress\\\">Enable In Progress State</label>\\n                </div>\\n            </div>\\n\\n            <div class=\\\"form-group\\\">\\n                <div>\\n                    <button type=\\\"submit\\\" [disabled]=\\\"form.invalid\\\" class=\\\"btn btn-primary-outline \\\">Submit</button>\\n                </div>\\n            </div>\\n        </div>\\n\\n    </form>\\n\\n\\n\\n\\n\\n    <div class=\\\"col-md-6\\\">\\n        <div *ngIf=\\\"categories\\\">\\n            <div class=\\\"form-group row\\\">\\n                <div class=\\\"col-md-12\\\">\\n                    <label for=\\\"categoryToAdd\\\" class=\\\"control-label\\\">Add Category</label>\\n                </div>\\n                <div class=\\\"col-md-9\\\">\\n                    <input type=\\\"text\\\" [(ngModel)]=\\\"categoryToAdd.value\\\" class=\\\"form-control form-control-custom \\\" id=\\\"categoryToAdd\\\" name=\\\"categoryToAdd\\\"\\n                        value=\\\"{{categoryToAdd.value}}\\\">\\n                </div>\\n                <div class=\\\"col-md-3\\\">\\n                    <button class=\\\"btn btn-primary-outline\\\" (click)=\\\"addCategory()\\\">Add</button>\\n                </div>\\n            </div>\\n\\n            <div class=\\\"row\\\">\\n                <div *ngFor=\\\"let cat of categories\\\">\\n                    <div class=\\\"col-md-9\\\">\\n                        {{cat.value}}\\n                    </div>\\n                    <div class=\\\"col-md-3\\\">\\n                        <button class=\\\"btn btn-sm btn-danger-outline\\\" (click)=\\\"deleteCategory(cat.id)\\\">Delete</button>\\n                    </div>\\n                </div>\\n            </div>\\n        </div>\\n    </div>\\n</fieldset>\";\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./ClientApp/app/settings/issues/issues.component.html\n// module id = 210\n// module chunks = 0","import { Component, OnInit } from \"@angular/core\";\nimport { FormBuilder, FormGroup, Validators } from \"@angular/forms\";\nimport { NotificationService, SettingsService } from \"../../services\";\n\n@Component({\n    template: require('./jobs.component.html'),\n})\nexport class JobsComponent implements OnInit {\n\n    public form: FormGroup;\n    \n    public profilesRunning: boolean;\n    \n    constructor(private readonly settingsService: SettingsService,\n                private readonly fb: FormBuilder,\n                private readonly notificationService: NotificationService) { }\n    \n    public ngOnInit() {\n        this.settingsService.getJobSettings().subscribe(x => {\n            this.form = this.fb.group({\n                automaticUpdater:         [x.automaticUpdater, Validators.required],\n                couchPotatoSync:          [x.couchPotatoSync, Validators.required],\n                embyContentSync:          [x.embyContentSync, Validators.required],\n                plexContentSync:          [x.plexContentSync, Validators.required],\n                userImporter:             [x.userImporter, Validators.required],\n                sonarrSync:               [x.radarrSync, Validators.required],\n                radarrSync:               [x.sonarrSync, Validators.required],\n                sickRageSync:             [x.sickRageSync, Validators.required],  \n            });\n        });\n    }\n    \n    public onSubmit(form: FormGroup) {\n        if (form.invalid) {\n            this.notificationService.error(\"Please check your entered values\");\n            return;\n        }\n        const settings = form.value;\n        this.settingsService.saveJobSettings(settings).subscribe(x => {\n            if (x) {\n                this.notificationService.success(\"Successfully saved the job settings\");\n            } else {\n                this.notificationService.success(\"There was an error when saving the job settings\");\n            }\n        });\n    }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./node_modules/angular2-template-loader!./node_modules/angular-router-loader/src!./ClientApp/app/settings/jobs/jobs.component.ts","module.exports = \"<settings-menu>\\n</settings-menu>\\n\\n<wiki [url]=\\\"'https://github.com/tidusjar/Ombi/wiki/Job-Settings'\\\"></wiki>\\n<div *ngIf=\\\"form\\\">\\n    <fieldset>\\n        <legend>Job Settings</legend>\\n        <form novalidate [formGroup]=\\\"form\\\" (ngSubmit)=\\\"onSubmit(form)\\\" style=\\\"padding-top:5%;\\\">\\n            <div class=\\\"col-md-6\\\">\\n                <small>Changes to any of the below requires you to restart Ombi.</small>\\n                <div class=\\\"form-group\\\">\\n                    <label for=\\\"sonarrSync\\\" class=\\\"control-label\\\">Sonarr Sync</label>              \\n                        <input type=\\\"text\\\" class=\\\"form-control form-control-custom\\\" [ngClass]=\\\"{'form-error': form.get('sonarrSync').hasError('required')}\\\" id=\\\"sonarrSync\\\" name=\\\"sonarrSync\\\" formControlName=\\\"sonarrSync\\\">\\n                        <small *ngIf=\\\"form.get('sonarrSync').hasError('required')\\\" class=\\\"error-text\\\">The Sonarr Sync is required</small>\\n                </div>\\n                <div class=\\\"form-group\\\">\\n                    <label for=\\\"sickRageSync\\\" class=\\\"control-label\\\">SickRage Sync</label>              \\n                        <input type=\\\"text\\\" class=\\\"form-control form-control-custom\\\" [ngClass]=\\\"{'form-error': form.get('sonarrSync').hasError('required')}\\\" id=\\\"sickRageSync\\\" name=\\\"sickRageSync\\\" formControlName=\\\"sickRageSync\\\">\\n                        <small *ngIf=\\\"form.get('sickRageSync').hasError('required')\\\" class=\\\"error-text\\\">The SickRage Sync is required</small>\\n                </div>\\n\\n                <div class=\\\"form-group\\\">\\n                    <label for=\\\"radarrSync\\\" class=\\\"control-label\\\">Radarr Sync</label>              \\n                        <input type=\\\"text\\\" class=\\\"form-control form-control-custom\\\" [ngClass]=\\\"{'form-error': form.get('radarrSync').hasError('required')}\\\" id=\\\"radarrSync\\\" name=\\\"radarrSync\\\" formControlName=\\\"radarrSync\\\">\\n                        <small *ngIf=\\\"form.get('radarrSync').hasError('required')\\\" class=\\\"error-text\\\">The Radarr Sync is required</small>\\n                </div>\\n\\n                <div class=\\\"form-group\\\">\\n                    <label for=\\\"couchPotatoSync\\\" class=\\\"control-label\\\">CouchPotato Sync</label>              \\n                        <input type=\\\"text\\\" class=\\\"form-control form-control-custom\\\" [ngClass]=\\\"{'form-error': form.get('radarrSync').hasError('required')}\\\" id=\\\"couchPotatoSync\\\" name=\\\"couchPotatoSync\\\" formControlName=\\\"couchPotatoSync\\\">\\n                        <small *ngIf=\\\"form.get('couchPotatoSync').hasError('required')\\\" class=\\\"error-text\\\">The CouchPotato Sync is required</small>\\n                </div>\\n                \\n                <div class=\\\"form-group\\\">\\n                    <label for=\\\"automaticUpdater\\\" class=\\\"control-label\\\">Automatic Update</label>              \\n                        <input type=\\\"text\\\" class=\\\"form-control form-control-custom\\\" [ngClass]=\\\"{'form-error': form.get('automaticUpdater').hasError('required')}\\\" id=\\\"automaticUpdater\\\" name=\\\"automaticUpdater\\\" formControlName=\\\"automaticUpdater\\\">\\n                        <small *ngIf=\\\"form.get('automaticUpdater').hasError('required')\\\" class=\\\"error-text\\\">The Automatic Update is required</small>\\n                </div>\\n\\n\\n\\n                <div class=\\\"form-group\\\">\\n                    <div>\\n                        <button type=\\\"submit\\\" [disabled]=\\\"form.invalid\\\" class=\\\"btn btn-primary-outline\\\">Submit</button>\\n                    </div>\\n                </div>\\n            </div>\\n            <div class=\\\"col-md-6\\\">\\n                <div class=\\\"form-group\\\">\\n                    <label for=\\\"plexContentSync\\\" class=\\\"control-label\\\">Plex Sync</label>              \\n                        <input type=\\\"text\\\" class=\\\"form-control form-control-custom\\\" [ngClass]=\\\"{'form-error': form.get('plexContentSync').hasError('required')}\\\" id=\\\"plexContentSync\\\" name=\\\"plexContentSync\\\" formControlName=\\\"plexContentSync\\\">\\n                        <small *ngIf=\\\"form.get('plexContentSync').hasError('required')\\\" class=\\\"error-text\\\">The Plex Sync is required</small>\\n                </div>\\n\\n                <div class=\\\"form-group\\\">\\n                    <label for=\\\"embyContentSync\\\" class=\\\"control-label\\\">Emby Sync</label>              \\n                        <input type=\\\"text\\\" class=\\\"form-control form-control-custom\\\" [ngClass]=\\\"{'form-error': form.get('embyContentSync').hasError('required')}\\\" id=\\\"embyContentSync\\\" name=\\\"embyContentSync\\\" formControlName=\\\"embyContentSync\\\">\\n                        <small *ngIf=\\\"form.get('embyContentSync').hasError('required')\\\" class=\\\"error-text\\\">The Emby Sync is required</small>\\n                </div>\\n\\n                <div class=\\\"form-group\\\">\\n                    <label for=\\\"userImporter\\\" class=\\\"control-label\\\">User Importer</label>              \\n                        <input type=\\\"text\\\" class=\\\"form-control form-control-custom\\\" [ngClass]=\\\"{'form-error': form.get('userImporter').hasError('required')}\\\" id=\\\"userImporter\\\" name=\\\"userImporter\\\" formControlName=\\\"userImporter\\\">\\n                        <small *ngIf=\\\"form.get('userImporter').hasError('required')\\\" class=\\\"error-text\\\">The User Importer is required</small>\\n                </div>\\n\\n            </div>\\n        </form>\\n    </fieldset>\\n</div>\";\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./ClientApp/app/settings/jobs/jobs.component.html\n// module id = 212\n// module chunks = 0","import { Component, OnInit } from \"@angular/core\";\n\nimport { ILandingPageSettings } from \"../../interfaces\";\nimport { NotificationService } from \"../../services\";\nimport { SettingsService } from \"../../services\";\n\n@Component({\n    template: require('./landingpage.component.html'),\n})\nexport class LandingPageComponent implements OnInit {\n\n    public settings: ILandingPageSettings;\n\n    constructor(private settingsService: SettingsService, private notificationService: NotificationService) {  }\n\n    public ngOnInit() {\n        this.settingsService.getLandingPage().subscribe(x => {\n            this.settings = x;\n        });\n    }\n\n    public save() {\n        this.settingsService.saveLandingPage(this.settings).subscribe(x => {\n            if (x) {\n                this.notificationService.success(\"Successfully saved the Landing Page settings\");\n            } else {\n                this.notificationService.success(\"There was an error when saving the Landing Page settings\");\n            }\n        });\n    }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./node_modules/angular2-template-loader!./node_modules/angular-router-loader/src!./ClientApp/app/settings/landingpage/landingpage.component.ts","module.exports = \"\\n<settings-menu></settings-menu>\\n\\n<wiki [url]=\\\"'https://github.com/tidusjar/Ombi/wiki/Landing-Page-Settings'\\\"></wiki>\\n<div *ngIf=\\\"settings\\\">\\n    <fieldset>\\n        <legend>Landing Page Configuration</legend>\\n\\n\\n        <div class=\\\"form-group\\\">\\n            <div class=\\\"checkbox\\\">\\n                <input type=\\\"checkbox\\\" id=\\\"enable\\\" name=\\\"enable\\\" [(ngModel)]=\\\"settings.enabled\\\" ng-checked=\\\"settings.enabled\\\">\\n                <label for=\\\"enable\\\">Enable</label>\\n            </div>\\n        </div>\\n\\n        <p class=\\\"form-group\\\">Notice Message</p>\\n        <div class=\\\"form-group\\\">\\n            <div>\\n                <textarea rows=\\\"4\\\" type=\\\"text\\\" class=\\\"form-control-custom form-control \\\" id=\\\"NoticeMessage\\\" name=\\\"NoticeMessage\\\" placeholder=\\\"e.g. The server will be down for maintenance (HTML is allowed)\\\" [(ngModel)]=\\\"settings.noticeText\\\">{{settings.noticeText}}</textarea>\\n            </div>\\n        </div>\\n\\n        <p class=\\\"form-group\\\">Notice Preview:</p>\\n        <div class=\\\"form-group\\\">\\n            <div [innerHTML]=\\\"settings.noticeText\\\"></div>\\n        </div>\\n\\n\\n        <!--<div class=\\\"form-group\\\">\\n            <div class=\\\"checkbox\\\">\\n                <input type=\\\"checkbox\\\" id=\\\"enable\\\" name=\\\"enable\\\" [(ngModel)]=\\\"settings.timeLimit\\\" ng-checked=\\\"settings.timeLimit\\\">\\n                <label for=\\\"enable\\\">Only show the notification message between the below times</label>\\n            </div>\\n        </div>-->\\n\\n\\n\\n\\n        <!--<p class=\\\"form-group\\\">Start Time</p>\\n        <div class=\\\"form-group\\\">\\n            <p-calendar [(ngModel)]=\\\"settings.startDateTime\\\" [showTime]=\\\"true\\\"></p-calendar>\\n        </div>\\n        <p class=\\\"form-group\\\">End Time</p>\\n        <div class=\\\"form-group\\\">\\n            <p-calendar [(ngModel)]=\\\"settings.endDateTime\\\" [showTime]=\\\"true\\\"></p-calendar>\\n        </div>-->\\n\\n\\n\\n        <div class=\\\"form-group\\\">\\n            <div>\\n                <button (click)=\\\"save()\\\" type=\\\"submit\\\" id=\\\"save\\\" class=\\\"btn btn-primary-outline\\\">Submit</button>\\n            </div>\\n        </div>\\n    </fieldset>\\n</div>\\n\";\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./ClientApp/app/settings/landingpage/landingpage.component.html\n// module id = 214\n// module chunks = 0","import { Component, OnInit } from \"@angular/core\";\nimport { FormBuilder, FormGroup, Validators } from \"@angular/forms\";\n\nimport { IDiscordNotifcationSettings, INotificationTemplates, NotificationType } from \"../../interfaces\";\nimport { TesterService } from \"../../services\";\nimport { NotificationService } from \"../../services\";\nimport { SettingsService } from \"../../services\";\n\n@Component({\n    template: require('./discord.component.html'),\n})\nexport class DiscordComponent implements OnInit {\n\n    public NotificationType = NotificationType;\n    public templates: INotificationTemplates[];\n    public form: FormGroup;\n\n    constructor(private settingsService: SettingsService,\n                private notificationService: NotificationService,\n                private fb: FormBuilder,\n                private testerService: TesterService) { }\n\n    public ngOnInit() {\n        this.settingsService.getDiscordNotificationSettings().subscribe(x => {\n            this.templates = x.notificationTemplates;\n\n            this.form = this.fb.group({\n                enabled: [x.enabled],\n                username: [x.username],\n                webhookUrl: [x.webhookUrl, [Validators.required]],\n\n            });\n        });\n    }\n\n    public onSubmit(form: FormGroup) {\n        if (form.invalid) {\n            this.notificationService.error(\"Please check your entered values\");\n            return;\n        }\n\n        const settings = <IDiscordNotifcationSettings>form.value;\n        settings.notificationTemplates = this.templates;\n\n        this.settingsService.saveDiscordNotificationSettings(settings).subscribe(x => {\n            if (x) {\n                this.notificationService.success(\"Successfully saved the Discord settings\");\n            } else {\n                this.notificationService.success(\"There was an error when saving the Discord settings\");\n            }\n        });\n\n    }\n\n    public test(form: FormGroup) {\n        if (form.invalid) {\n            this.notificationService.error(\"Please check your entered values\");\n            return;\n        }\n\n        this.testerService.discordTest(form.value).subscribe(x => {\n            if (x) {\n                this.notificationService.success(\"Successfully sent a Discord message, please check the discord channel\");\n            } else {\n                this.notificationService.error(\"There was an error when sending the Discord message. Please check your settings\");\n            }\n        });\n\n    }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./node_modules/angular2-template-loader!./node_modules/angular-router-loader/src!./ClientApp/app/settings/notifications/discord.component.ts","module.exports = \"\\n<settings-menu></settings-menu>\\n<div *ngIf=\\\"form\\\">\\n    <fieldset>\\n        <legend>Discord Notifications</legend>\\n        <div class=\\\"col-md-6\\\">\\n            <form novalidate [formGroup]=\\\"form\\\" (ngSubmit)=\\\"onSubmit(form)\\\">\\n\\n                <div class=\\\"form-group\\\">\\n                    <div class=\\\"checkbox\\\">\\n                        <input type=\\\"checkbox\\\" id=\\\"enable\\\" formControlName=\\\"enabled\\\">\\n                        <label for=\\\"enable\\\">Enabled</label>\\n                    </div>\\n                </div>\\n\\n\\n                <div class=\\\"form-group\\\">\\n                    <label for=\\\"webhookUrl\\\" class=\\\"control-label\\\">Webhook Url</label>\\n                        <input type=\\\"text\\\" class=\\\"form-control form-control-custom \\\" id=\\\"webhookUrl\\\" name=\\\"webhookUrl\\\" formControlName=\\\"webhookUrl\\\"  [ngClass]=\\\"{'form-error': form.get('webhookUrl').hasError('required')}\\\">\\n                        <small *ngIf=\\\"form.get('webhookUrl').hasError('required')\\\" class=\\\"error-text\\\">The Webhook Url is required</small>\\n                </div>\\n\\n                <div class=\\\"form-group\\\">\\n                    <label for=\\\"username\\\" class=\\\"control-label\\\">Username</label>\\n                    <div>\\n                        <input type=\\\"text\\\" class=\\\"form-control form-control-custom \\\" id=\\\"username\\\" name=\\\"username\\\" formControlName=\\\"username\\\" pTooltip=\\\"Optional, this will override the username you used for the Webhook\\\">\\n                    </div>\\n                </div>\\n\\n               \\n\\n                <div class=\\\"form-group\\\">\\n                    <div>\\n                        <button [disabled]=\\\"form.invalid\\\" type=\\\"button\\\" (click)=\\\"test(form)\\\" class=\\\"btn btn-primary-outline\\\">\\n                            Test\\n                            <div id=\\\"spinner\\\"></div>\\n                        </button>\\n                    </div>\\n                </div>\\n\\n\\n\\n                <div class=\\\"form-group\\\">\\n                    <div>\\n                        <button [disabled]=\\\"form.invalid\\\" type=\\\"submit\\\" id=\\\"save\\\" class=\\\"btn btn-primary-outline\\\">Submit</button>\\n                    </div>\\n                </div>\\n            </form>\\n        </div>\\n\\n\\n        <div class=\\\"col-md-6\\\">\\n            <notification-templates [templates]=\\\"templates\\\" [showSubject]=\\\"false\\\"></notification-templates>\\n        </div>\\n    </fieldset>\\n</div>\";\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./ClientApp/app/settings/notifications/discord.component.html\n// module id = 216\n// module chunks = 0","import { Component, OnInit } from \"@angular/core\";\nimport { FormBuilder, FormGroup, Validators } from \"@angular/forms\";\n\nimport { IEmailNotificationSettings, INotificationTemplates, NotificationType } from \"../../interfaces\";\nimport { TesterService } from \"../../services\";\nimport { ValidationService } from \"../../services\";\nimport { NotificationService } from \"../../services\";\nimport { SettingsService } from \"../../services\";\n\n@Component({\n    template: require('./emailnotification.component.html'),\n})\nexport class EmailNotificationComponent implements OnInit {\n    public NotificationType = NotificationType;\n    public templates: INotificationTemplates[];\n    public emailForm: FormGroup;\n\n    constructor(private settingsService: SettingsService,\n                private notificationService: NotificationService,\n                private fb: FormBuilder,\n                private validationService: ValidationService,\n                private testerService: TesterService) { }\n\n    public ngOnInit() {\n        this.settingsService.getEmailNotificationSettings().subscribe(x => {\n            this.templates = x.notificationTemplates;\n\n            this.emailForm = this.fb.group({\n                enabled: [x.enabled],\n                authentication: [x.authentication],\n                host: [x.host, [Validators.required]],\n                password: [x.password],\n                port: [x.port, [Validators.required]],\n                senderAddress: [x.senderAddress, [Validators.required, Validators.email]],\n                senderName: [x.senderName],\n                username: [x.username],\n                adminEmail: [x.adminEmail, [Validators.required, Validators.email]],\n                disableTLS: [x.disableTLS],\n                disableCertificateChecking: [x.disableCertificateChecking],\n            });\n\n            if (x.authentication) {\n                this.validationService.enableValidation(this.emailForm, \"username\");\n                this.validationService.enableValidation(this.emailForm, \"password\");\n            }\n\n            this.subscribeToAuthChanges();\n        });\n    }\n\n    public onSubmit(form: FormGroup) {\n        if (form.invalid) {\n            this.notificationService.error(\"Please check your entered values\");\n            return;\n        }\n\n        const settings = <IEmailNotificationSettings>form.value;\n        settings.notificationTemplates = this.templates;\n\n        this.settingsService.saveEmailNotificationSettings(settings).subscribe(x => {\n            if (x) {\n                this.notificationService.success(\"Successfully saved Email settings\");\n            } else {\n                this.notificationService.success(\"There was an error when saving the Email settings\");\n            }\n        });\n\n    }\n\n    public test(form: FormGroup) {\n        if (form.invalid) {\n            this.notificationService.error(\"Please check your entered values\");\n            return;\n        }\n\n        this.testerService.emailTest(form.value).subscribe(x => {\n              if (x === true) {\n                this.notificationService.success(\"Successfully sent an email message, please check your inbox\");\n            } else {\n                this.notificationService.error(\"There was an error when sending the Email message, please check your settings.\");\n            }\n        });\n    }\n\n    private subscribeToAuthChanges() {\n        const authCtrl = this.emailForm.controls.authentication;\n        const changes$ = authCtrl.valueChanges;\n\n        changes$.subscribe((auth: boolean) => {\n\n            if (auth) {\n                this.validationService.enableValidation(this.emailForm, \"username\");\n                this.validationService.enableValidation(this.emailForm, \"password\");\n            } else {\n                this.validationService.disableValidation(this.emailForm, \"username\");\n                this.validationService.disableValidation(this.emailForm, \"password\");\n            }\n        });\n    }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./node_modules/angular2-template-loader!./node_modules/angular-router-loader/src!./ClientApp/app/settings/notifications/emailnotification.component.ts","module.exports = \"\\n<settings-menu></settings-menu>\\n<div *ngIf=\\\"emailForm\\\">\\n    <fieldset>\\n        <legend>Email Notifications</legend>\\n        <div class=\\\"col-md-6\\\">\\n            <form novalidate [formGroup]=\\\"emailForm\\\" (ngSubmit)=\\\"onSubmit(emailForm)\\\">\\n\\n                <div class=\\\"form-group\\\">\\n                    <div class=\\\"checkbox\\\">\\n                        <input type=\\\"checkbox\\\" id=\\\"enable\\\" formControlName=\\\"enabled\\\">\\n                        <label for=\\\"enable\\\">Enabled</label>\\n                    </div>\\n                </div>\\n\\n                <div class=\\\"form-group\\\">\\n                    <div class=\\\"checkbox\\\">\\n                        <input type=\\\"checkbox\\\" id=\\\"Authentication\\\" formControlName=\\\"authentication\\\"><label for=\\\"Authentication\\\">Enable SMTP Authentication</label>\\n                    </div>\\n                </div>\\n\\n                <div class=\\\"form-group\\\">\\n                    <div class=\\\"checkbox\\\">\\n                            <input type=\\\"checkbox\\\" id=\\\"disableTLS\\\" formControlName=\\\"disableTLS\\\"><label for=\\\"disableTLS\\\">Disable TLS/SSL</label>\\n                    </div>\\n                </div>\\n\\n                <div class=\\\"form-group\\\">\\n                    <div class=\\\"checkbox\\\">\\n                        <input type=\\\"checkbox\\\" id=\\\"disableCertificateChecking\\\" formControlName=\\\"disableCertificateChecking\\\"><label for=\\\"disableCertificateChecking\\\">Disable Certificate Checking</label>\\n                    </div>\\n                </div>\\n                <div class=\\\"form-group\\\">\\n                    <label for=\\\"host\\\" class=\\\"control-label\\\">SMTP Host</label>\\n                  \\n                        <input type=\\\"text\\\" class=\\\"form-control form-control-custom \\\" id=\\\"host\\\" name=\\\"host\\\" placeholder=\\\"localhost\\\" formControlName=\\\"host\\\"  [ngClass]=\\\"{'form-error': emailForm.get('host').hasError('required')}\\\">\\n                        <small *ngIf=\\\"emailForm.get('host').hasError('required')\\\" class=\\\"error-text\\\">The Host is required</small>\\n                </div>\\n\\n                <div class=\\\"form-group\\\">\\n                    <label for=\\\"portNumber\\\" class=\\\"control-label\\\">SMTP Port</label>\\n                    <div>\\n                        <input type=\\\"text\\\" class=\\\"form-control form-control-custom \\\" [ngClass]=\\\"{'form-error': emailForm.get('port').hasError('required')}\\\" id=\\\"portNumber\\\" name=\\\"Port\\\" placeholder=\\\"Port Number\\\" formControlName=\\\"port\\\">\\n                        <small *ngIf=\\\"emailForm.get('port').hasError('required')\\\" class=\\\"error-text\\\">The Port is required</small>\\n                    </div>\\n                </div>\\n\\n                <div class=\\\"form-group\\\">\\n                    <label style=\\\"padding-left: 0\\\"  for=\\\"senderAddress\\\" class=\\\"control-label col-md-12\\\">Email Sender</label>\\n                    <div style=\\\"padding-left: 0\\\" class=\\\"col-md-6\\\">\\n                        <input type=\\\"text\\\" class=\\\"form-control form-control-custom \\\" id=\\\"senderAddress\\\" [ngClass]=\\\"{'form-error': emailForm.get('senderAddress').hasError('required'), 'form-error': emailForm.get('senderAddress').hasError('incorrectMailFormat')}\\\" name=\\\"senderAddress\\\" formControlName=\\\"senderAddress\\\" tooltipPosition=\\\"top\\\" placeholder=\\\"Sender Address\\\" pTooltip=\\\"The email address that the emails will be sent from\\\">\\n                        <small *ngIf=\\\"emailForm.get('senderAddress').hasError('required')\\\" class=\\\"error-text\\\">The Email Sender Address is required</small>\\n                        <small *ngIf=\\\"emailForm.get('senderAddress').hasError('email') && !emailForm.get('senderAddress').hasError('required')\\\" class=\\\"error-text\\\">The Email Sender Address needs to be a valid email address</small>\\n                    </div>\\n                    <div style=\\\"padding-left: 0\\\" class=\\\"col-md-6\\\">\\n                        <input type=\\\"text\\\" class=\\\"form-control form-control-custom \\\" id=\\\"senderName\\\" name=\\\"senderName\\\" formControlName=\\\"senderName\\\" tooltipPosition=\\\"top\\\" placeholder=\\\"Sender Name\\\" pTooltip=\\\"The 'Friendly' name that will appear in the 'FROM:' part of the email\\\">\\n                    </div>\\n                    <br/>\\n                    <br/>\\n                    <br/>\\n                </div>\\n\\n                <div class=\\\"form-group\\\">\\n                    <label for=\\\"adminEmail\\\" class=\\\"control-label\\\">Admin Email</label>\\n                        <input type=\\\"text\\\" class=\\\"form-control form-control-custom\\\" [ngClass]=\\\"{'form-error': emailForm.get('adminEmail').hasError('required'), 'form-error': emailForm.get('adminEmail').hasError('email')}\\\"  id=\\\"adminEmail\\\" name=\\\"adminEmail\\\" formControlName=\\\"adminEmail\\\" tooltipPosition=\\\"top\\\" pTooltip=\\\"The administrator email will be used to send emails for admin only notifications (e.g. New Requests that require approvals)\\\">\\n                        <small *ngIf=\\\"emailForm.get('adminEmail').hasError('required')\\\" class=\\\"error-text\\\">The Admin Email Address is required</small>\\n                        <small *ngIf=\\\"emailForm.get('adminEmail').hasError('email')  && !emailForm.get('adminEmail').hasError('required')\\\" class=\\\"error-text\\\">The Admin Email needs to be a valid email address</small>\\n\\n                </div>\\n\\n\\n                <div class=\\\"form-group\\\" *ngIf=\\\"emailForm.controls['username'].validator\\\">\\n                    <label for=\\\"username\\\" class=\\\"control-label\\\">Username</label>\\n                    \\n                        <input type=\\\"text\\\" class=\\\"form-control form-control-custom\\\" [ngClass]=\\\"{'form-error': emailForm.get('username').hasError('required')}\\\" id=\\\"username\\\" name=\\\"username\\\" formControlName=\\\"username\\\" pTooltip=\\\"The username if authentication is enabled\\\" tooltipPosition=\\\"top\\\">\\n                        <small *ngIf=\\\"emailForm.get('username').hasError('required')\\\" class=\\\"error-text\\\">The Username is required</small>\\n                        \\n                </div>\\n\\n                <div class=\\\"form-group\\\" *ngIf=\\\"emailForm.get('password').validator\\\">\\n                    <label for=\\\"password\\\" class=\\\"control-label\\\">Password</label>\\n                    \\n                        <input type=\\\"password\\\" class=\\\"form-control form-control-custom\\\"  [ngClass]=\\\"{'form-error': emailForm.get('password').hasError('required')}\\\" id=\\\"password\\\" name=\\\"password\\\" formControlName=\\\"password\\\" pTooltip=\\\"The password if authentication is enabled\\\" tooltipPosition=\\\"top\\\">\\n                        <small *ngIf=\\\"emailForm.get('password').hasError('required')\\\" class=\\\"error-text\\\">The Password is required</small>\\n                </div>\\n\\n                <div class=\\\"form-group\\\">\\n                    <div>\\n                        <button [disabled]=\\\"emailForm.invalid\\\" type=\\\"submit\\\" id=\\\"save\\\" class=\\\"btn btn-primary-outline\\\">Submit</button>\\n                        <button [disabled]=\\\"emailForm.invalid\\\" type=\\\"submit\\\" (click)=\\\"test(emailForm)\\\" class=\\\"btn btn-primary-outline\\\">\\n                            Test\\n                            <div id=\\\"spinner\\\"></div>\\n                        </button>\\n\\n                    </div>\\n                </div>\\n            </form>\\n        </div>\\n\\n\\n        <div class=\\\"col-md-6\\\">\\n            <notification-templates [templates]=\\\"templates\\\"></notification-templates>\\n        </div>\\n    </fieldset>\\n</div>\";\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./ClientApp/app/settings/notifications/emailnotification.component.html\n// module id = 218\n// module chunks = 0","import { Component, OnInit } from \"@angular/core\";\nimport { FormBuilder, FormGroup, Validators } from \"@angular/forms\";\n\nimport { IMattermostNotifcationSettings, INotificationTemplates, NotificationType } from \"../../interfaces\";\nimport { TesterService } from \"../../services\";\nimport { NotificationService } from \"../../services\";\nimport { SettingsService } from \"../../services\";\n\n@Component({\n    template: require('./mattermost.component.html'),\n})\nexport class MattermostComponent implements OnInit {\n\n    public NotificationType = NotificationType;\n    public templates: INotificationTemplates[];\n    public form: FormGroup;\n\n    constructor(private settingsService: SettingsService,\n                private notificationService: NotificationService,\n                private fb: FormBuilder,\n                private testerService: TesterService) { }\n\n    public ngOnInit() {\n        this.settingsService.getMattermostNotificationSettings().subscribe(x => {\n            this.templates = x.notificationTemplates;\n\n            this.form = this.fb.group({\n                enabled: [x.enabled],\n                username: [x.username],\n                webhookUrl: [x.webhookUrl, [Validators.required]],\n                channel: [x.channel],\n                iconUrl:[x.iconUrl],\n\n            });\n        });\n    }\n\n    public onSubmit(form: FormGroup) {\n        if (form.invalid) {\n            this.notificationService.error(\"Please check your entered values\");\n            return;\n        }\n\n        const settings = <IMattermostNotifcationSettings>form.value;\n        settings.notificationTemplates = this.templates;\n\n        this.settingsService.saveMattermostNotificationSettings(settings).subscribe(x => {\n            if (x) {\n                this.notificationService.success(\"Successfully saved the Mattermost settings\");\n            } else {\n                this.notificationService.success(\"There was an error when saving the Mattermost settings\");\n            }\n        });\n\n    }\n\n    public test(form: FormGroup) {\n        if (form.invalid) {\n            this.notificationService.error(\"Please check your entered values\");\n            return;\n        }\n\n        this.testerService.mattermostTest(form.value).subscribe(x => {\n            if (x) {\n                this.notificationService.success( \"Successfully sent a Mattermost message, please check the discord channel\");\n            } else {\n                this.notificationService.error(\"There was an error when sending the Mattermost message. Please check your settings\");\n            }\n        });\n\n    }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./node_modules/angular2-template-loader!./node_modules/angular-router-loader/src!./ClientApp/app/settings/notifications/mattermost.component.ts","module.exports = \"\\n<settings-menu></settings-menu>\\n<div *ngIf=\\\"form\\\">\\n    <fieldset>\\n        <legend>Mattermost Notifications</legend>\\n        <div class=\\\"col-md-6\\\">\\n            <form novalidate [formGroup]=\\\"form\\\" (ngSubmit)=\\\"onSubmit(form)\\\">\\n\\n                <div class=\\\"form-group\\\">\\n                    <div class=\\\"checkbox\\\">\\n                        <input type=\\\"checkbox\\\" id=\\\"enable\\\" formControlName=\\\"enabled\\\">\\n                        <label for=\\\"enable\\\">Enabled</label>\\n                    </div>\\n                </div>\\n\\n                <div class=\\\"form-group\\\">\\n                    <small class=\\\"control-label\\\"> Mattermost > Integrations > Incoming Webhook > Add Incoming Webhook. You will then have a Webhook</small>\\n                    <label for=\\\"webhookUrl\\\" class=\\\"control-label\\\">Incoming Webhook Url</label>\\n                    \\n                        <input type=\\\"text\\\" class=\\\"form-control form-control-custom \\\" id=\\\"webhookUrl\\\" name=\\\"webhookUrl\\\" formControlName=\\\"webhookUrl\\\" [ngClass]=\\\"{'form-error': form.get('webhookUrl').hasError('required')}\\\">\\n                        <small *ngIf=\\\"form.get('webhookUrl').hasError('required')\\\" class=\\\"error-text\\\">The Webhook Url is required</small>\\n                </div>\\n\\n\\n                <div class=\\\"form-group\\\">\\n                    <label for=\\\"channel\\\" class=\\\"control-label\\\">Channel Override</label>\\n                    <div>\\n                        <input type=\\\"text\\\" class=\\\"form-control form-control-custom \\\" id=\\\"channel\\\" name=\\\"channel\\\" formControlName=\\\"channel\\\" pTooltip=\\\"Optional, you can override the default channel\\\">\\n                    </div>\\n                </div>\\n\\n                <div class=\\\"form-group\\\">\\n                    <label for=\\\"username\\\" class=\\\"control-label\\\">Username Override</label>\\n                    <div>\\n                        <input type=\\\"text\\\" class=\\\"form-control form-control-custom \\\" id=\\\"username\\\" name=\\\"username\\\" formControlName=\\\"username\\\" pTooltip=\\\"Optional, this will override the username you used for the Webhook\\\">\\n                    </div>\\n                </div>\\n\\n                <div class=\\\"form-group\\\">\\n                    <label for=\\\"iconUrl\\\" class=\\\"control-label\\\">Icon Override</label>\\n                    <div>\\n                        <input type=\\\"text\\\" class=\\\"form-control form-control-custom \\\" id=\\\"iconUrl\\\" name=\\\"iconUrl\\\" formControlName=\\\"iconUrl\\\" pTooltip=\\\"Optional, this will override the icon you use for the Webhook\\\">\\n                    </div>\\n                </div>\\n\\n\\n\\n                <div class=\\\"form-group\\\">\\n                    <div>\\n                        <button [disabled]=\\\"form.invalid\\\" type=\\\"button\\\" (click)=\\\"test(form)\\\" class=\\\"btn btn-primary-outline\\\">\\n                            Test\\n                            <div id=\\\"spinner\\\"></div>\\n                        </button>\\n                    </div>\\n                </div>\\n\\n\\n\\n                <div class=\\\"form-group\\\">\\n                    <div>\\n                        <button [disabled]=\\\"form.invalid\\\" type=\\\"submit\\\" id=\\\"save\\\" class=\\\"btn btn-primary-outline\\\">Submit</button>\\n                    </div>\\n                </div>\\n            </form>\\n        </div>\\n\\n\\n        <div class=\\\"col-md-6\\\">\\n            <notification-templates [templates]=\\\"templates\\\" [showSubject]=\\\"false\\\"></notification-templates>\\n        </div>\\n    </fieldset>\\n</div>\";\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./ClientApp/app/settings/notifications/mattermost.component.html\n// module id = 220\n// module chunks = 0","import { Component, OnInit } from \"@angular/core\";\nimport { FormBuilder, FormGroup } from \"@angular/forms\";\n\nimport { IMobileNotifcationSettings, IMobileUsersViewModel, INotificationTemplates, NotificationType } from \"../../interfaces\";\nimport { TesterService } from \"../../services\";\nimport { NotificationService } from \"../../services\";\nimport { MobileService, SettingsService } from \"../../services\";\n\n@Component({\n    template: require('./mobile.component.html'),\n})\nexport class MobileComponent implements OnInit {\n\n    public NotificationType = NotificationType;\n    public templates: INotificationTemplates[];\n    public form: FormGroup;\n    public userList: IMobileUsersViewModel[];\n\n    constructor(private settingsService: SettingsService,\n                private notificationService: NotificationService,\n                private fb: FormBuilder,\n                private testerService: TesterService,\n                private mobileService: MobileService) { }\n\n    public ngOnInit() {\n        this.settingsService.getMobileNotificationSettings().subscribe(x => {\n            this.templates = x.notificationTemplates;\n\n            this.form = this.fb.group({\n            });\n        });\n\n        this.mobileService.getUserDeviceList().subscribe(x => this.userList = x);\n    }\n\n    public onSubmit(form: FormGroup) {\n        if (form.invalid) {\n            this.notificationService.error(\"Please check your entered values\");\n            return;\n        }\n\n        const settings = <IMobileNotifcationSettings>form.value;\n        settings.notificationTemplates = this.templates;\n\n        this.settingsService.saveMobileNotificationSettings(settings).subscribe(x => {\n            if (x) {\n                this.notificationService.success(\"Successfully saved the Mobile settings\");\n            } else {\n                this.notificationService.success(\"There was an error when saving the Mobile settings\");\n            }\n        });\n\n    }\n\n    public test(form: FormGroup) {\n        if (form.invalid) {\n            this.notificationService.error(\"Please check your entered values\");\n            return;\n        }\n\n        this.testerService.discordTest(form.value).subscribe(x => {\n            if (x) {\n                this.notificationService.success(\"Successfully sent a Mobile message, please check the admin mobile device\");\n            } else {\n                this.notificationService.error(\"There was an error when sending the Mobile message. Please check your settings\");\n            }\n        });\n\n    }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./node_modules/angular2-template-loader!./node_modules/angular-router-loader/src!./ClientApp/app/settings/notifications/mobile.component.ts","module.exports = \"<settings-menu>\\n</settings-menu>\\n<div *ngIf=\\\"form\\\">\\n    <fieldset>\\n        <legend>Mobile Notifications</legend>\\n        <div class=\\\"col-md-6\\\">\\n            <form novalidate [formGroup]=\\\"form\\\" (ngSubmit)=\\\"onSubmit(form)\\\">\\n                <div class=\\\"row\\\">\\n                    <div *ngIf=\\\"userList\\\" class=\\\"col-md-8\\\">\\n                        <table class=\\\"table table-striped table-hover table-responsive table-condensed\\\">\\n                            <thead>\\n                                <tr>\\n                                    <th>\\n                                        <a>Username/Alias</a>\\n                                    </th>\\n                                    <th>\\n                                        <a>Mobile Devices Registered</a>\\n                                    </th>\\n\\n                                </tr>\\n                            </thead>\\n                            <tbody>\\n                                <tr *ngFor=\\\"let user of userList\\\">\\n                                    <td>\\n                                        {{user.username}}\\n                                    </td>\\n                                    <td>\\n                                        {{user.devices}}\\n                                    </td>\\n\\n                            </tbody>\\n                        </table>\\n                    </div>\\n                </div>\\n\\n                <div class=\\\"row\\\">\\n                    <div class=\\\"form-group\\\">\\n                        <div>\\n                            <button [disabled]=\\\"form.invalid\\\" type=\\\"button\\\" (click)=\\\"test(form)\\\" class=\\\"btn btn-primary-outline\\\">\\n                                Test\\n                                <div id=\\\"spinner\\\"></div>\\n                            </button>\\n                        </div>\\n                    </div>\\n\\n\\n\\n                    <div class=\\\"form-group\\\">\\n                        <div>\\n                            <button [disabled]=\\\"form.invalid\\\" type=\\\"submit\\\" id=\\\"save\\\" class=\\\"btn btn-primary-outline\\\">Submit</button>\\n                        </div>\\n                    </div>\\n                </div>\\n            </form>\\n        </div>\\n\\n\\n        <div class=\\\"col-md-6\\\">\\n            <notification-templates [templates]=\\\"templates\\\" [showSubject]=\\\"false\\\"></notification-templates>\\n        </div>\\n    </fieldset>\\n</div>\";\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./ClientApp/app/settings/notifications/mobile.component.html\n// module id = 222\n// module chunks = 0","import { Component, Input } from \"@angular/core\";\n\nimport { INotificationTemplates, NotificationType } from \"../../interfaces\";\n\n@Component({\n    selector:\"notification-templates\",\n    template: require('./notificationtemplate.component.html'),\n})\nexport class NotificationTemplate {\n    @Input() public templates: INotificationTemplates[];\n    @Input() public showSubject = true; // True by default\n    public NotificationType = NotificationType;\n}\n\n\n\n// WEBPACK FOOTER //\n// ./node_modules/angular2-template-loader!./node_modules/angular-router-loader/src!./ClientApp/app/settings/notifications/notificationtemplate.component.ts","module.exports = \"\\n<wiki [url]=\\\"'https://github.com/tidusjar/Ombi/wiki/Notification-Template-Variables'\\\" [text]=\\\"'Notification Variables'\\\"></wiki>\\n<br><br>\\n\\n\\n<ngb-accordion [closeOthers]=\\\"true\\\" activeIds=\\\"0-header\\\">\\n    <ngb-panel *ngFor=\\\"let template of templates\\\" id=\\\"{{template.notificationType}}\\\" title=\\\"{{NotificationType[template.notificationType] | humanize}}\\\">\\n        <ng-template ngbPanelContent>\\n            <div class=\\\"panel panel-default\\\">\\n                <div class=\\\"panel-body\\\">\\n                    \\n                    <div class=\\\"form-group\\\">\\n                        <div class=\\\"checkbox\\\">\\n                            <input type=\\\"checkbox\\\" id=\\\"enabled\\\" [(ngModel)]=\\\"template.enabled\\\" ng-checked=\\\"template.enabled\\\"><label for=\\\"enabled\\\">Enable</label>\\n                        </div>\\n                    </div>\\n                    \\n                    <div class=\\\"form-group\\\" *ngIf=\\\"showSubject\\\">\\n                        <label class=\\\"control-label\\\">Subject</label>\\n                        <div>\\n                            <input type=\\\"text\\\" class=\\\"form-control form-control-custom\\\" [(ngModel)]=\\\"template.subject\\\" value=\\\"{{template.subject}}\\\">\\n                        </div>\\n                    </div>\\n\\n                    <div class=\\\"form-group\\\">\\n                        <label class=\\\"control-label\\\">Message</label>\\n                        <div>\\n                            <textarea type=\\\"text\\\" class=\\\"form-control form-control-custom\\\" [(ngModel)]=\\\"template.message\\\" value=\\\"{{template.message}}\\\"></textarea>\\n                        </div>\\n                    </div>\\n                </div>\\n            </div>\\n\\n        </ng-template>\\n    </ngb-panel>\\n</ngb-accordion>\\n\";\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./ClientApp/app/settings/notifications/notificationtemplate.component.html\n// module id = 224\n// module chunks = 0","import { Component, OnInit } from \"@angular/core\";\nimport { FormBuilder, FormGroup, Validators } from \"@angular/forms\";\n\nimport { INotificationTemplates, IPushbulletNotificationSettings, NotificationType } from \"../../interfaces\";\nimport { TesterService } from \"../../services\";\nimport { NotificationService } from \"../../services\";\nimport { SettingsService } from \"../../services\";\n\n@Component({\n    template: require('./pushbullet.component.html'),\n})\nexport class PushbulletComponent implements OnInit {\n    public NotificationType = NotificationType;\n    public templates: INotificationTemplates[];\n    public form: FormGroup;\n\n    constructor(private settingsService: SettingsService,\n                private notificationService: NotificationService,\n                private fb: FormBuilder,\n                private testerService: TesterService) { }\n\n    public ngOnInit() {\n        this.settingsService.getPushbulletNotificationSettings().subscribe(x => {\n            this.templates = x.notificationTemplates;\n\n            this.form = this.fb.group({\n                enabled: [x.enabled],\n                channelTag: [x.channelTag],\n                accessToken: [x.accessToken, [Validators.required]],\n            });\n        });\n    }\n\n    public onSubmit(form: FormGroup) {\n        if (form.invalid) {\n            this.notificationService.error(\"Please check your entered values\");\n            return;\n        }\n\n        const settings = <IPushbulletNotificationSettings>form.value;\n        settings.notificationTemplates = this.templates;\n\n        this.settingsService.savePushbulletNotificationSettings(settings).subscribe(x => {\n            if (x) {\n                this.notificationService.success(\"Successfully saved the Pushbullet settings\");\n            } else {\n                this.notificationService.success(\"There was an error when saving the Pushbullet settings\");\n            }\n        });\n\n    }\n\n    public test(form: FormGroup) {\n        if (form.invalid) {\n            this.notificationService.error(\"Please check your entered values\");\n            return;\n        }\n\n        this.testerService.pushbulletTest(form.value).subscribe(x => {\n            if (x) {\n                this.notificationService.success(\"Successfully sent a Pushbullet message\");\n            } else {\n                this.notificationService.error(\"There was an error when sending the Pushbullet message. Please check your settings\");\n            }\n        });\n\n    }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./node_modules/angular2-template-loader!./node_modules/angular-router-loader/src!./ClientApp/app/settings/notifications/pushbullet.component.ts","module.exports = \"\\n<settings-menu></settings-menu>\\n<div *ngIf=\\\"form\\\">\\n    <fieldset>\\n        <legend>Pushbullet Notifications</legend>\\n        <div class=\\\"col-md-6\\\">\\n            <form novalidate [formGroup]=\\\"form\\\" (ngSubmit)=\\\"onSubmit(form)\\\">\\n\\n                <div class=\\\"form-group\\\">\\n                    <div class=\\\"checkbox\\\">\\n                        <input type=\\\"checkbox\\\" id=\\\"enable\\\" formControlName=\\\"enabled\\\">\\n                        <label for=\\\"enable\\\">Enabled</label>\\n                    </div>\\n                </div>\\n\\n                <small>You can find this here: <a href=\\\"https://www.pushbullet.com/#settings/account\\\" target=\\\"_blank\\\">https://www.pushbullet.com/#settings/account </a></small>\\n                <div class=\\\"form-group\\\">\\n                    <label for=\\\"accessToken\\\" class=\\\"control-label\\\">Access Token</label>\\n              \\n                        <input type=\\\"text\\\" class=\\\"form-control form-control-custom \\\" id=\\\"accessToken\\\" name=\\\"accessToken\\\" formControlName=\\\"accessToken\\\" [ngClass]=\\\"{'form-error': form.get('accessToken').hasError('required')}\\\">\\n                        <small *ngIf=\\\"form.get('accessToken').hasError('required')\\\" class=\\\"error-text\\\">The Access Token is required</small>\\n                </div>\\n\\n                <div class=\\\"form-group\\\">\\n                    <label for=\\\"channelTag\\\" class=\\\"control-label\\\">Channel Tag</label>\\n                    <div>\\n                        <input type=\\\"text\\\" class=\\\"form-control form-control-custom \\\" id=\\\"channelTag\\\" name=\\\"channelTag\\\" formControlName=\\\"channelTag\\\" pTooltip=\\\"Optional, this is if you want to send a message to everyone subscribed to a channel\\\">\\n                    </div>\\n                </div>\\n\\n               \\n\\n                <div class=\\\"form-group\\\">\\n                    <div>\\n                        <button [disabled]=\\\"form.invalid\\\" type=\\\"button\\\" (click)=\\\"test(form)\\\" class=\\\"btn btn-primary-outline\\\">\\n                            Test\\n                            <div id=\\\"spinner\\\"></div>\\n                        </button>\\n                    </div>\\n                </div>\\n\\n\\n\\n                <div class=\\\"form-group\\\">\\n                    <div>\\n                        <button [disabled]=\\\"form.invalid\\\" type=\\\"submit\\\" id=\\\"save\\\" class=\\\"btn btn-primary-outline\\\">Submit</button>\\n                    </div>\\n                </div>\\n            </form>\\n        </div>\\n\\n\\n        <div class=\\\"col-md-6\\\">\\n            <notification-templates [templates]=\\\"templates\\\" [showSubject]=\\\"false\\\"></notification-templates>\\n        </div>\\n    </fieldset>\\n</div>\";\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./ClientApp/app/settings/notifications/pushbullet.component.html\n// module id = 226\n// module chunks = 0","import { Component, OnInit } from \"@angular/core\";\nimport { FormBuilder, FormGroup, Validators } from \"@angular/forms\";\n\nimport { INotificationTemplates, IPushoverNotificationSettings, NotificationType } from \"../../interfaces\";\nimport { TesterService } from \"../../services\";\nimport { NotificationService } from \"../../services\";\nimport { SettingsService } from \"../../services\";\n\n@Component({\n    template: require('./pushover.component.html'),\n})\nexport class PushoverComponent implements OnInit {\n    public NotificationType = NotificationType;\n    public templates: INotificationTemplates[];\n    public form: FormGroup;\n\n    constructor(private settingsService: SettingsService,\n                private notificationService: NotificationService,\n                private fb: FormBuilder,\n                private testerService: TesterService) { }\n\n    public ngOnInit() {\n        this.settingsService.getPushoverNotificationSettings().subscribe(x => {\n            this.templates = x.notificationTemplates;\n\n            this.form = this.fb.group({\n                enabled: [x.enabled],\n                userToken: [x.userToken],\n                accessToken: [x.accessToken, [Validators.required]],\n            });\n        });\n    }\n\n    public onSubmit(form: FormGroup) {\n        if (form.invalid) {\n            this.notificationService.error(\"Please check your entered values\");\n            return;\n        }\n\n        const settings = <IPushoverNotificationSettings>form.value;\n        settings.notificationTemplates = this.templates;\n\n        this.settingsService.savePushoverNotificationSettings(settings).subscribe(x => {\n            if (x) {\n                this.notificationService.success( \"Successfully saved the Pushover settings\");\n            } else {\n                this.notificationService.success(\"There was an error when saving the Pushover settings\");\n            }\n        });\n\n    }\n\n    public test(form: FormGroup) {\n        if (form.invalid) {\n            this.notificationService.error(\"Please check your entered values\");\n            return;\n        }\n\n        this.testerService.pushoverTest(form.value).subscribe(x => {\n            if (x) {\n                this.notificationService.success( \"Successfully sent a Pushover message\");\n            } else {\n                this.notificationService.error(\"There was an error when sending the Pushover message. Please check your settings\");\n            }\n        });\n    }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./node_modules/angular2-template-loader!./node_modules/angular-router-loader/src!./ClientApp/app/settings/notifications/pushover.component.ts","module.exports = \"\\n<settings-menu></settings-menu>\\n<div *ngIf=\\\"form\\\">\\n    <fieldset>\\n        <legend>Pushover Notifications</legend>\\n        <div class=\\\"col-md-6\\\">\\n            <form novalidate [formGroup]=\\\"form\\\" (ngSubmit)=\\\"onSubmit(form)\\\">\\n\\n                <div class=\\\"form-group\\\">\\n                    <div class=\\\"checkbox\\\">\\n                        <input type=\\\"checkbox\\\" id=\\\"enable\\\" formControlName=\\\"enabled\\\">\\n                        <label for=\\\"enable\\\">Enabled</label>\\n                    </div>\\n                </div>\\n\\n      \\n                <div class=\\\"form-group\\\">\\n                    <label for=\\\"accessToken\\\" class=\\\"control-label\\\">Access Token</label>\\n                   \\n                        <input type=\\\"text\\\" class=\\\"form-control form-control-custom \\\" id=\\\"accessToken\\\" name=\\\"accessToken\\\" [ngClass]=\\\"{'form-error': form.get('accessToken').hasError('required')}\\\" formControlName=\\\"accessToken\\\" pTooltip=\\\"Enter your API Key from Pushover.\\\">\\n                    <small *ngIf=\\\"form.get('accessToken').hasError('required')\\\" class=\\\"error-text\\\">The Access Token is required</small>\\n                </div>\\n\\n                <div class=\\\"form-group\\\">\\n                    <label for=\\\"userToken\\\" class=\\\"control-label\\\">User Token</label>\\n                    <div>\\n                        <input type=\\\"text\\\" class=\\\"form-control form-control-custom \\\" id=\\\"userToken\\\" name=\\\"userToken\\\" formControlName=\\\"userToken\\\" pTooltip=\\\"Your user or group key from Pushover.\\\">\\n                    </div>\\n                </div>\\n\\n               \\n\\n                <div class=\\\"form-group\\\">\\n                    <div>\\n                        <button [disabled]=\\\"form.invalid\\\" type=\\\"button\\\" (click)=\\\"test(form)\\\" class=\\\"btn btn-primary-outline\\\">\\n                            Test\\n                            <div id=\\\"spinner\\\"></div>\\n                        </button>\\n                    </div>\\n                </div>\\n\\n\\n\\n                <div class=\\\"form-group\\\">\\n                    <div>\\n                        <button [disabled]=\\\"form.invalid\\\" type=\\\"submit\\\" id=\\\"save\\\" class=\\\"btn btn-primary-outline\\\">Submit</button>\\n                    </div>\\n                </div>\\n            </form>\\n        </div>\\n\\n\\n        <div class=\\\"col-md-6\\\">\\n            <notification-templates [templates]=\\\"templates\\\" [showSubject]=\\\"false\\\"></notification-templates>\\n        </div>\\n    </fieldset>\\n</div>\";\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./ClientApp/app/settings/notifications/pushover.component.html\n// module id = 228\n// module chunks = 0","import { Component, OnInit } from \"@angular/core\";\nimport { FormBuilder, FormGroup, Validators } from \"@angular/forms\";\n\nimport { INotificationTemplates, ISlackNotificationSettings, NotificationType } from \"../../interfaces\";\nimport { TesterService } from \"../../services\";\nimport { NotificationService } from \"../../services\";\nimport { SettingsService } from \"../../services\";\n\n@Component({\n    template: require('./slack.component.html'),\n})\nexport class SlackComponent implements OnInit {\n    public NotificationType = NotificationType;\n    public templates: INotificationTemplates[];\n    public form: FormGroup;\n\n    constructor(private settingsService: SettingsService,\n                private notificationService: NotificationService,\n                private fb: FormBuilder,\n                private testerService: TesterService) { }\n\n    public ngOnInit() {\n        this.settingsService.getSlackNotificationSettings().subscribe(x => {\n            this.templates = x.notificationTemplates;\n\n            this.form = this.fb.group({\n                enabled: [x.enabled],\n                username: [x.username],\n                webhookUrl: [x.webhookUrl, [Validators.required]],\n                iconEmoji: [x.iconEmoji],\n                iconUrl: [x.iconUrl],\n                channel: [x.channel],\n\n            });\n        });\n    }\n\n    public onSubmit(form: FormGroup) {\n        if (form.invalid) {\n            this.notificationService.error(\"Please check your entered values\");\n            return;\n        }\n\n        const settings = <ISlackNotificationSettings>form.value;\n        if (settings.iconEmoji && settings.iconUrl) {\n\n            this.notificationService.error(\"You cannot have a Emoji icon and a URL icon\");\n            return;\n        }\n        settings.notificationTemplates = this.templates;\n\n        this.settingsService.saveSlackNotificationSettings(settings).subscribe(x => {\n            if (x) {\n                this.notificationService.success( \"Successfully saved the Slack settings\");\n            } else {\n                this.notificationService.success( \"There was an error when saving the Slack settings\");\n            }\n        });\n\n    }\n\n    public test(form: FormGroup) {\n        if (form.invalid) {\n            this.notificationService.error(\"Please check your entered values\");\n            return;\n        }\n\n        const settings = <ISlackNotificationSettings>form.value;\n        if (settings.iconEmoji && settings.iconUrl) {\n\n            this.notificationService.error(\"You cannot have a Emoji icon and a URL icon\");\n            return;\n        }\n        this.testerService.slackTest(settings).subscribe(x => {\n            if (x) {\n                this.notificationService.success( \"Successfully sent a Slack message, please check the slack channel\");\n            } else {\n                this.notificationService.error(\"There was an error when sending the Slack message. Please check your settings\");\n            }\n        });\n\n    }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./node_modules/angular2-template-loader!./node_modules/angular-router-loader/src!./ClientApp/app/settings/notifications/slack.component.ts","module.exports = \"\\n<settings-menu></settings-menu>\\n<div *ngIf=\\\"form\\\">\\n    <fieldset>\\n        <legend>Slack Notifications</legend>\\n        <div class=\\\"col-md-6\\\">\\n            <form novalidate [formGroup]=\\\"form\\\" (ngSubmit)=\\\"onSubmit(form)\\\">\\n\\n                <div class=\\\"form-group\\\">\\n                   \\n                    <div class=\\\"checkbox\\\">\\n                        <input type=\\\"checkbox\\\" id=\\\"enable\\\" formControlName=\\\"enabled\\\">\\n                        <label for=\\\"enable\\\">Enabled</label>\\n                    </div>\\n                </div>\\n\\n \\n                <div class=\\\"form-group\\\">\\n                    \\n                    <label for=\\\"webhookUrl\\\" class=\\\"control-label\\\">Webhook Url</label>\\n                    <div>\\n                        \\n                        <small class=\\\"control-label\\\"> Click <a target=\\\"_blank\\\" href=\\\"https://my.slack.com/services/new/incoming-webhook/\\\">Here</a> and follow the guide. You will then have a Webhook Url</small>\\n                        <input type=\\\"text\\\" class=\\\"form-control form-control-custom \\\" id=\\\"webhookUrl\\\" name=\\\"webhookUrl\\\" formControlName=\\\"webhookUrl\\\"  [ngClass]=\\\"{'form-error': form.get('webhookUrl').hasError('required')}\\\">\\n                        <small *ngIf=\\\"form.get('webhookUrl').hasError('required')\\\" class=\\\"error-text\\\">The Webhook Url is required</small>\\n                    </div>\\n                </div>\\n\\n                <div class=\\\"form-group\\\">\\n                    <label for=\\\"username\\\" class=\\\"control-label\\\">Username Override</label>\\n                    <div>\\n                        <input type=\\\"text\\\" class=\\\"form-control form-control-custom \\\" id=\\\"username\\\" name=\\\"username\\\" formControlName=\\\"username\\\" pTooltip=\\\"Optional, this will override the username you used for the Webhook. Default is Ombi\\\">\\n                    </div>\\n                </div>\\n                <div class=\\\"form-group\\\">\\n                    <label for=\\\"channel\\\" class=\\\"control-label\\\">Channel Override</label>\\n                    <div>\\n                        <input type=\\\"text\\\" class=\\\"form-control form-control-custom \\\" id=\\\"channel\\\" name=\\\"channel\\\" formControlName=\\\"channel\\\" pTooltip=\\\"Optional, this will override the channel you used for the Webhook\\\">\\n                    </div>\\n                </div>\\n\\n                <div class=\\\"form-group\\\">\\n                    <label for=\\\"iconEmoji\\\" class=\\\"control-label\\\">Emoji Icon Override</label>\\n                    <div>\\n                        <input type=\\\"text\\\" class=\\\"form-control form-control-custom \\\" id=\\\"iconEmoji\\\" name=\\\"iconEmoji\\\" formControlName=\\\"iconEmoji\\\" pTooltip=\\\"Optional, this will override the Icon you used for the Webhook\\\">\\n                    </div>\\n                </div>\\n                <div class=\\\"form-group\\\">\\n                    <label for=\\\"iconUrl\\\" class=\\\"control-label\\\">Url Icon Override</label>\\n                    <div>\\n                        <input type=\\\"text\\\" class=\\\"form-control form-control-custom \\\" id=\\\"iconUrl\\\" name=\\\"iconUrl\\\" formControlName=\\\"iconUrl\\\" pTooltip=\\\"Optional, this will override the Icon you used for the Webhook\\\">\\n                    </div>\\n                </div>\\n                \\n                <small>You can find more details about the Slack API <a target=\\\"_blank\\\" href=\\\"https://api.slack.com/custom-integrations/incoming-webhooks\\\">Here</a></small>\\n               \\n\\n                <div class=\\\"form-group\\\">\\n                    <div>\\n                        <button [disabled]=\\\"form.invalid\\\" type=\\\"button\\\" (click)=\\\"test(form)\\\" class=\\\"btn btn-primary-outline\\\">\\n                            Test\\n                            <div id=\\\"spinner\\\"></div>\\n                        </button>\\n                    </div>\\n                </div>\\n\\n\\n\\n                <div class=\\\"form-group\\\">\\n                    <div>\\n                        <button [disabled]=\\\"form.invalid\\\" type=\\\"submit\\\" id=\\\"save\\\" class=\\\"btn btn-primary-outline\\\">Submit</button>\\n                    </div>\\n                </div>\\n            </form>\\n        </div>\\n\\n\\n        <div class=\\\"col-md-6\\\">\\n            <notification-templates [templates]=\\\"templates\\\" [showSubject]=\\\"false\\\"></notification-templates>\\n        </div>\\n    </fieldset>\\n</div>\";\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./ClientApp/app/settings/notifications/slack.component.html\n// module id = 230\n// module chunks = 0","import { Component, OnInit } from \"@angular/core\";\nimport { FormBuilder, FormGroup, Validators } from \"@angular/forms\";\n\nimport { INotificationTemplates, ITelegramNotifcationSettings, NotificationType } from \"../../interfaces\";\nimport { TesterService } from \"../../services\";\nimport { NotificationService } from \"../../services\";\nimport { SettingsService } from \"../../services\";\n\n@Component({\n    template: require('./telegram.component.html'),\n})\nexport class TelegramComponent implements OnInit {\n\n    public NotificationType = NotificationType;\n    public templates: INotificationTemplates[];\n    public form: FormGroup;\n\n    constructor(private settingsService: SettingsService,\n                private notificationService: NotificationService,\n                private fb: FormBuilder,\n                private testerService: TesterService) { }\n\n    public ngOnInit() {\n        this.settingsService.getTelegramNotificationSettings().subscribe(x => {\n            this.templates = x.notificationTemplates;\n\n            this.form = this.fb.group({\n                enabled: [x.enabled],\n                botApi: [x.botApi, [Validators.required]],\n                chatId: [x.chatId, [Validators.required]],\n                parseMode: [x.parseMode, [Validators.required]],\n\n            });\n        });\n    }\n\n    public onSubmit(form: FormGroup) {\n        if (form.invalid) {\n            this.notificationService.error(\"Please check your entered values\");\n            return;\n        }\n\n        const settings = <ITelegramNotifcationSettings>form.value;\n        settings.notificationTemplates = this.templates;\n\n        this.settingsService.saveTelegramNotificationSettings(settings).subscribe(x => {\n            if (x) {\n                this.notificationService.success(\"Successfully saved the Telegram settings\");\n            } else {\n                this.notificationService.success(\"There was an error when saving the Telegram settings\");\n            }\n        });\n\n    }\n\n    public test(form: FormGroup) {\n        if (form.invalid) {\n            this.notificationService.error(\"Please check your entered values\");\n            return;\n        }\n\n        this.testerService.telegramTest(form.value).subscribe(x => {\n            if (x) {\n                this.notificationService.success(\"Successfully sent a Telegram message, please check the Telegram channel\");\n            } else {\n                this.notificationService.error(\"There was an error when sending the Telegram message. Please check your settings\");\n            }\n        });\n\n    }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./node_modules/angular2-template-loader!./node_modules/angular-router-loader/src!./ClientApp/app/settings/notifications/telegram.component.ts","module.exports = \"<settings-menu>\\n</settings-menu>\\n<div *ngIf=\\\"form\\\">\\n    <fieldset>\\n        <legend>Telegram Notifications</legend>\\n        <div class=\\\"col-md-6\\\">\\n            <form novalidate [formGroup]=\\\"form\\\" (ngSubmit)=\\\"onSubmit(form)\\\">\\n\\n                <div class=\\\"form-group\\\">\\n                    <div class=\\\"checkbox\\\">\\n                        <input type=\\\"checkbox\\\" id=\\\"enable\\\" formControlName=\\\"enabled\\\">\\n                        <label for=\\\"enable\\\">Enabled</label>\\n                    </div>\\n                </div>\\n\\n\\n                <div class=\\\"form-group\\\">\\n                    <label for=\\\"botApi\\\" class=\\\"control-label\\\">Bot API</label>\\n                    <input type=\\\"text\\\" class=\\\"form-control form-control-custom \\\" id=\\\"botApi\\\" name=\\\"botApi\\\" formControlName=\\\"botApi\\\" [ngClass]=\\\"{'form-error': form.get('botApi').hasError('required')}\\\">\\n                    <small *ngIf=\\\"form.get('botApi').hasError('required')\\\" class=\\\"error-text\\\">The Bot API is required</small>\\n                    <small>You need a bot for Telegram notifications, You can find out how to create a bot\\n                        <a href=\\\"https://core.telegram.org/bots#6-botfather\\\">here</a>.</small>\\n\\n                </div>\\n\\n\\n                <div class=\\\"form-group\\\">\\n                    <label for=\\\"chatId\\\" class=\\\"control-label\\\">Chat Id</label>\\n                    <input type=\\\"text\\\" class=\\\"form-control form-control-custom \\\" id=\\\"chatId\\\" name=\\\"chatId\\\" formControlName=\\\"chatId\\\" [ngClass]=\\\"{'form-error': form.get('chatId').hasError('required')}\\\">\\n                    <small *ngIf=\\\"form.get('chatId').hasError('required')\\\" class=\\\"error-text\\\">The Chat Id is required</small>\\n                    <small>This is the Chat ID from Telegram. You can get the Chat Id from\\n                        <a href=\\\"https://telegram.me/get_id_bot\\\">here</a>. This also supports Group Chat Id's.</small>\\n                </div>\\n\\n                <div class=\\\"form-group\\\">\\n                    <p-radioButton name=\\\"parseMode\\\" value=\\\"markdown\\\" formControlName=\\\"parseMode\\\" label=\\\"Markdown Formatting\\\"></p-radioButton>\\n                </div>\\n                <div class=\\\"form-group\\\">\\n                    <p-radioButton name=\\\"parseMode\\\" value=\\\"html\\\" formControlName=\\\"parseMode\\\" label=\\\"Html Formatting\\\"></p-radioButton>\\n                </div>\\n                <small>Select a formatting option for the messages, you can view the supported formatting <a href=\\\"https://core.telegram.org/bots/api#formatting-options\\\">here</a>.</small>\\n\\n\\n                <div class=\\\"form-group\\\">\\n                    <div>\\n                        <button [disabled]=\\\"form.invalid\\\" type=\\\"button\\\" (click)=\\\"test(form)\\\" class=\\\"btn btn-primary-outline\\\">\\n                            Test\\n                            <div id=\\\"spinner\\\"></div>\\n                        </button>\\n                    </div>\\n                </div>\\n\\n                <div class=\\\"form-group\\\">\\n                    <div>\\n                        <button [disabled]=\\\"form.invalid\\\" type=\\\"submit\\\" id=\\\"save\\\" class=\\\"btn btn-primary-outline\\\">Submit</button>\\n                    </div>\\n                </div>\\n            </form>\\n        </div>\\n\\n\\n        <div class=\\\"col-md-6\\\">\\n            <notification-templates [templates]=\\\"templates\\\" [showSubject]=\\\"false\\\"></notification-templates>\\n        </div>\\n    </fieldset>\\n</div>\";\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./ClientApp/app/settings/notifications/telegram.component.html\n// module id = 232\n// module chunks = 0","import { Component, OnInit } from \"@angular/core\";\nimport { FormBuilder, FormGroup } from \"@angular/forms\";\n\nimport { IOmbiSettings } from \"../../interfaces\";\nimport { NotificationService } from \"../../services\";\nimport { SettingsService } from \"../../services\";\n\n@Component({\n    template: require('./ombi.component.html'),\n})\nexport class OmbiComponent implements OnInit {\n\n    public form: FormGroup;\n\n    constructor(private settingsService: SettingsService,\n                private notificationService: NotificationService,\n                private fb: FormBuilder) { }\n\n    public ngOnInit() {\n        this.settingsService.getOmbi().subscribe(x => {\n            this.form = this.fb.group({\n                collectAnalyticData: [x.collectAnalyticData],\n                apiKey: [x.apiKey],\n                ignoreCertificateErrors: [x.ignoreCertificateErrors],\n                baseUrl: [x.baseUrl],\n                doNotSendNotificationsForAutoApprove: [x.doNotSendNotificationsForAutoApprove],\n            });\n        });\n    }\n\n    public refreshApiKey() {\n        this.settingsService.resetOmbiApi().subscribe(x => {\n            this.form.controls.apiKey.patchValue(x);\n        });\n    }\n\n    public onSubmit(form: FormGroup) {\n        if (form.invalid) {\n            this.notificationService.error(\"Please check your entered values\");\n            return;\n        }\n\n        const result = <IOmbiSettings>form.value;\n        if(result.baseUrl.length > 0) {\n            if(!result.baseUrl.startsWith(\"/\")) {\n                this.notificationService.error(\"Please ensure your base url starts with a '/'\");\n                return;\n            }\n        }\n\n        this.settingsService.saveOmbi(form.value).subscribe(x => {\n            if (x) {\n                this.notificationService.success(\"Successfully saved Ombi settings\");\n            } else {\n                this.notificationService.success(\"There was an error when saving the Ombi settings\");\n            }\n        });\n    }\n\n    public successfullyCopied() {\n        this.notificationService.success(\"Copied the Api Key to the clipboard!\");\n    }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./node_modules/angular2-template-loader!./node_modules/angular-router-loader/src!./ClientApp/app/settings/ombi/ombi.component.ts","module.exports = \"<settings-menu></settings-menu>\\n\\n<wiki [url]=\\\"'https://github.com/tidusjar/Ombi/wiki/Ombi-Settings'\\\"></wiki>\\n<fieldset *ngIf=\\\"form\\\">\\n    <legend>Ombi Configuration</legend>\\n    <form novalidate [formGroup]=\\\"form\\\" (ngSubmit)=\\\"onSubmit(form)\\\">\\n\\n        <!--<div class=\\\"form-group\\\">\\n            <label for=\\\"portNumber\\\" class=\\\"control-label\\\">Port</label>\\n            <div>\\n                <input type=\\\"text\\\" class=\\\"form-control form-control-custom \\\" id=\\\"portNumber\\\" name=\\\"Port\\\" placeholder=\\\"Port Number\\\" formControlName=\\\"port\\\" pTooltip=\\\"You will have to restart after changing the port.\\\">\\n            </div>\\n        </div>-->\\n\\n        <!--<div *ngIf=\\\"form.invalid && form.dirty\\\" class=\\\"alert alert-danger\\\">\\n            <div>The External URL is incorrect</div>\\n        </div>\\n        <div class=\\\"form-group\\\">\\n            <label for=\\\"externalUrl\\\" class=\\\"control-label\\\">External Url</label>\\n            <div>\\n                <input type=\\\"text\\\" class=\\\"form-control form-control-custom \\\" id=\\\"externalUrl\\\" name=\\\"externalUrl\\\" placeholder=\\\"http://ombi.io/\\\" formControlName=\\\"externalUrl\\\" tooltipPosition=\\\"top\\\" pTooltip=\\\"This will be the link that will be in any emails/notifications sent to the users.\\\">\\n            </div>\\n        </div>-->\\n        <div class=\\\"col-md-6\\\">\\n       \\n        <div class=\\\"form-group\\\">\\n            <label for=\\\"baseUrl\\\" class=\\\"control-label\\\">Base Url</label>\\n            <div>\\n                <input type=\\\"text\\\" class=\\\"form-control form-control-custom\\\" id=\\\"baseUrl\\\" name=\\\"baseUrl\\\" formControlName=\\\"baseUrl\\\">\\n            </div>\\n        </div>\\n\\n        <div class=\\\"form-group\\\">\\n            <label for=\\\"ApiKey\\\" class=\\\"control-label\\\">Api Key</label>\\n            <div class=\\\"input-group\\\">\\n                <input type=\\\"text\\\" class=\\\"form-control form-control-custom\\\" id=\\\"ApiKey\\\" name=\\\"ApiKey\\\" formControlName=\\\"apiKey\\\" readonly=\\\"readonly\\\" #apiKey>\\n\\n                <div class=\\\"input-group-addon\\\">\\n                    <div (click)=\\\"refreshApiKey()\\\" id=\\\"refreshKey\\\" class=\\\"fa fa-refresh\\\" title=\\\"Reset API Key\\\" pTooltip=\\\"This will invalidate the old API key\\\" ></div>\\n                </div>\\n\\n                <div class=\\\"input-group-addon\\\">\\n                    <div ngxClipboard [ngxClipboard]=\\\"apiKey\\\" class=\\\"fa fa-clipboard\\\" (cbOnSuccess)=\\\"successfullyCopied()\\\"></div>\\n                </div>\\n            </div>\\n        </div>\\n        <br/>\\n\\n        <div class=\\\"form-group\\\">\\n            <div class=\\\"checkbox\\\">\\n                <input type=\\\"checkbox\\\" id=\\\"doNotSendNotificationsForAutoApprove\\\" name=\\\"doNotSendNotificationsForAutoApprove\\\" formControlName=\\\"doNotSendNotificationsForAutoApprove\\\">\\n                <label for=\\\"doNotSendNotificationsForAutoApprove\\\">Do not send Notifications if a User has the Auto Approve permission</label>\\n            </div>\\n        </div>\\n\\n        <div class=\\\"form-group\\\">\\n            <div class=\\\"checkbox\\\">\\n                <input type=\\\"checkbox\\\" id=\\\"ignoreCertificateErrors\\\" name=\\\"ignoreCertificateErrors\\\" formControlName=\\\"ignoreCertificateErrors\\\">\\n                <label for=\\\"ignoreCertificateErrors\\\" tooltipPosition=\\\"top\\\" pTooltip=\\\"Enable if you are having connectivity problems over SSL\\\">Ignore any certificate errors</label>\\n            </div>\\n        </div>\\n\\n        <div class=\\\"form-group\\\">\\n            <div class=\\\"checkbox\\\">\\n                <input type=\\\"checkbox\\\" id=\\\"CollectAnalyticData\\\" name=\\\"CollectAnalyticData\\\" formControlName=\\\"collectAnalyticData\\\">\\n                <label for=\\\"CollectAnalyticData\\\">Allow us to collect anonymous analytical data e.g. browser used</label>\\n            </div>\\n        </div>\\n\\n        <div class=\\\"form-group\\\">\\n            <div>\\n                <button [disabled]=\\\"form.invalid\\\" type=\\\"submit\\\" id=\\\"save\\\" class=\\\"btn btn-primary-outline\\\">Submit</button>\\n            </div>\\n        </div>\\n        </div>\\n    </form>\\n</fieldset>\\n\";\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./ClientApp/app/settings/ombi/ombi.component.html\n// module id = 234\n// module chunks = 0","import { Component, OnDestroy, OnInit } from \"@angular/core\";\nimport \"rxjs/add/operator/takeUntil\";\nimport { Subject } from \"rxjs/Subject\";\n\nimport { IPlexServerResponse, IPlexServerViewModel } from \"../../interfaces\";\nimport { IPlexLibrariesSettings, IPlexServer, IPlexSettings } from \"../../interfaces\";\n\nimport { JobService, NotificationService, PlexService, SettingsService, TesterService } from \"../../services\";\n\n@Component({\n    template: require('./plex.component.html'),\n})\nexport class PlexComponent implements OnInit, OnDestroy {\n    public settings: IPlexSettings;\n    public loadedServers: IPlexServerViewModel; // This comes from the api call for the user to select a server\n    public username: string;\n    public password: string;\n    public serversButton = false;\n\n    public advanced = false;\n\n    private subscriptions = new Subject<void>();\n\n    constructor(private settingsService: SettingsService,\n                private notificationService: NotificationService,\n                private plexService: PlexService,\n                private testerService: TesterService,\n                private jobService: JobService) { }\n\n    public ngOnInit() {\n        this.settingsService.getPlex().subscribe(x => {\n            this.settings = x;\n        });\n    }\n\n    public requestServers(server: IPlexServer) {\n        this.plexService.getServers(this.username, this.password)\n            .takeUntil(this.subscriptions)\n            .subscribe(x => {\n                if (x.success) {\n                    this.loadedServers = x;\n                    this.serversButton = true;\n                    this.notificationService.success(\"Found the servers! Please select one!\");\n                } else {\n                    this.notificationService.warning(\"Error When Requesting Plex Servers\", \"Please make sure your username and password are correct\");\n                }\n            });\n    }\n\n    public selectServer(selectedServer: IPlexServerResponse, server: IPlexServer) {\n        server.ip = selectedServer.localAddresses.split(\",\")[0];\n        server.name = selectedServer.name;\n        server.machineIdentifier = selectedServer.machineIdentifier;\n        server.plexAuthToken = selectedServer.accessToken;\n        server.port = parseInt(selectedServer.port);\n        server.ssl = selectedServer.scheme === \"http\" ? false : true;\n\n        this.notificationService.success(`Selected ${server.name}!`);\n    }\n\n    public testPlex(server: IPlexServer) {\n        this.testerService.plexTest(server).subscribe(x => {\n            if (x === true) {\n                this.notificationService.success(`Successfully connected to the Plex server ${server.name}!`);\n            } else {\n                this.notificationService.error(`We could not connect to the Plex server  ${server.name}!`);\n            }\n        });\n    }\n\n    public addTab() {\n        if (this.settings.servers == null) {\n            this.settings.servers = [];\n        }\n        this.settings.servers.push(<IPlexServer>{ name: \"New*\", id: Math.floor(Math.random() * (99999 - 0 + 1) + 1) });\n\n    }\n\n    public removeServer(server: IPlexServer) {\n        const index = this.settings.servers.indexOf(server, 0);\n        if (index > -1) {\n            this.settings.servers.splice(index, 1);\n        }\n    }\n\n    public loadLibraries(server: IPlexServer) {\n        if (server.ip == null) {\n            this.notificationService.error(\"Plex is not yet configured correctly\");\n            return;\n        }\n        this.plexService.getLibraries(server).subscribe(x => {\n            server.plexSelectedLibraries = [];\n            if (x.successful) {\n                    x.data.mediaContainer.directory.forEach((item) => {\n                        const lib: IPlexLibrariesSettings = {\n                            key: item.key,\n                            title: item.title,\n                            enabled: false,\n                        };\n                        server.plexSelectedLibraries.push(lib);\n                    });\n                } else {\n                    this.notificationService.error(x.message);\n                }\n            },\n        err => { this.notificationService.error(err); });\n    }\n\n    public save() {\n        const filtered = this.settings.servers.filter(x => x.name !== \"\");\n        this.settings.servers = filtered;\n        this.settingsService.savePlex(this.settings).subscribe(x => {\n            if (x) {\n                this.notificationService.success(\"Successfully saved Plex settings\");\n            } else {\n                this.notificationService.success(\"There was an error when saving the Plex settings\");\n            }\n        });\n    }\n\n    public runCacher(): void {\n        this.jobService.runPlexCacher().subscribe(x => {\n            if(x) {\n                this.notificationService.success(\"Triggered the Plex Content Cacher\");\n            }\n        });\n    }\n\n    public ngOnDestroy() {\n        this.subscriptions.next();\n        this.subscriptions.complete();\n    }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./node_modules/angular2-template-loader!./node_modules/angular-router-loader/src!./ClientApp/app/settings/plex/plex.component.ts","module.exports = \"<settings-menu></settings-menu>\\n<div class=\\\"row\\\">\\n    <div class=\\\"col-md-2 col-md-push-10\\\">\\n        <span style=\\\"vertical-align: top;\\\">Advanced</span>\\n        <p-inputSwitch id=\\\"customInputSwitch\\\" [(ngModel)]=\\\"advanced\\\"></p-inputSwitch>\\n    </div>\\n</div>\\n<div *ngIf=\\\"settings\\\">\\n    <fieldset>\\n        <legend>Plex Configuration</legend>\\n\\n        <div class=\\\"row\\\">\\n\\n            <div class=\\\"form-group col-md-3\\\">\\n                <div class=\\\"checkbox\\\">\\n                    <input type=\\\"checkbox\\\" id=\\\"enable\\\" [(ngModel)]=\\\"settings.enable\\\" [checked]=\\\"settings.enable\\\">\\n                    <label for=\\\"enable\\\">Enable</label>\\n                </div>\\n            </div>\\n            <div class=\\\"col-md-2 col-md-push-7\\\">\\n                <button type=\\\"button\\\" (click)=\\\"addTab()\\\" class=\\\"btn btn-success-outline\\\">Add Server</button>\\n            </div>\\n        </div>\\n\\n        <ngb-tabset>\\n\\n            <div *ngFor=\\\"let server of settings.servers\\\">\\n                <ngb-tab [id]=\\\"server.id\\\" [title]=\\\"server.name\\\">\\n                    <ng-template ngbTabContent>\\n                        <br />\\n                        <br />\\n                        <div class=\\\"col-md-2 \\\" style=\\\"float: right;\\\">\\n                            <button type=\\\"button\\\" (click)=\\\"removeServer(server)\\\" class=\\\"btn btn-danger-outline\\\">Remove Server</button>\\n                        </div>\\n                        <br />\\n                        <br />\\n\\n                        <div class=\\\"col-md-6\\\">\\n                            <!-- Main Content -->\\n                            <div class=\\\"form-group\\\">\\n                                <label for=\\\"name\\\" class=\\\"control-label\\\">Server name</label>\\n                                <div>\\n                                    <input type=\\\"text\\\" class=\\\"form-control form-control-custom \\\" id=\\\"name\\\" name=\\\"name\\\" placeholder=\\\"Server\\\" [(ngModel)]=\\\"server.name\\\"\\n                                        value=\\\"{{server.name}}\\\">\\n                                </div>\\n                            </div>\\n\\n                            <div class=\\\"form-group\\\">\\n                                <label for=\\\"Ip\\\" class=\\\"control-label\\\">Hostname or IP</label>\\n                                <div>\\n                                    <input type=\\\"text\\\" class=\\\"form-control form-control-custom \\\" id=\\\"Ip\\\" name=\\\"Ip\\\" placeholder=\\\"localhost\\\" [(ngModel)]=\\\"server.ip\\\"\\n                                        value=\\\"{{server.ip}}\\\">\\n                                </div>\\n                            </div>\\n\\n                            <div class=\\\"form-group\\\">\\n                                <label for=\\\"portNumber\\\" class=\\\"control-label\\\">Port</label>\\n                                <div>\\n                                    <input type=\\\"text\\\" [(ngModel)]=\\\"server.port\\\" class=\\\"form-control form-control-custom \\\" id=\\\"portNumber\\\" name=\\\"Port\\\" placeholder=\\\"Port Number\\\"\\n                                        value=\\\"{{server.port}}\\\">\\n                                </div>\\n                            </div>\\n\\n                            <div class=\\\"form-group\\\">\\n                                <div class=\\\"checkbox\\\">\\n                                    <input type=\\\"checkbox\\\" id=\\\"ssl\\\" [(ngModel)]=\\\"server.ssl\\\" [checked]=\\\"server.ssl\\\">\\n                                    <label for=\\\"ssl\\\">SSL</label>\\n                                </div>\\n                            </div>\\n\\n\\n                            <div class=\\\"form-group\\\">\\n                                <label for=\\\"authToken\\\" class=\\\"control-label\\\">Plex Authorization Token</label>\\n                                <div class=\\\"\\\">\\n                                    <input type=\\\"text\\\" class=\\\"form-control-custom form-control\\\" id=\\\"authToken\\\" [(ngModel)]=\\\"server.plexAuthToken\\\" placeholder=\\\"Plex Auth Token\\\"\\n                                        value=\\\"{{server.plexAuthToken}}\\\">\\n                                </div>\\n                            </div>\\n\\n                            <div class=\\\"form-group\\\">\\n                                <label for=\\\"MachineIdentifier\\\" class=\\\"control-label\\\">Machine Identifier</label>\\n                                <div class=\\\"\\\">\\n                                    <input type=\\\"text\\\" class=\\\"form-control-custom form-control\\\" id=\\\"MachineIdentifier\\\" name=\\\"MachineIdentifier\\\" [(ngModel)]=\\\"server.machineIdentifier\\\"\\n                                        value=\\\"{{server.machineIdentifier}}\\\">\\n                                </div>\\n                            </div>\\n                        </div>\\n\\n                        <div class=\\\"col-md-6\\\">\\n                            <div class=\\\"form-group\\\">\\n                                <label for=\\\"username\\\" class=\\\"control-label\\\">Username and Password</label>\\n                                <div>\\n                                    <input type=\\\"text\\\" class=\\\"form-control form-control-custom\\\" id=\\\"username\\\" [(ngModel)]=\\\"username\\\" placeholder=\\\"username\\\">\\n                                </div>\\n                                <br />\\n                                <div>\\n                                    <input type=\\\"password\\\" class=\\\"form-control form-control-custom\\\" id=\\\"password\\\" [(ngModel)]=\\\"password\\\" placeholder=\\\"Password\\\">\\n                                </div>\\n                            </div>\\n\\n                            <div class=\\\"form-group\\\">\\n                                <div>\\n                                    <button id=\\\"requestToken\\\" (click)=\\\"requestServers(server)\\\" class=\\\"btn btn-primary-outline\\\">Load Servers\\n                                        <i class=\\\"fa fa-key\\\"></i>\\n                                    </button>\\n                                </div>\\n                            </div>\\n                            <br />\\n                            <br />\\n                            <div class=\\\"form-group\\\" *ngIf=\\\"loadedServers\\\">\\n                                <label for=\\\"username\\\" class=\\\"control-label\\\">Please select the server</label>\\n                                <br />\\n                                <div class=\\\"btn-group\\\">\\n                                    <div class=\\\"btn-group\\\">\\n                                        <a [attr.disabled]=\\\"!serversButton ? true : null\\\" href=\\\"#\\\" class=\\\"btn btn-info-outline dropdown-toggle\\\" data-toggle=\\\"dropdown\\\"\\n                                            aria-expanded=\\\"false\\\">\\n                                            Servers\\n                                            <span class=\\\"caret\\\"></span>\\n                                        </a>\\n\\n                                        <ul *ngIf=\\\"loadedServers\\\" class=\\\"dropdown-menu\\\">\\n                                            <li *ngFor=\\\"let s of loadedServers.servers.server\\\">\\n                                                <a (click)=\\\"selectServer(s,server)\\\">{{s.name}}</a>\\n                                            </li>\\n                                        </ul>\\n                                    </div>\\n                                </div>\\n                            </div>\\n                            <hr/>\\n                            <label>Please select the libraries you want Ombi to look in for content</label>\\n                            <br />\\n                            <small>Note: if nothing is selected, we will monitor all libraries</small>\\n                            <div class=\\\"form-group\\\">\\n                                <div>\\n                                    <button (click)=\\\"loadLibraries(server)\\\" class=\\\"btn btn-primary-outline\\\">Load Libraries\\n                                        <i class=\\\"fa fa-film\\\"></i>\\n                                    </button>\\n                                </div>\\n                            </div>\\n                            <div *ngIf=\\\"server.plexSelectedLibraries\\\">\\n                                <div *ngFor=\\\"let lib of server.plexSelectedLibraries\\\">\\n                                    <div class=\\\"form-group\\\">\\n                                        <div class=\\\"checkbox\\\">\\n                                            <input type=\\\"checkbox\\\" id=\\\"{{lib.title}}\\\" [(ngModel)]=\\\"lib.enabled\\\" [checked]=\\\"lib.enabled\\\">\\n                                            <label for=\\\"{{lib.title}}\\\">{{lib.title}}</label>\\n                                        </div>\\n                                    </div>\\n                                </div>\\n                            </div>\\n\\n                            <div class=\\\"form-group\\\" *ngIf=\\\"advanced\\\">\\n                                <label for=\\\"episodeBatchSize\\\" class=\\\"control-label\\\">Episode Batch Size</label>\\n                                <div>\\n                                    <input type=\\\"number\\\" class=\\\"form-control-custom form-small form-control\\\" id=\\\"episodeBatchSize\\\" name=\\\"episodeBatchSize\\\" [(ngModel)]=\\\"server.episodeBatchSize\\\"\\n                                        value=\\\"{{server.episodeBatchSize}}\\\" tooltipPosition=\\\"top\\\" pTooltip=\\\"This is used when we cache the episodes, we cache in batches of 50 by default, you can configure how many we do at a time here\\\">\\n                                </div>\\n                            </div>\\n\\n                            <div class=\\\"form-group\\\">\\n                                <div>\\n                                    <button id=\\\"testPlex\\\" type=\\\"button\\\" (click)=\\\"testPlex(server)\\\" class=\\\"btn btn-primary-outline\\\">\\n                                        Test Connectivity\\n                                        <div id=\\\"spinner\\\"></div>\\n                                    </button>\\n                                </div>\\n                            </div>\\n\\n                        </div>\\n\\n                    </ng-template>\\n                </ngb-tab>\\n            </div>\\n        </ngb-tabset>\\n        <div class=\\\"col-md-1\\\">\\n                <div class=\\\"form-group\\\">\\n                    <div>\\n                        <button (click)=\\\"save()\\\" type=\\\"submit\\\" id=\\\"save\\\" class=\\\"btn btn-primary-outline\\\">Submit</button>\\n                    </div>\\n                </div>\\n            </div>\\n            <div class=\\\"col-md-1\\\">\\n                    <div class=\\\"form-group\\\">\\n                        <div>\\n                            <button (click)=\\\"runCacher()\\\" type=\\\"button\\\" id=\\\"save\\\" class=\\\"btn btn-primary-outline\\\">Manually Run Cacher</button>\\n                        </div>\\n                    </div>\\n                </div>\\n    </fieldset>\\n</div>\\n\";\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./ClientApp/app/settings/plex/plex.component.html\n// module id = 236\n// module chunks = 0","import { Component, OnInit } from \"@angular/core\";\nimport { FormBuilder, FormGroup, Validators } from \"@angular/forms\";\n\nimport { IMinimumAvailability, IRadarrProfile, IRadarrRootFolder } from \"../../interfaces\";\nimport { IRadarrSettings } from \"../../interfaces\";\nimport { RadarrService } from \"../../services\";\nimport { TesterService } from \"../../services\";\nimport { NotificationService } from \"../../services\";\nimport { SettingsService } from \"../../services\";\n\n@Component({\n    template: require('./radarr.component.html'),\n})\nexport class RadarrComponent implements OnInit {\n\n    public qualities: IRadarrProfile[];\n    public rootFolders: IRadarrRootFolder[];\n    public minimumAvailabilityOptions: IMinimumAvailability[];\n    public profilesRunning: boolean;\n    public rootFoldersRunning: boolean;\n    public advanced = false;\n    public form: FormGroup;\n\n    constructor(private settingsService: SettingsService,\n                private radarrService: RadarrService,\n                private notificationService: NotificationService,\n                private fb: FormBuilder,\n                private testerService: TesterService) { }\n\n    public ngOnInit() {\n        this.settingsService.getRadarr()\n            .subscribe(x => {\n\n                this.form = this.fb.group({\n                    enabled: [x.enabled],\n                    apiKey: [x.apiKey, [Validators.required]],\n                    defaultQualityProfile: [x.defaultQualityProfile, [Validators.required]],\n                    defaultRootPath: [x.defaultRootPath, [Validators.required]],\n                    ssl: [x.ssl],\n                    subDir: [x.subDir],\n                    ip: [x.ip, [Validators.required]],\n                    port: [x.port, [Validators.required]],\n                    addOnly: [x.addOnly],\n                    minimumAvailability: [x.minimumAvailability, [Validators.required]],\n                });\n\n                if (x.defaultQualityProfile) {\n                    this.getProfiles(this.form);\n                }\n                if (x.defaultRootPath) {\n                    this.getRootFolders(this.form);\n                }\n            });\n\n        this.qualities = [];\n        this.qualities.push({ name: \"Please Select\", id: -1 });\n        \n        this.rootFolders = [];\n        this.rootFolders.push({ path: \"Please Select\", id: -1 });\n        this.minimumAvailabilityOptions = [\n            { name: \"Announced\", value: \"Announced\" },\n            { name: \"In Cinemas\", value: \"InCinemas\" },\n            { name: \"Physical / Web\", value: \"Released\" },\n            { name: \"PreDb\", value: \"PreDb\" },\n        ];\n\n    }\n\n    public getProfiles(form: FormGroup) {\n         this.profilesRunning = true;\n         this.radarrService.getQualityProfiles(form.value).subscribe(x => {\n             this.qualities = x;\n             this.qualities.unshift({ name: \"Please Select\", id: -1 });\n\n             this.profilesRunning = false;\n             this.notificationService.success(\"Successfully retrieved the Quality Profiles\");\n         });\n    }\n\n    public getRootFolders(form: FormGroup) {\n         this.rootFoldersRunning = true;\n         this.radarrService.getRootFolders(form.value).subscribe(x => {\n             this.rootFolders = x;\n             this.rootFolders.unshift({ path: \"Please Select\", id: -1 });\n\n             this.rootFoldersRunning = false;\n             this.notificationService.success(\"Successfully retrieved the Root Folders\");\n         });\n    }\n\n    public test(form: FormGroup) {\n        if (form.invalid) {\n            this.notificationService.error(\"Please check your entered values\");\n            return;\n        }\n        const settings = <IRadarrSettings>form.value;\n        this.testerService.radarrTest(settings).subscribe(x => {\n            if (x === true) {\n                this.notificationService.success(\"Successfully connected to Radarr!\");\n            } else {\n                this.notificationService.error(\"We could not connect to Radarr!\");\n            }\n        });\n    }\n\npublic onSubmit(form: FormGroup) {\n        if (form.invalid) {\n            this.notificationService.error(\"Please check your entered values\");\n            return;\n        }\n        if(form.controls.defaultQualityProfile.value === \"-1\" || form.controls.defaultRootPath.value === \"Please Select\") {\n            this.notificationService.error(\"Please check your entered values\");\n            return;\n        }\n\n        const settings = <IRadarrSettings>form.value;\n        this.settingsService.saveRadarr(settings).subscribe(x => {\n            if (x) {\n                this.notificationService.success(\"Successfully saved Radarr settings\");\n            } else {\n                this.notificationService.success(\"There was an error when saving the Radarr settings\");\n            }\n        });\n\n    }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./node_modules/angular2-template-loader!./node_modules/angular-router-loader/src!./ClientApp/app/settings/radarr/radarr.component.ts","module.exports = \"\\n<settings-menu></settings-menu>\\n<div *ngIf=\\\"form\\\">\\n    <fieldset>\\n        <legend>Radarr Settings</legend>\\n        <div style=\\\"float: right;\\\">\\n            <span style=\\\"vertical-align: top;\\\">Advanced</span>\\n            <p-inputSwitch id=\\\"customInputSwitch\\\" [(ngModel)]=\\\"advanced\\\"></p-inputSwitch>\\n        </div>\\n        <form novalidate [formGroup]=\\\"form\\\" (ngSubmit)=\\\"onSubmit(form)\\\" style=\\\"padding-top:5%;\\\">\\n            <div class=\\\"col-md-6\\\">\\n                <div class=\\\"form-group\\\">\\n                    <div class=\\\"checkbox\\\">\\n                        <input type=\\\"checkbox\\\" id=\\\"enable\\\" formControlName=\\\"enabled\\\" ng-checked=\\\"form.enabled\\\">\\n                        <label for=\\\"enable\\\">Enable</label>\\n                    </div>\\n                </div>\\n\\n\\n\\n                <div class=\\\"form-group\\\">\\n                    <label for=\\\"Ip\\\" class=\\\"control-label\\\">Hostname or IP</label>\\n\\n                        <input type=\\\"text\\\" class=\\\"form-control form-control-custom \\\" id=\\\"Ip\\\" name=\\\"Ip\\\" placeholder=\\\"localhost\\\" formControlName=\\\"ip\\\"  [ngClass]=\\\"{'form-error': form.get('ip').hasError('required')}\\\">\\n                        <small *ngIf=\\\"form.get('ip').hasError('required')\\\" class=\\\"error-text\\\">The IP/Hostname is required</small>\\n                </div>\\n\\n                <div class=\\\"form-group\\\">\\n                    <label for=\\\"portNumber\\\" class=\\\"control-label\\\">Port</label>\\n\\n                        <input type=\\\"text\\\" class=\\\"form-control form-control-custom \\\" formControlName=\\\"port\\\" id=\\\"portNumber\\\" name=\\\"Port\\\" placeholder=\\\"Port Number\\\"  [ngClass]=\\\"{'form-error': form.get('port').hasError('required')}\\\">\\n                        <small *ngIf=\\\"form.get('port').hasError('required')\\\" class=\\\"error-text\\\">The Port is required</small>\\n                </div>\\n\\n\\n                <div class=\\\"form-group\\\">\\n                    <label for=\\\"ApiKey\\\" class=\\\"control-label\\\">API Key</label>\\n                    \\n                        <input type=\\\"text\\\" class=\\\"form-control form-control-custom \\\"  [ngClass]=\\\"{'form-error': form.get('apiKey').hasError('required')}\\\" id=\\\"ApiKey\\\" name=\\\"ApiKey\\\" formControlName=\\\"apiKey\\\">\\n                        <small *ngIf=\\\"form.get('apiKey').hasError('required')\\\" class=\\\"error-text\\\">The API Key is required</small>\\n                </div>\\n                <div class=\\\"form-group\\\">\\n                    <div class=\\\"checkbox\\\">\\n\\n                        <input type=\\\"checkbox\\\" id=\\\"Ssl\\\" name=\\\"Ssl\\\" formControlName=\\\"ssl\\\"><label for=\\\"Ssl\\\">SSL</label>\\n\\n                    </div>\\n                </div>\\n                <div class=\\\"form-group\\\">\\n                    <label for=\\\"SubDir\\\" class=\\\"control-label\\\">Base Url</label>\\n                    <div>\\n                        <input type=\\\"text\\\" class=\\\"form-control form-control-custom\\\" formControlName=\\\"subDir\\\" id=\\\"SubDir\\\" name=\\\"SubDir\\\">\\n                    </div>\\n                </div>\\n            </div>\\n            <div class=\\\"col-md-6\\\">\\n                <div class=\\\"form-group\\\">\\n                    <div>\\n                        <button (click)=\\\"getProfiles(form)\\\" type=\\\"button\\\" class=\\\"btn btn-primary-outline\\\">Get Quality Profiles <span *ngIf=\\\"profilesRunning\\\" class=\\\"fa fa-spinner fa-spin\\\"> </span></button>\\n                    </div>\\n                </div>\\n                <div class=\\\"form-group\\\">\\n                    <label for=\\\"select\\\" class=\\\"control-label\\\">Quality Profiles</label>\\n                    <div id=\\\"profiles\\\">\\n                        <select formControlName=\\\"defaultQualityProfile\\\" class=\\\"form-control form-control-custom\\\" id=\\\"select\\\"  [ngClass]=\\\"{'form-error': form.get('defaultQualityProfile').hasError('required')}\\\">\\n                            <option *ngFor=\\\"let quality of qualities\\\" value=\\\"{{quality.id}}\\\">{{quality.name}}</option>\\n                        </select>\\n                    </div>\\n                    <small *ngIf=\\\"form.get('defaultQualityProfile').hasError('required')\\\" class=\\\"error-text\\\">A Default Quality Profile is required</small>\\n                </div>\\n\\n                <div class=\\\"form-group\\\">\\n                    <div>\\n                        <button (click)=\\\"getRootFolders(form)\\\" type=\\\"button\\\" class=\\\"btn btn-primary-outline\\\">Get Root Folders <span *ngIf=\\\"rootFoldersRunning\\\" class=\\\"fa fa-spinner fa-spin\\\"></span></button>\\n\\n                    </div>\\n\\n                </div>\\n                <div class=\\\"form-group\\\">\\n                    <label for=\\\"rootFolders\\\" class=\\\"control-label\\\">Default Root Folders</label>\\n                    <div id=\\\"rootFolders\\\">\\n                        <select formControlName=\\\"defaultRootPath\\\" class=\\\"form-control form-control-custom\\\"  [ngClass]=\\\"{'form-error': form.get('defaultRootPath').hasError('required')}\\\">\\n                            <option *ngFor=\\\"let folder of rootFolders\\\" value=\\\"{{folder.path}}\\\" >{{folder.path}}</option>\\n                        </select>\\n                    </div>                    \\n                    <small *ngIf=\\\"form.get('defaultRootPath').hasError('required')\\\" class=\\\"error-text\\\">A Default Root Path is required</small>\\n                </div>\\n\\n                <div class=\\\"form-group\\\">\\n                    <label for=\\\"rootFolders\\\" class=\\\"control-label\\\">Default Minimum Availability</label>\\n                    <div id=\\\"rootFolders\\\">\\n                        <select formControlName=\\\"minimumAvailability\\\" class=\\\"form-control form-control-custom\\\" [ngClass]=\\\"{'form-error': form.get('minimumAvailability').hasError('required')}\\\">\\n                            <option *ngFor=\\\"let min of minimumAvailabilityOptions\\\" value=\\\"{{min.value}}\\\">{{min.name}}</option>\\n                        </select>\\n                    </div>\\n                    \\n                    <small *ngIf=\\\"form.get('minimumAvailability').hasError('required')\\\" type=\\\"button\\\" class=\\\"error-text\\\">A Default Minimum Availability is required</small>\\n                </div>\\n\\n                <div class=\\\"form-group\\\" *ngIf=\\\"advanced\\\" style=\\\"color:#ff761b\\\">\\n                    <div class=\\\"checkbox\\\">\\n                        <input type=\\\"checkbox\\\" id=\\\"addOnly\\\" formControlName=\\\"addOnly\\\">\\n                        <label for=\\\"addOnly\\\">Do not search</label>\\n                    </div>\\n                </div>\\n                <div class=\\\"form-group\\\">\\n                    <div>\\n                        <button type=\\\"button\\\" [disabled]=\\\"form.invalid\\\" (click)=\\\"test(form)\\\" class=\\\"btn btn-primary-outline\\\">Test Connectivity <span id=\\\"spinner\\\"></span></button>\\n                    </div>\\n                </div>\\n\\n\\n                <div class=\\\"form-group\\\">\\n                    <div>\\n                        <button type=\\\"submit\\\" [disabled]=\\\"form.invalid\\\" class=\\\"btn btn-primary-outline \\\">Submit</button>\\n                    </div>\\n                </div>\\n            </div>\\n        </form>\\n    </fieldset>\\n</div>\\n\";\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./ClientApp/app/settings/radarr/radarr.component.html\n// module id = 238\n// module chunks = 0","import { Component, OnInit } from \"@angular/core\";\nimport { FormBuilder, FormGroup, Validators } from \"@angular/forms\";\n\nimport { IDropDownModel, ISickRageSettings } from \"../../interfaces\";\nimport { TesterService } from \"../../services\";\nimport { NotificationService } from \"../../services\";\nimport { SettingsService } from \"../../services\";\n\n@Component({\n    template: require('./sickrage.component.html'),\n})\nexport class SickRageComponent implements OnInit {\n\n    public qualities: IDropDownModel[];\n    public form: FormGroup;\n\n    constructor(private settingsService: SettingsService,\n                private notificationService: NotificationService,\n                private testerService: TesterService,\n                private fb: FormBuilder) { }\n\n    public ngOnInit() {\n        this.settingsService.getSickRageSettings()\n            .subscribe(x => {\n                this.form = this.fb.group({\n                    enabled: [x.enabled],\n                    apiKey: [x.apiKey, [Validators.required]],\n                    qualityProfile: [x.qualityProfile, [Validators.required]],\n                    ssl: [x.ssl],\n                    subDir: [x.subDir],\n                    ip: [x.ip, [Validators.required]],\n                    port: [x.port, [Validators.required]],\n                });\n                this.qualities = x.qualities;\n            });\n    }\n\n    public test(form: FormGroup) {\n        if (form.invalid) {\n            this.notificationService.error(\"Please check your entered values\");\n            return;\n        }\n        const settings = <ISickRageSettings>form.value;\n        this.testerService.sickrageTest(settings).subscribe(x => {\n            if (x) {\n                this.notificationService.success(\"Successfully connected to SickRage!\");\n            } else {\n                this.notificationService.error(\"We could not connect to SickRage!\");\n            }\n        });\n    }\n\n    public onSubmit(form: FormGroup) {\n        if (form.invalid) {\n            this.notificationService.error(\"Please check your entered values\");\n            return;\n        }\n\n        this.settingsService.saveSickRageSettings(form.value)\n            .subscribe(x => {\n                if (x) {\n                    this.notificationService.success(\"Successfully saved SickRage settings\");\n                } else {\n                    this.notificationService.error(\"There was an error when saving the SickRage settings\");\n                }\n            });\n    }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./node_modules/angular2-template-loader!./node_modules/angular-router-loader/src!./ClientApp/app/settings/sickrage/sickrage.component.ts","module.exports = \"\\n<settings-menu></settings-menu>\\n<div *ngIf=\\\"form\\\">\\n    <fieldset>\\n        <legend>SickRage Settings</legend>\\n        <form novalidate [formGroup]=\\\"form\\\" (ngSubmit)=\\\"onSubmit(form)\\\" style=\\\"padding-top:5%;\\\">\\n\\n            <div class=\\\"col-md-6\\\">\\n                <div class=\\\"form-group\\\">\\n                    <div class=\\\"checkbox\\\">\\n                        <input type=\\\"checkbox\\\" id=\\\"enable\\\" formControlName=\\\"enabled\\\">\\n                        <label for=\\\"enable\\\">Enable</label>\\n                    </div>\\n                </div>\\n\\n                <div class=\\\"form-group\\\">\\n                    <label for=\\\"Ip\\\" class=\\\"control-label\\\">Hostname or IP</label>\\n                    \\n                        <input type=\\\"text\\\" class=\\\"form-control form-control-custom \\\" formControlName=\\\"ip\\\" id=\\\"Ip\\\" name=\\\"Ip\\\" placeholder=\\\"localhost\\\" [ngClass]=\\\"{'form-error': form.get('ip').hasError('required')}\\\">\\n                        <small *ngIf=\\\"form.get('ip').hasError('required')\\\" class=\\\"error-text\\\">The IP/Hostname is required</small>\\n                </div>\\n\\n                <div class=\\\"form-group\\\">\\n                    <label for=\\\"portNumber\\\" class=\\\"control-label\\\">Port</label>\\n\\n                        <input type=\\\"text\\\" class=\\\"form-control form-control-custom \\\" [ngClass]=\\\"{'form-error': form.get('port').hasError('required')}\\\" formControlName=\\\"port\\\" id=\\\"portNumber\\\" name=\\\"Port\\\" placeholder=\\\"Port Number\\\">\\n                        <small *ngIf=\\\"form.get('port').hasError('required')\\\" class=\\\"error-text\\\">The Port is required</small>\\n                </div>\\n\\n\\n                <div class=\\\"form-group\\\">\\n                    <label for=\\\"ApiKey\\\" class=\\\"control-label\\\">API Key</label>\\n                    \\n                        <input type=\\\"text\\\" class=\\\"form-control form-control-custom \\\" [ngClass]=\\\"{'form-error': form.get('apiKey').hasError('required')}\\\" formControlName=\\\"apiKey\\\" id=\\\"ApiKey\\\" name=\\\"ApiKey\\\">\\n                        <small *ngIf=\\\"form.get('apiKey').hasError('required')\\\" class=\\\"error-text\\\">The API Key is required</small>\\n                </div>\\n                <div class=\\\"form-group\\\">\\n                    <div class=\\\"checkbox\\\">\\n\\n                        <input type=\\\"checkbox\\\" id=\\\"Ssl\\\" name=\\\"Ssl\\\" formControlName=\\\"ssl\\\"><label for=\\\"Ssl\\\">SSL</label>\\n\\n                    </div>\\n                </div>\\n                <div class=\\\"form-group\\\">\\n                    <label for=\\\"SubDir\\\" class=\\\"control-label\\\">Base Url</label>\\n                    <div>\\n                        <input type=\\\"text\\\" class=\\\"form-control form-control-custom\\\" formControlName=\\\"subDir\\\" id=\\\"SubDir\\\" name=\\\"SubDir\\\">\\n                    </div>\\n                </div>\\n            </div>\\n            <div class=\\\"col-md-6\\\">\\n                <div class=\\\"form-group\\\">\\n                    <label for=\\\"select\\\" class=\\\"control-label\\\">Quality Profiles</label>\\n                    <div id=\\\"profiles\\\">\\n                        <select class=\\\"form-control form-control-custom\\\"  [ngClass]=\\\"{'form-error': form.get('qualityProfile').hasError('required')}\\\" id=\\\"select\\\" formControlName=\\\"qualityProfile\\\">\\n                            <option *ngFor=\\\"let quality of qualities\\\" value=\\\"{{quality.value}}\\\" >{{quality.display}}</option>\\n                        </select>\\n                    </div>\\n                    <small *ngIf=\\\"form.get('qualityProfile').hasError('required')\\\" class=\\\"error-text\\\">A Default Quality Profile is required</small>\\n                    \\n                </div>\\n\\n                <div class=\\\"form-group\\\">\\n                    <div>\\n                        <button type=\\\"button\\\" (click)=\\\"test(form)\\\" class=\\\"btn btn-primary-outline\\\">Test Connectivity <span id=\\\"spinner\\\"> </span></button>\\n                    </div>\\n                </div>\\n\\n\\n                <div class=\\\"form-group\\\">\\n                    <div>\\n                        <button type=\\\"submit\\\" class=\\\"btn btn-primary-outline \\\">Submit</button>\\n                    </div>\\n                </div>\\n            </div>\\n        </form>\\n    </fieldset>\\n</div>\\n\";\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./ClientApp/app/settings/sickrage/sickrage.component.html\n// module id = 240\n// module chunks = 0","import { Component, OnInit } from \"@angular/core\";\nimport { FormBuilder, FormGroup, Validators } from \"@angular/forms\";\n\nimport { ISonarrProfile, ISonarrRootFolder } from \"../../interfaces\";\n\nimport { ISonarrSettings } from \"../../interfaces\";\nimport { SonarrService } from \"../../services\";\nimport { TesterService } from \"../../services\";\nimport { NotificationService } from \"../../services\";\nimport { SettingsService } from \"../../services\";\n\n@Component({\n    template: require('./sonarr.component.html'),\n})\nexport class SonarrComponent implements OnInit {\n\n    public qualities: ISonarrProfile[];\n    public rootFolders: ISonarrRootFolder[];\n    public selectedRootFolder: ISonarrRootFolder;\n    public selectedQuality: ISonarrProfile;\n    public profilesRunning: boolean;\n    public rootFoldersRunning: boolean;\n    public form: FormGroup;\n    public advanced = false;\n\n    constructor(private settingsService: SettingsService,\n                private sonarrService: SonarrService,\n                private notificationService: NotificationService,\n                private testerService: TesterService,\n                private fb: FormBuilder) { }\n\n    public ngOnInit() {\n        this.settingsService.getSonarr()\n            .subscribe(x => {\n                this.form = this.fb.group({\n                    enabled: [x.enabled],\n                    apiKey: [x.apiKey, [Validators.required]],\n                    qualityProfile: [x.qualityProfile, [Validators.required]],\n                    rootPath: [x.rootPath, [Validators.required]],\n                    ssl: [x.ssl],\n                    subDir: [x.subDir],\n                    ip: [x.ip, [Validators.required]],\n                    port: [x.port, [Validators.required]],\n                    addOnly: [x.addOnly],\n                    seasonFolders: [x.seasonFolders],\n                });\n\n                if (x.qualityProfile) {\n                    this.getProfiles(this.form);\n                }\n                if (x.rootPath) {\n                    this.getRootFolders(this.form);\n                }\n            });\n        this.rootFolders = [];\n        this.qualities = [];\n        this.rootFolders.push({ path: \"Please Select\", id: -1 });\n        this.qualities.push({ name: \"Please Select\", id: -1 });\n    }\n\n    public getProfiles(form: FormGroup) {\n        this.profilesRunning = true;\n        this.sonarrService.getQualityProfiles(form.value)\n            .subscribe(x => {\n                this.qualities = x;\n                this.qualities.unshift({ name: \"Please Select\", id: -1 });\n\n                this.profilesRunning = false;\n                this.notificationService.success(\"Successfully retrieved the Quality Profiles\");\n            });\n    }\n\n    public getRootFolders(form: FormGroup) {\n        this.rootFoldersRunning = true;\n        this.sonarrService.getRootFolders(form.value)\n            .subscribe(x => {\n                this.rootFolders = x;\n                this.rootFolders.unshift({ path: \"Please Select\", id: -1 });\n\n                this.rootFoldersRunning = false;\n                this.notificationService.success(\"Successfully retrieved the Root Folders\");\n            });\n    }\n\n    public test(form: FormGroup) {\n        if (form.invalid) {\n            this.notificationService.error(\"Please check your entered values\");\n            return;\n        }\n        const settings = <ISonarrSettings>form.value;\n        this.testerService.sonarrTest(settings).subscribe(x => {\n            if (x) {\n                this.notificationService.success(\"Successfully connected to Sonarr!\");\n            } else {\n                this.notificationService.error(\"We could not connect to Sonarr!\");\n            }\n        });\n    }\n\n    public onSubmit(form: FormGroup) {\n        if (form.invalid) {\n            this.notificationService.error(\"Please check your entered values\");\n            return;\n        }\n        if(form.controls.defaultQualityProfile) {\n            if(form.controls.defaultQualityProfile.value === \"-1\") {\n                this.notificationService.error(\"Please check your entered values\");\n            }\n        }\n        if(form.controls.defaultRootPath) {\n            if(form.controls.defaultRootPath.value === \"Please Select\") {\n                this.notificationService.error(\"Please check your entered values\");\n            }\n        }\n\n        this.settingsService.saveSonarr(form.value)\n            .subscribe(x => {\n                if (x) {\n                    this.notificationService.success(\"Successfully saved Sonarr settings\");\n                } else {\n                    this.notificationService.error(\"There was an error when saving the Sonarr settings\");\n                }\n            });\n    }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./node_modules/angular2-template-loader!./node_modules/angular-router-loader/src!./ClientApp/app/settings/sonarr/sonarr.component.ts","module.exports = \"\\n<settings-menu></settings-menu>\\n<div *ngIf=\\\"form\\\">\\n    <fieldset>\\n        <legend>Sonarr Settings</legend>\\n        <div style=\\\"float: right;\\\">\\n            <span style=\\\"vertical-align: top;\\\">Advanced</span>\\n            <p-inputSwitch id=\\\"customInputSwitch\\\" [(ngModel)]=\\\"advanced\\\"></p-inputSwitch>\\n        </div>\\n        <form novalidate [formGroup]=\\\"form\\\" (ngSubmit)=\\\"onSubmit(form)\\\" style=\\\"padding-top:5%;\\\">\\n\\n            <div class=\\\"col-md-6\\\">\\n                <div class=\\\"form-group\\\">\\n                    <div class=\\\"checkbox\\\">\\n                        <input type=\\\"checkbox\\\" id=\\\"enable\\\" formControlName=\\\"enabled\\\">\\n                        <label for=\\\"enable\\\">Enable</label>\\n                    </div>\\n                </div>\\n\\n                <div class=\\\"form-group\\\">\\n                    <label for=\\\"Ip\\\" class=\\\"control-label\\\">Sonarr Hostname or IP</label>\\n                    \\n                        <input type=\\\"text\\\" class=\\\"form-control form-control-custom \\\" formControlName=\\\"ip\\\" id=\\\"Ip\\\" name=\\\"Ip\\\" placeholder=\\\"localhost\\\" [ngClass]=\\\"{'form-error': form.get('ip').hasError('required')}\\\">\\n                        <small *ngIf=\\\"form.get('ip').hasError('required')\\\" class=\\\"error-text\\\">The IP/Hostname is required</small>\\n                </div>\\n\\n                <div class=\\\"form-group\\\">\\n                    <label for=\\\"portNumber\\\" class=\\\"control-label\\\">Port</label>\\n\\n                        <input type=\\\"text\\\" class=\\\"form-control form-control-custom \\\" [ngClass]=\\\"{'form-error': form.get('port').hasError('required')}\\\" formControlName=\\\"port\\\" id=\\\"portNumber\\\" name=\\\"Port\\\" placeholder=\\\"Port Number\\\">\\n                        <small *ngIf=\\\"form.get('port').hasError('required')\\\" class=\\\"error-text\\\">The Port is required</small>\\n                </div>\\n\\n\\n                <div class=\\\"form-group\\\">\\n                    <label for=\\\"ApiKey\\\" class=\\\"control-label\\\">Sonarr API Key</label>\\n                    \\n                        <input type=\\\"text\\\" class=\\\"form-control form-control-custom \\\" [ngClass]=\\\"{'form-error': form.get('apiKey').hasError('required')}\\\" formControlName=\\\"apiKey\\\" id=\\\"ApiKey\\\" name=\\\"ApiKey\\\">\\n                        <small *ngIf=\\\"form.get('apiKey').hasError('required')\\\" class=\\\"error-text\\\">The API Key is required</small>\\n                </div>\\n                <div class=\\\"form-group\\\">\\n                    <div class=\\\"checkbox\\\">\\n\\n                        <input type=\\\"checkbox\\\" id=\\\"Ssl\\\" name=\\\"Ssl\\\" formControlName=\\\"ssl\\\"><label for=\\\"Ssl\\\">SSL</label>\\n\\n                    </div>\\n                </div>\\n                <div class=\\\"form-group\\\">\\n                    <label for=\\\"SubDir\\\" class=\\\"control-label\\\">Sonarr Base Url</label>\\n                    <div>\\n                        <input type=\\\"text\\\" class=\\\"form-control form-control-custom\\\" formControlName=\\\"subDir\\\" id=\\\"SubDir\\\" name=\\\"SubDir\\\">\\n                    </div>\\n                </div>\\n            </div>\\n            <div class=\\\"col-md-6\\\">\\n                <div class=\\\"form-group\\\">\\n                    <div>\\n                        <button type=\\\"button\\\" (click)=\\\"getProfiles(form)\\\" class=\\\"btn btn-primary-outline\\\">Get Quality Profiles <span *ngIf=\\\"profilesRunning\\\" class=\\\"fa fa-spinner fa-spin\\\"></span></button>\\n                    </div>\\n                </div>\\n                <div class=\\\"form-group\\\">\\n                    <label for=\\\"select\\\" class=\\\"control-label\\\">Quality Profiles</label>\\n                    <div id=\\\"profiles\\\">\\n                        <select class=\\\"form-control form-control-custom\\\"  [ngClass]=\\\"{'form-error': form.get('qualityProfile').hasError('required')}\\\" id=\\\"select\\\" formControlName=\\\"qualityProfile\\\">\\n                            <option *ngFor=\\\"let quality of qualities\\\" value=\\\"{{quality.id}}\\\" >{{quality.name}}</option>\\n                        </select>\\n                    </div>\\n                    <small *ngIf=\\\"form.get('qualityProfile').hasError('required')\\\" class=\\\"error-text\\\">A Default Quality Profile is required</small>\\n                    \\n                </div>\\n\\n                <div class=\\\"form-group\\\">\\n                    <div>\\n                        <button type=\\\"button\\\" (click)=\\\"getRootFolders(form)\\\" class=\\\"btn btn-primary-outline\\\">Get Root Folders <span *ngIf=\\\"rootFoldersRunning\\\" class=\\\"fa fa-spinner fa-spin\\\"></span></button>\\n                    </div>\\n\\n                </div>\\n                <div class=\\\"form-group\\\">\\n                    <label for=\\\"rootFolders\\\" class=\\\"control-label\\\">Default Root Folders</label>\\n                    <div id=\\\"rootFolders\\\">\\n                        <select class=\\\"form-control form-control-custom\\\" formControlName=\\\"rootPath\\\" [ngClass]=\\\"{'form-error': form.get('rootPath').hasError('required')}\\\">\\n                            <option *ngFor=\\\"let folder of rootFolders\\\" value=\\\"{{folder.id}}\\\">{{folder.path}}</option>\\n                        </select>\\n                    </div>\\n                    <small *ngIf=\\\"form.get('rootPath').hasError('required')\\\" class=\\\"error-text\\\">A Default Root Path is required</small>\\n                    \\n                </div>\\n\\n\\n                <div class=\\\"form-group\\\">\\n                    <div class=\\\"checkbox\\\">\\n                        <input type=\\\"checkbox\\\" id=\\\"SeasonFolders\\\" name=\\\"SeasonFolders\\\" formControlName=\\\"seasonFolders\\\">\\n                        <label for=\\\"SeasonFolders\\\">Enable season folders</label>\\n                    </div>\\n                    <label>Enabled Season Folders to organize seasons into individual folders within a show.</label>\\n                </div>\\n\\n                <div class=\\\"form-group\\\" *ngIf=\\\"advanced\\\" style=\\\"color:#ff761b\\\">\\n                    <div class=\\\"checkbox\\\">\\n                        <input type=\\\"checkbox\\\" id=\\\"addOnly\\\" formControlName=\\\"addOnly\\\">\\n                        <label for=\\\"addOnly\\\">Do not search</label>\\n                    </div>\\n                </div>\\n\\n                <div class=\\\"form-group\\\">\\n                    <div>\\n                        <button type=\\\"button\\\" (click)=\\\"test(form)\\\" class=\\\"btn btn-primary-outline\\\">Test Connectivity <span id=\\\"spinner\\\"> </span></button>\\n                    </div>\\n                </div>\\n\\n\\n                <div class=\\\"form-group\\\">\\n                    <div>\\n                        <button type=\\\"submit\\\" class=\\\"btn btn-primary-outline \\\">Submit</button>\\n                    </div>\\n                </div>\\n            </div>\\n        </form>\\n    </fieldset>\\n</div>\\n\";\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./ClientApp/app/settings/sonarr/sonarr.component.html\n// module id = 242\n// module chunks = 0","import { Component, OnInit } from \"@angular/core\";\nimport { FormBuilder, FormGroup } from \"@angular/forms\";\n\nimport { NotificationService } from \"../../services\";\nimport { JobService, SettingsService } from \"../../services\";\n\n@Component({\n    template: require('./update.component.html'),\n})\nexport class UpdateComponent implements OnInit {\n\n    public form: FormGroup;\n    public updateAvailable = false;\n    public enableUpdateButton = false;\n    public isWindows = false;\n    public get useScript() {\n        const control = this.form.get(\"useScript\");\n        return control!.value!;\n    }\n\n    constructor(private settingsService: SettingsService,\n                private notificationService: NotificationService,\n                private updateService: JobService,\n                private fb: FormBuilder) { }\n\n    public ngOnInit() {\n        this.settingsService.getUpdateSettings()\n            .subscribe(x => {\n                this.form = this.fb.group({\n                    autoUpdateEnabled: [x.autoUpdateEnabled],\n                    username: [x.username],\n                    password: [x.password],\n                    processName: [x.processName],\n                    useScript: [x.useScript],\n                    scriptLocation: [x.scriptLocation],\n                    windowsService: [x.windowsService],\n                    windowsServiceName: [x.windowsServiceName],\n                });\n                this.isWindows = x.isWindows;\n                this.enableUpdateButton = x.autoUpdateEnabled;\n            });\n    }\n\n    public checkForUpdate() {\n        this.updateService.checkForNewUpdate().subscribe(x => {\n            if (x === true) {\n                this.updateAvailable = true;\n                this.notificationService.success(\"There is a new update available\");\n            } else {\n                this.notificationService.success(\"You are on the latest version!\");\n            }\n        });\n    }\n\n    public update() {\n        this.updateService.forceUpdate().subscribe();\n        this.notificationService.success(\"We triggered the update job\");\n    }\n\n    public onSubmit(form: FormGroup) {\n        if (form.invalid) {\n            this.notificationService.error(\"Please check your entered values\");\n            return;\n        }\n        this.enableUpdateButton = form.value.autoUpdateEnabled;\n        this.settingsService.saveUpdateSettings(form.value)\n            .subscribe(x => {\n                if (x) {\n                    this.notificationService.success(\"Successfully saved Update settings\");\n                } else {\n                    this.notificationService.error(\"There was an error when saving the Update settings\");\n                }\n            });\n    }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./node_modules/angular2-template-loader!./node_modules/angular-router-loader/src!./ClientApp/app/settings/update/update.component.ts","module.exports = \"\\n<settings-menu></settings-menu>\\n<wiki [url]=\\\"'https://github.com/tidusjar/Ombi/wiki/Update-Settings'\\\"></wiki>\\n<div *ngIf=\\\"form\\\">\\n    <fieldset>\\n        <legend>Update Settings</legend>\\n        <div class=\\\"form-group\\\"  style=\\\"float: right\\\">\\n            <div *ngIf=\\\"updateAvailable\\\">\\n                <button (click)=\\\"update()\\\" [disabled]=\\\"!enableUpdateButton\\\" class=\\\"btn btn-success-outline\\\">Update</button>\\n            </div>\\n            <div *ngIf=\\\"!updateAvailable\\\">\\n                <button (click)=\\\"checkForUpdate()\\\" class=\\\"btn btn-primary-outline\\\">Check For Update</button>\\n            </div>\\n        </div>\\n        <form novalidate [formGroup]=\\\"form\\\" (ngSubmit)=\\\"onSubmit(form)\\\" style=\\\"padding-top:5%;\\\">\\n            <div class=\\\"col-md-6\\\">\\n                <div class=\\\"form-group\\\">\\n                    <div class=\\\"checkbox\\\">\\n                        <input type=\\\"checkbox\\\" id=\\\"autoUpdateEnabled\\\" formControlName=\\\"autoUpdateEnabled\\\">\\n                        <label for=\\\"autoUpdateEnabled\\\">Enable Automatic Update</label>\\n                    </div>\\n                </div>\\n\\n                <div class=\\\"form-group\\\" *ngIf=\\\"isWindows\\\">\\n                    <div class=\\\"checkbox\\\">\\n                        <input type=\\\"checkbox\\\" id=\\\"windowsService\\\" formControlName=\\\"windowsService\\\">\\n                        <label for=\\\"windowsService\\\">Running as a Windows Service</label>\\n                    </div>\\n                </div>\\n                \\n                <div class=\\\"form-group\\\" *ngIf=\\\"!form.value.windowsService\\\">\\n                    <div class=\\\"checkbox\\\">\\n                        <input type=\\\"checkbox\\\" id=\\\"useScript\\\" formControlName=\\\"useScript\\\">\\n                        <label for=\\\"useScript\\\">Use your own updater script</label>\\n                    </div>\\n                </div>\\n                \\n                \\n                <div *ngIf=\\\"form.value.windowsService\\\">\\n                    <div class=\\\"form-group\\\">\\n                        <label for=\\\"windowsServiceName\\\" class=\\\"control-label\\\">Windows Service Name</label>\\n                        <input type=\\\"text\\\" class=\\\"form-control form-control-custom \\\" id=\\\"windowsServiceName\\\" name=\\\"windowsServiceName\\\" formControlName=\\\"windowsServiceName\\\">\\n                    </div>\\n                </div>\\n\\n\\n                <div [hidden]=\\\"!useScript || form.value.windowsService\\\">\\n                    <small>For information how to use this, please press the wiki button at the top of the page</small>\\n                    <div class=\\\"form-group\\\">\\n                        <label for=\\\"scriptLocation\\\" class=\\\"control-label\\\">Script Path</label>\\n                        <input type=\\\"text\\\" class=\\\"form-control form-control-custom \\\" id=\\\"scriptLocation\\\" name=\\\"scriptLocation\\\" formControlName=\\\"scriptLocation\\\">\\n                    </div>\\n                </div>\\n\\n                \\n                <div [hidden]=\\\"useScript || form.value.windowsService\\\">\\n                <small >By default the process name is Ombi, but this could be different for your system. We need to know the process name so we can kill that process to update the files.</small>\\n                    <div class=\\\"form-group\\\">\\n                        <label for=\\\"processName\\\">Ombi Process Name</label>\\n                        <input type=\\\"text\\\" id=\\\"processName\\\" class=\\\"form-control form-control-custom\\\" placeholder=\\\"Ombi\\\" formControlName=\\\"processName\\\">\\n                    </div>\\n                </div>\\n                \\n                <div class=\\\"form-group\\\">\\n                    <div>\\n                        <button type=\\\"submit\\\" class=\\\"btn btn-primary-outline \\\">Submit</button>\\n                    </div>\\n                </div>\\n            </div>\\n            <div class=\\\"col-md-6\\\" [hidden]=\\\"useScript\\\" *ngIf=\\\"isWindows\\\">\\n                <small>If you are getting any permissions issues, you can specify a user for the update process to run under.</small>\\n\\n                <div class=\\\"form-group\\\">\\n                    <label for=\\\"username\\\" class=\\\"control-label\\\">Username</label>\\n                    <input type=\\\"text\\\" class=\\\"form-control form-control-custom \\\" id=\\\"username\\\" name=\\\"username\\\" formControlName=\\\"username\\\">\\n                </div>\\n\\n                <div class=\\\"form-group\\\">\\n                    <label for=\\\"password\\\">Password</label>\\n                    <input type=\\\"password\\\" id=\\\"password\\\" class=\\\"form-control form-control-custom\\\" formControlName=\\\"password\\\">\\n                </div>\\n            </div>\\n        </form>\\n    </fieldset>\\n</div>\\n\";\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./ClientApp/app/settings/update/update.component.html\n// module id = 244\n// module chunks = 0","import { Component, OnInit } from \"@angular/core\";\n\nimport { ICheckbox, IUserManagementSettings } from \"../../interfaces\";\nimport { IUsersModel } from \"../../interfaces\";\nimport { EmbyService, IdentityService, JobService, NotificationService, PlexService, SettingsService } from \"../../services\";\n\n@Component({\n    template: require('./usermanagement.component.html'),\n})\nexport class UserManagementComponent implements OnInit {\n\n    public plexEnabled: boolean;\n    public embyEnabled: boolean;\n    public settings: IUserManagementSettings;\n    public claims: ICheckbox[];\n\n    public plexUsers: IUsersModel[];\n    public filteredPlexUsers: IUsersModel[];\n    public bannedPlexUsers: IUsersModel[] = [];\n\n    public embyUsers: IUsersModel[];\n    public filteredEmbyUsers: IUsersModel[];\n    public bannedEmbyUsers: IUsersModel[] = [];\n\n    public enableImportButton = false;\n\n    constructor(private readonly settingsService: SettingsService,\n                private readonly notificationService: NotificationService,\n                private readonly identityService: IdentityService,\n                private readonly plexService: PlexService,\n                private readonly jobService: JobService,\n                private readonly embyService: EmbyService) {\n    }\n\n    public ngOnInit(): void {\n        this.settingsService.getUserManagementSettings().subscribe(x => {\n            this.settings = x;\n\n            if(x.importEmbyUsers || x.importPlexUsers) {\n                this.enableImportButton = true;\n            }\n\n            this.plexService.getFriends().subscribe(f => {\n                this.plexUsers = f;\n                this.plexUsers.forEach((plex) => {\n                    const isExcluded = this.settings.bannedPlexUserIds.some((val) => {\n                        return plex.id === val;\n                    });\n                    if (isExcluded) {\n                        this.bannedPlexUsers.push(plex);\n                    }\n                });\n            });\n\n            this.embyService.getUsers().subscribe(f => {\n                this.embyUsers = f;\n                this.embyUsers.forEach((emby) => {\n                    const isExcluded = this.settings.bannedPlexUserIds.some((val) => {\n                        return emby.id === val;\n                    });\n                    if (isExcluded) {\n                        this.bannedEmbyUsers.push(emby);\n                    }\n                });\n            });\n\n            this.identityService.getAllAvailableClaims().subscribe(c => {\n\n                this.claims = c;\n                this.claims.forEach((claim) => {\n                    if (this.settings.defaultRoles) {\n                        const hasClaim = this.settings.defaultRoles.some((item) => {\n                            return item === claim.value;\n                        });\n                        claim.enabled = hasClaim;\n                    }\n                });\n            });\n        });\n        this.settingsService.getPlex().subscribe(x => this.plexEnabled = x.enable);\n        this.settingsService.getEmby().subscribe(x => this.embyEnabled = x.enable);\n    }\n\n    public submit(): void {\n        const enabledClaims = this.claims.filter((claim) => {\n            return claim.enabled;\n        });\n        this.settings.defaultRoles = enabledClaims.map((claim) => claim.value);\n        this.settings.bannedPlexUserIds = this.bannedPlexUsers.map((u) => u.id);\n        this.settings.bannedEmbyUserIds = this.bannedEmbyUsers.map((u) => u.id);\n        \n        if(this.settings.importEmbyUsers || this.settings.importPlexUsers) {\n            this.enableImportButton = true;\n        }\n\n        this.settingsService.saveUserManagementSettings(this.settings).subscribe(x => {\n            if (x === true) {\n                this.notificationService.success(\"Successfully saved the User Management Settings\");\n            } else {\n                this.notificationService.success( \"There was an error when saving the Ombi settings\");\n            }\n        });\n    }\n\n    public filterPlexList(event: any) {\n        this.filteredPlexUsers = this.filter(event.query, this.plexUsers);\n    }\n\n    public filterEmbyList(event: any) {\n        this.filteredEmbyUsers = this.filter(event.query, this.embyUsers);\n    }\n\n    public runImporter(): void {\n        \n        this.jobService.runPlexImporter().subscribe();\n        this.jobService.runEmbyImporter().subscribe();\n    }\n\n    private filter(query: string, users: IUsersModel[]): IUsersModel[] {\n        return users.filter((val) => {\n            return val.username.toLowerCase().indexOf(query.toLowerCase()) === 0;\n        });\n    }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./node_modules/angular2-template-loader!./node_modules/angular-router-loader/src!./ClientApp/app/settings/usermanagement/usermanagement.component.ts","module.exports = \"<settings-menu></settings-menu>\\n\\n<wiki [url]=\\\"'https://github.com/tidusjar/Ombi/wiki/User-Importer-Settings'\\\"></wiki>\\n<fieldset *ngIf=\\\"settings\\\">\\n    <legend>User Importer Settings</legend>\\n\\n    <div class=\\\"col-md-6\\\">\\n        <div *ngIf=\\\"plexEnabled\\\">\\n\\n            <div class=\\\"form-group\\\">\\n                <div class=\\\"checkbox\\\">\\n                    <input type=\\\"checkbox\\\" id=\\\"importPlex\\\" [(ngModel)]=\\\"settings.importPlexUsers\\\">\\n                    <label for=\\\"importPlex\\\">Import Plex Users</label>\\n                </div>\\n            </div>\\n            \\n            <div class=\\\"form-group\\\">\\n                <div class=\\\"checkbox\\\">\\n                    <input type=\\\"checkbox\\\" id=\\\"importAdmin\\\" [(ngModel)]=\\\"settings.importPlexAdmin\\\">\\n                    <label for=\\\"importAdmin\\\">Import Plex Admin</label>\\n                </div>\\n            </div>\\n            <div *ngIf=\\\"plexUsers\\\">\\n                <p>Plex Users exclude from Import</p>\\n                \\n                <p-autoComplete [(ngModel)]=\\\"bannedPlexUsers\\\" [suggestions]=\\\"filteredPlexUsers\\\" [multiple]=\\\"true\\\" field=\\\"username\\\" (completeMethod)=\\\"filterPlexList($event)\\\"></p-autoComplete>\\n            </div>\\n        </div>\\n\\n        <div *ngIf=\\\"embyEnabled\\\">\\n\\n\\n            <div class=\\\"form-group\\\">\\n                <div class=\\\"checkbox\\\">\\n                    <input type=\\\"checkbox\\\" id=\\\"importEmbyUsers\\\" [(ngModel)]=\\\"settings.importEmbyUsers\\\">\\n                    <label for=\\\"importEmbyUsers\\\">Import Emby Users</label>\\n                </div>\\n            </div>\\n            \\n            <div *ngIf=\\\"embyUsers\\\">\\n                <p>Emby Users exclude from Import</p>\\n                \\n                <p-autoComplete [(ngModel)]=\\\"bannedEmbyUsers\\\" [suggestions]=\\\"filteredEmbyUsers\\\" [multiple]=\\\"true\\\" field=\\\"username\\\" (completeMethod)=\\\"filterEmbyList($event)\\\"></p-autoComplete>\\n            </div>\\n\\n        </div>\\n    </div>\\n    <div class=\\\"col-md-6\\\">\\n        <h4>Default Roles</h4>\\n\\n        <div *ngFor=\\\"let c of claims\\\">\\n            <div class=\\\"form-group\\\">\\n                <div class=\\\"checkbox\\\">\\n                    <input type=\\\"checkbox\\\" [(ngModel)]=\\\"c.enabled\\\" [value]=\\\"c.value\\\" id=\\\"create{{c.value}}\\\" [attr.name]=\\\"'create' + c.value\\\" ng-checked=\\\"c.enabled\\\">\\n                    <label for=\\\"create{{c.value}}\\\">{{c.value | humanize}}</label>\\n                </div>\\n            </div>\\n        </div>\\n\\n        <h4>Default Request Limits</h4>\\n        <div class=\\\"form-group\\\">\\n            <label for=\\\"movieRequestLimit\\\" class=\\\"control-label\\\">Movie Request Limit</label>\\n            <div>\\n                <input type=\\\"text\\\" [(ngModel)]=\\\"settings.movieRequestLimit\\\" class=\\\"form-control form-small form-control-custom \\\" id=\\\"movieRequestLimit\\\" name=\\\"movieRequestLimit\\\" value=\\\"{{settings?.movieRequestLimit}}\\\">\\n            </div>\\n        </div>\\n\\n        <div class=\\\"form-group\\\">\\n            <label for=\\\"episodeRequestLimit\\\" class=\\\"control-label\\\">Episode Request Limit</label>\\n            <div>\\n                <input type=\\\"text\\\" [(ngModel)]=\\\"settings.episodeRequestLimit\\\" class=\\\"form-control form-small form-control-custom \\\" id=\\\"episodeRequestLimit\\\" name=\\\"episodeRequestLimit\\\" value=\\\"{{settings?.episodeRequestLimit}}\\\">\\n            </div>\\n        </div>\\n\\n    </div>\\n    <div class=\\\"col-md-6\\\">\\n        <div class=\\\"form-group\\\">\\n            <button type=\\\"submit\\\" id=\\\"save\\\" (click)=\\\"submit()\\\" class=\\\"btn btn-primary-outline\\\">Submit</button>\\n            <button type=\\\"button\\\" [disabled]=\\\"!enableImportButton\\\" (click)=\\\"runImporter()\\\" class=\\\"btn btn-info-outline\\\">Run Importer</button>\\n        </div>     \\n        <div class=\\\"form-group\\\">\\n        </div>\\n    </div>\\n</fieldset>\";\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./ClientApp/app/settings/usermanagement/usermanagement.component.html\n// module id = 246\n// module chunks = 0","import { Component, Input } from \"@angular/core\";\n\n@Component({\n    selector:\"wiki\",\n    template: require('./wiki.component.html'),\n})\nexport class WikiComponent {\n    @Input() public url: string;\n    @Input() public text: string;\n}\n\n\n\n// WEBPACK FOOTER //\n// ./node_modules/angular2-template-loader!./node_modules/angular-router-loader/src!./ClientApp/app/settings/wiki.component.ts","module.exports = \"<div class=\\\"col-md-12\\\">\\n\\n    <div *ngIf=\\\"!text\\\" class=\\\"col-md-1 col-md-push-11\\\">\\n        <a href=\\\"{{url}}\\\" target=\\\"_blank\\\" class=\\\"btn btn-sm btn-info-outline\\\">\\n            <span >Wiki</span>\\n        </a>\\n    </div>\\n\\n    <div  *ngIf=\\\"text\\\" class=\\\"col-md-1 col-md-push-9\\\">\\n            <a href=\\\"{{url}}\\\" target=\\\"_blank\\\" class=\\\"btn btn-sm btn-info-outline\\\">\\n                <span>{{text}}</span>\\n            </a>\\n        </div>\\n\\n</div>\";\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./ClientApp/app/settings/wiki.component.html\n// module id = 248\n// module chunks = 0","import { Component } from \"@angular/core\";\n@Component({\n    selector: \"settings-menu\",\n    template: require('./settingsmenu.component.html'),\n})\nexport class SettingsMenuComponent {\n    public ignore(event: any): void {\n        event.preventDefault();\n    }\n }\n\n\n\n// WEBPACK FOOTER //\n// ./node_modules/angular2-template-loader!./node_modules/angular-router-loader/src!./ClientApp/app/settings/settingsmenu.component.ts","module.exports = \"<ul class=\\\"nav nav-tabs\\\">\\n    \\n    <li [routerLinkActive]=\\\"['active']\\\"><a [routerLink]=\\\"['/Settings/Ombi']\\\">Ombi</a></li>\\n\\n    <li class=\\\"dropdown\\\" [routerLinkActive]=\\\"['active']\\\">\\n        <a href=\\\"ignore($event)\\\" class=\\\"dropdown-toggle\\\" data-toggle=\\\"dropdown\\\">\\n            <i class=\\\"fa fa-cogs\\\" aria-hidden=\\\"true\\\"></i> Configuration <span class=\\\"caret\\\"></span>\\n        </a>\\n        <ul class=\\\"dropdown-menu\\\">\\n            <li [routerLinkActive]=\\\"['active']\\\"><a [routerLink]=\\\"['/Settings/Customization']\\\">Customization</a></li>\\n            <li [routerLinkActive]=\\\"['active']\\\"><a [routerLink]=\\\"['/Settings/LandingPage']\\\">Landing Page</a></li>\\n            <li [routerLinkActive]=\\\"['active']\\\"><a [routerLink]=\\\"['/Settings/Issues']\\\">Issues</a></li>\\n            <li [routerLinkActive]=\\\"['active']\\\"><a [routerLink]=\\\"['/Settings/UserManagement']\\\">User Importer</a></li>\\n            <li [routerLinkActive]=\\\"['active']\\\"><a [routerLink]=\\\"['/Settings/Authentication']\\\">Authentication</a></li>\\n        </ul>\\n    </li>\\n\\n    <li class=\\\"dropdown\\\" [routerLinkActive]=\\\"['active']\\\">\\n        <a href=\\\"ignore($event)\\\" class=\\\"dropdown-toggle\\\" data-toggle=\\\"dropdown\\\">\\n            <i class=\\\"fa fa-server\\\" aria-hidden=\\\"true\\\"></i> Media Server <span class=\\\"caret\\\"></span>\\n        </a>\\n        <ul class=\\\"dropdown-menu\\\">\\n            <li [routerLinkActive]=\\\"['active']\\\"><a [routerLink]=\\\"['/Settings/Plex']\\\">Plex</a></li>\\n            <li [routerLinkActive]=\\\"['active']\\\"><a [routerLink]=\\\"['/Settings/Emby']\\\">Emby</a></li>\\n        </ul>\\n    </li>\\n\\n    <li class=\\\"dropdown\\\" [routerLinkActive]=\\\"['active']\\\">\\n        <a href=\\\"ignore($event)\\\" class=\\\"dropdown-toggle\\\" data-toggle=\\\"dropdown\\\">\\n            <i class=\\\"fa fa-television\\\" aria-hidden=\\\"true\\\"></i> TV <span class=\\\"caret\\\"></span>\\n        </a>\\n        <ul class=\\\"dropdown-menu\\\">\\n            <li [routerLinkActive]=\\\"['active']\\\"><a [routerLink]=\\\"['/Settings/Sonarr']\\\">Sonarr</a></li>\\n            <li [routerLinkActive]=\\\"['active']\\\"><a [routerLink]=\\\"['/Settings/DogNzb']\\\">DogNzb</a></li>\\n            <li [routerLinkActive]=\\\"['active']\\\"><a [routerLink]=\\\"['/Settings/SickRage']\\\">SickRage</a></li>\\n        </ul>\\n    </li>\\n\\n    <li class=\\\"dropdown\\\" [routerLinkActive]=\\\"['active']\\\">\\n        <a href=\\\"ignore($event)\\\" class=\\\"dropdown-toggle\\\" data-toggle=\\\"dropdown\\\">\\n            <i class=\\\"fa fa-film\\\" aria-hidden=\\\"true\\\"></i> Movies <span class=\\\"caret\\\"></span>\\n        </a>\\n        <ul class=\\\"dropdown-menu\\\">\\n            <li [routerLinkActive]=\\\"['active']\\\"><a [routerLink]=\\\"['/Settings/CouchPotato']\\\">CouchPotato</a></li>\\n            <li [routerLinkActive]=\\\"['active']\\\"><a [routerLink]=\\\"['/Settings/DogNzb']\\\">DogNzb</a></li>\\n            <li [routerLinkActive]=\\\"['active']\\\"><a [routerLink]=\\\"['/Settings/Radarr']\\\">Radarr</a></li>\\n            <!--<li [routerLinkActive]=\\\"['active']\\\"><a [routerLink]=\\\"['/Settings/Watcher']\\\">Watcher</a></li>-->\\n        </ul>\\n    </li>\\n\\n\\n    <li class=\\\"dropdown\\\" [routerLinkActive]=\\\"['active']\\\">\\n        <a href=\\\"ignore($event)\\\" class=\\\"dropdown-toggle\\\" data-toggle=\\\"dropdown\\\">\\n            <i class=\\\"fa fa-bell-o\\\" aria-hidden=\\\"true\\\"></i> Notifications <span class=\\\"caret\\\"></span>\\n        </a>\\n        <ul class=\\\"dropdown-menu\\\">\\n            <li [routerLinkActive]=\\\"['active']\\\"><a [routerLink]=\\\"['/Settings/Email']\\\">Email</a></li>\\n            <!--<li [routerLinkActive]=\\\"['active']\\\"><a [routerLink]=\\\"['/Settings/Newsletter']\\\">Newsletter</a></li>-->\\n            <li [routerLinkActive]=\\\"['active']\\\"><a [routerLink]=\\\"['/Settings/Discord']\\\">Discord</a></li>\\n            <li [routerLinkActive]=\\\"['active']\\\"><a [routerLink]=\\\"['/Settings/Slack']\\\">Slack</a></li>\\n            <li [routerLinkActive]=\\\"['active']\\\"><a [routerLink]=\\\"['/Settings/Pushbullet']\\\">Pushbullet</a></li>\\n            <li [routerLinkActive]=\\\"['active']\\\"><a [routerLink]=\\\"['/Settings/Pushover']\\\">Pushover</a></li>\\n            <li [routerLinkActive]=\\\"['active']\\\"><a [routerLink]=\\\"['/Settings/Mattermost']\\\">Mattermost</a></li>\\n            <li [routerLinkActive]=\\\"['active']\\\"><a [routerLink]=\\\"['/Settings/Telegram']\\\">Telegram</a></li>\\n        </ul>\\n    </li>\\n\\n\\n    <li class=\\\"dropdown\\\" [routerLinkActive]=\\\"['active']\\\">\\n        <a href=\\\"ignore($event)\\\" class=\\\"dropdown-toggle\\\" data-toggle=\\\"dropdown\\\">\\n            <i class=\\\"fa fa-tachometer\\\" aria-hidden=\\\"true\\\"></i> System <span class=\\\"caret\\\"></span>\\n        </a>\\n        <ul class=\\\"dropdown-menu\\\">\\n            <li [routerLinkActive]=\\\"['active']\\\"><a [routerLink]=\\\"['/Settings/About']\\\">About</a></li>\\n            <li [routerLinkActive]=\\\"['active']\\\"><a [routerLink]=\\\"['/Settings/Update']\\\">Update</a></li>\\n            <li [routerLinkActive]=\\\"['active']\\\"><a [routerLink]=\\\"['/Settings/Jobs']\\\">Jobs</a></li>\\n            <!-- <li [routerLinkActive]=\\\"['active']\\\"><a [routerLink]=\\\"['/Settings/Logs']\\\">Logs (Not available)</a></li>\\n            <li [routerLinkActive]=\\\"['active']\\\"><a [routerLink]=\\\"['/Settings/ScheduledJobs']\\\">Scheduled Jobs (Not available)</a></li> -->\\n        </ul>\\n    </li>\\n\\n</ul>\\n\\n<hr/>\\n\";\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./ClientApp/app/settings/settingsmenu.component.html\n// module id = 250\n// module chunks = 0"],"sourceRoot":""}