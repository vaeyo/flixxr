{"version":3,"sources":["webpack:///./ClientApp/app/requests/requests.module.ts","webpack:///./ClientApp/app/interfaces/index.ts","webpack:///./ClientApp/app/interfaces/INotificationSettings.ts","webpack:///./ClientApp/app/interfaces/IRequestModel.ts","webpack:///./ClientApp/app/interfaces/IUser.ts","webpack:///./ClientApp/app/interfaces/IIssues.ts","webpack:///delegated ./node_modules/rxjs/add/operator/debounceTime.js from dll-reference vendor_a449fdf94c391aac3fe0","webpack:///delegated ./node_modules/rxjs/add/operator/distinctUntilChanged.js from dll-reference vendor_a449fdf94c391aac3fe0","webpack:///./ClientApp/app/shared/shared.module.ts","webpack:///./ClientApp/app/shared/issues-report.component.ts","webpack:///./ClientApp/app/shared/issues-report.component.html","webpack:///./ClientApp/app/requests/tvrequests.component.scss?98c9","webpack:///./ClientApp/app/requests/tvrequests.component.scss","webpack:///./node_modules/ngx-infinite-scroll/modules/ngx-infinite-scroll.es5.js","webpack:///delegated ./node_modules/rxjs/add/observable/fromEvent.js from dll-reference vendor_a449fdf94c391aac3fe0","webpack:///delegated ./node_modules/rxjs/add/observable/of.js from dll-reference vendor_a449fdf94c391aac3fe0","webpack:///delegated ./node_modules/rxjs/add/operator/filter.js from dll-reference vendor_a449fdf94c391aac3fe0","webpack:///delegated ./node_modules/rxjs/add/operator/mergeMap.js from dll-reference vendor_a449fdf94c391aac3fe0","webpack:///delegated ./node_modules/rxjs/add/operator/sampleTime.js from dll-reference vendor_a449fdf94c391aac3fe0","webpack:///delegated ./node_modules/rxjs/Observable.js from dll-reference vendor_a449fdf94c391aac3fe0","webpack:///./ClientApp/app/requests/movierequests.component.ts","webpack:///./ClientApp/app/requests/movierequests.component.html","webpack:///./ClientApp/app/requests/request.component.ts","webpack:///./ClientApp/app/requests/request.component.html","webpack:///./ClientApp/app/requests/tvrequest-children.component.ts","webpack:///./ClientApp/app/requests/tvrequest-children.component.html","webpack:///./ClientApp/app/requests/tvrequests.component.ts","webpack:///./ClientApp/app/requests/tvrequests.component.html"],"names":["core_1","__webpack_require__","router_1","ng_bootstrap_1","ngx_infinite_scroll_1","primeng_1","movierequests_component_1","request_component_1","tvrequest_children_component_1","tvrequests_component_1","primeng_2","services_1","auth_guard_1","shared_module_1","routes","path","component","RequestComponent","canActivate","AuthGuard","TvRequestChildrenComponent","RequestsModule","__decorate","NgModule","imports","RouterModule","forChild","NgbModule","forRoot","InfiniteScrollModule","ButtonModule","DialogModule","TreeTableModule","SharedModule","SidebarModule","declarations","MovieRequestsComponent","TvRequestsComponent","exports","providers","IdentityService","RequestService","RadarrService","__export","NotificationAgent","NotificationType","RequestType","FilterType","UserType","IssueStatus","module","common_1","forms_1","core_2","issues_report_component_1","IssuesReportComponent","FormsModule","CommonModule","TranslateModule","interfaces_1","issueService","notification","this","visibleChange","EventEmitter","submitted","issue","subject","description","issueCategory","value","id","status","Pending","resolvedDate","undefined","issueCategoryId","comments","requestId","requestType","movie","title","providerId","userReported","Object","defineProperty","prototype","submit","_this","tvShow","createIssue","subscribe","x","success","hide","visible","emit","Input","Output","Component","selector","template","IssuesService","NotificationService","result","toString","push","i","resolveContainerElement","scrollWindow","defaultElement","fromRoot","hasWindow","window","hasOwnProperty","containerIsString","container","customRoot","document","querySelector","findElement","nativeElement","AxisResolver","vertical","clientHeightKey","offsetHeightKey","scrollHeightKey","pageYOffsetKey","offsetTopKey","scrollTopKey","topKey","createResolver","_a","isWindow","windowElement","resolver","assign","createResolverWithContainer","axis","getDocumentElement","isContainerWindow","documentElement","calculatePoints","element","_b","height","extractHeightPropKeys","getElementHeight","scrolledUntilNow","getElementPageYOffset","nativeElementHeight","totalToScroll","elem","getBoundingClientRect","getElementOffsetTop","calculatePointsForWindow","calculatePointsForElement","isNaN","pageYOffset","scrollTop","offsetTop","ownerDocument","defaultView","createScroller","config","containerElement","scrollContainer","horizontal","some","obj","call","includes","scrollPosition","last","options","__WEBPACK_IMPORTED_MODULE_6_rxjs_Observable__","fromEvent","sampleTime","throttleDuration","filter","filterBefore","mergeMap","ev","of","scrollHandler","attachScrollEvent","positionStats","distance","down","downDistance","up","upDistance","lastScrollPosition","isScrollingDown","isScrollingDownwards","shouldScroll","scrollingDown","remaining","containerBreakpoint","getScrollStats","shouldScroll$$1","scrollConfig","alwaysCallback","disable","position","lastPositionState","shouldTriggerEvents","callbacks","eventData","currentScrollPosition","triggerEvents","events","handleOnScroll","throttle","InfiniteScrollDirective","zone","scrolled","__WEBPACK_IMPORTED_MODULE_0__angular_core__","scrolledUp","infiniteScrollDistance","infiniteScrollUpDistance","infiniteScrollThrottle","infiniteScrollDisabled","infiniteScrollContainer","immediateCheck","ngAfterViewInit","setup","ngOnChanges","prop","firstChange","destroyScroller","runOutsideAngular","disposeScroller","event","run","ngOnDestroy","unsubscribe","decorators","type","args","ctorParameters","propDecorators","platform_browser_1","Subject_1","auth_service_1","requestService","auth","notificationService","radarrService","sanitizer","searchChanged","Subject","issuesBarVisible","filterType","debounceTime","distinctUntilChanged","searchText","searchMovieRequests","m","setOverrides","movieRequests","resetSearch","ngOnInit","amountToLoad","currentlyLoaded","loadInit","isAdmin","hasRole","availabilityFilter","None","statusFilter","loadMore","loadRequests","search","text","next","target","removeRequest","request","removeMovieRequest","removeRequestFromUi","changeAvailability","available","markMovieAvailable","warning","message","errorMessage","approved","markMovieUnavailable","approve","approveRequest","deny","denied","denyRequest","selectRootFolder","searchResult","rootFolderSelected","preventDefault","rootPathOverride","setOverride","updateRequest","selectQualityProfile","profileSelected","qualityOverride","reportIssue","catId","req","issueRequest","issueCategorySelected","issueProviderId","theMovieDbId","ignore","clearFilter","filterDisplay","filterAvailability","filterMovies","filterStatus","getMovieRequests","apply","updateMovieRequest","approveMovie","denyMovie","forEach","setBackground","getQualityProfilesFromSettings","c","radarrProfiles","setQualityOverrides","getRootFoldersFromSettings","radarrRootFolders","setRootFolderOverrides","key","index","indexOf","splice","requests","profile","p","length","qualityOverrideTitle","name","folder","rootPathOverrideTitle","backgroundPath","bypassSecurityTrustStyle","background","AuthService","DomSanitizer","issuesService","settingsService","showMovie","showTv","issuesEnabled","getCategories","issueCategories","getIssueSettings","enabled","selectMovieTab","selectTvTab","SettingsService","requestDeleted","deleteChild","seasonRequests","season","episodes","ep","markTvAvailable","markTvUnavailable","denyChild","approveChild","childRequests","image_service_1","imageService","showChildDialogue","searchTvRequestsTree","tvRequests","val","loadBackdrop","openClosestTab","el","toElement","relatedTarget","className","parentNode","_i","children","click","getTvRequestsTree","showChildren","selectedSeason","childRequestDeleted","childId","getTvBanner","data","styles","ImageService"],"mappings":"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","file":"1.js","sourcesContent":["import { NgModule } from \"@angular/core\";\nimport { RouterModule, Routes } from \"@angular/router\";\n\nimport { NgbModule } from \"@ng-bootstrap/ng-bootstrap\";\n\nimport { InfiniteScrollModule } from \"ngx-infinite-scroll\";\n\nimport { ButtonModule, DialogModule } from \"primeng/primeng\";\nimport { MovieRequestsComponent } from \"./movierequests.component\";\n// Request\nimport { RequestComponent } from \"./request.component\";\nimport { TvRequestChildrenComponent } from \"./tvrequest-children.component\";\nimport { TvRequestsComponent } from \"./tvrequests.component\";\n\nimport { SidebarModule, TreeTableModule } from \"primeng/primeng\";\n\nimport { IdentityService, RadarrService, RequestService } from \"../services\";\n\nimport { AuthGuard } from \"../auth/auth.guard\";\n\nimport { SharedModule } from \"../shared/shared.module\";\n\nconst routes: Routes = [\n    { path: \"\", component: RequestComponent, canActivate: [AuthGuard] },\n    { path: \":id\", component: TvRequestChildrenComponent, canActivate: [AuthGuard] },\n];\n@NgModule({\n    imports: [\n        RouterModule.forChild(routes),\n        NgbModule.forRoot(),\n        InfiniteScrollModule,\n        ButtonModule,\n        DialogModule,\n        TreeTableModule,\n        SharedModule,\n        SidebarModule,\n    ],\n    declarations: [\n        RequestComponent,\n        MovieRequestsComponent,\n        TvRequestsComponent,\n        TvRequestChildrenComponent,\n    ],\n    exports: [\n        RouterModule,\n    ],\n    providers: [\n        IdentityService,\n        RequestService,\n        RadarrService,\n    ],\n\n})\nexport class RequestsModule { }\n\n\n\n// WEBPACK FOOTER //\n// ./node_modules/angular2-template-loader!./node_modules/angular-router-loader/src!./ClientApp/app/requests/requests.module.ts","export * from \"./ICommon\";\nexport * from \"./ICouchPotato\";\nexport * from \"./IImages\";\nexport * from \"./IMediaServerStatus\";\nexport * from \"./INotificationSettings\";\nexport * from \"./IPlex\";\nexport * from \"./IRadarr\";\nexport * from \"./IRequestEngineResult\";\nexport * from \"./IRequestModel\";\nexport * from \"./ISearchMovieResult\";\nexport * from \"./ISearchTvResult\";\nexport * from \"./ISettings\";\nexport * from \"./ISonarr\";\nexport * from \"./IUser\";\nexport * from \"./IIssues\";\n\n\n\n// WEBPACK FOOTER //\n// ./node_modules/angular2-template-loader!./node_modules/angular-router-loader/src!./ClientApp/app/interfaces/index.ts","import { ISettings } from \"./ICommon\";\n\nexport interface INotificationSettings extends ISettings {\n    enabled: boolean;\n}\n\nexport interface IEmailNotificationSettings extends INotificationSettings {\n    host: string;\n    password: string;\n    port: number;\n    senderAddress: string;\n    senderName: string;\n    username: string;\n    authentication: boolean;\n    adminEmail: string;\n    disableTLS: boolean;\n    disableCertificateChecking: boolean;\n    notificationTemplates: INotificationTemplates[];\n}\n\nexport interface INotificationTemplates {\n    subject: string;\n    message: string;\n    notificationType: NotificationType;\n    notificationAgent: NotificationAgent;\n    enabled: boolean;\n}\n\nexport enum NotificationAgent {\n    Email,\n    Discord,\n    Pushbullet,\n    Pushover,\n    Telegram,\n}\n\nexport enum NotificationType {\n    NewRequest,\n    Issue,\n    RequestAvailable,\n    RequestApproved,\n    AdminNote,\n    Test,\n    RequestDeclined,\n    ItemAddedToFaultQueue,\n    WelcomeEmail,\n    IssueResolved,\n}\n\nexport interface IDiscordNotifcationSettings extends INotificationSettings {\n    webhookUrl: string;\n    username: string;\n    notificationTemplates: INotificationTemplates[];\n}\n\nexport interface ITelegramNotifcationSettings extends INotificationSettings {\n    botApi: string;\n    chatId: string;\n    parseMode: string;\n    notificationTemplates: INotificationTemplates[];\n}\n\nexport interface ISlackNotificationSettings extends INotificationSettings {\n    webhookUrl: string;\n    username: string;\n    channel: string;\n    iconEmoji: string;\n    iconUrl: string;\n    notificationTemplates: INotificationTemplates[];\n}\n\nexport interface IPushbulletNotificationSettings extends INotificationSettings {\n    accessToken: string;\n    notificationTemplates: INotificationTemplates[];\n    channelTag: string;\n}\n\nexport interface IPushoverNotificationSettings extends INotificationSettings {\n    accessToken: string;\n    notificationTemplates: INotificationTemplates[];\n    userToken: string;\n}\n\nexport interface IMattermostNotifcationSettings extends INotificationSettings {\n    webhookUrl: string;\n    username: string;\n    channel: string;\n    iconUrl: string;\n    notificationTemplates: INotificationTemplates[];\n}\n\nexport interface IMobileNotifcationSettings extends INotificationSettings {\n    notificationTemplates: INotificationTemplates[];\n}\n\n\n\n// WEBPACK FOOTER //\n// ./node_modules/angular2-template-loader!./node_modules/angular-router-loader/src!./ClientApp/app/interfaces/INotificationSettings.ts","import { IUser } from \"./IUser\";\n\nexport interface IMediaBase {\n  imdbId: string;\n  id: number;\n  providerId: number;\n  title: string;\n  overview: string;\n  posterPath: string;\n  releaseDate: Date;\n  status: string;\n  requestedDate: Date;\n  approved: boolean;\n  type: RequestType;\n  requested: boolean;\n  available: boolean;\n  otherMessage: string;\n  adminNote: string;\n  requestedUser: string;\n  issueId: number;\n  denied: boolean;\n  deniedReason: string;\n  released: boolean;\n}\n\nexport enum RequestType {\n  movie = 1,\n  tvShow = 2,\n}\n\n// NEW WORLD\n\nexport interface IMovieRequests extends IFullBaseRequest {\n  theMovieDbId: number;\n  rootPathOverride: number;\n  qualityOverride: number;\n\n  rootPathOverrideTitle: string;\n  qualityOverrideTitle: string;\n}\n\nexport interface IMovieUpdateModel {\n  id: number;\n}\n\nexport interface IFullBaseRequest extends IBaseRequest {\n  imdbId: string;\n  overview: string;\n  title: string;\n  posterPath: string;\n  backdropPath: string;\n  releaseDate: Date;\n  status: string;\n  released: boolean;\n  background: string;\n\n  // Used in the UI\n  backgroundPath: any;\n}\n\nexport interface IBaseRequest {\n  id: number;\n  approved: boolean;\n  requestedDate: Date;\n  available: boolean;\n  requestedUserId: number;\n  issueId: number;\n  denied: boolean;\n  deniedReason: string;\n  requestType: RequestType;\n  requestedUser: IUser;\n  canApprove: boolean;\n  title: string;\n}\n\nexport interface ITvRequests {\n  id: number;\n  imdbId: string;\n  rootFolder: number;\n  overview: string;\n  title: string;\n  posterPath: string;\n  backdropPath: string;\n  releaseDate: Date;\n  status: string;\n  childRequests: IChildRequests[];\n}\n\nexport interface IChildRequests extends IBaseRequest {\n  seasonRequests: INewSeasonRequests[];\n}\n\nexport interface ITvUpdateModel {\n  id: number;\n}\n\nexport interface INewSeasonRequests {\n  id: number;\n  seasonNumber: number;\n  episodes: IEpisodesRequests[];\n}\n\nexport interface IEpisodesRequests {\n  id: number;\n  episodeNumber: number;\n  title: string;\n  airDate: Date;\n  url: string;\n  available: boolean;\n  requested: boolean;\n  approved: boolean;\n  selected: boolean; // This is for the UI only\n}\n\nexport interface IMovieRequestModel {\n  theMovieDbId: number;\n}\n\nexport interface IFilter {\n  availabilityFilter: FilterType;\n  statusFilter: FilterType;\n}\n\nexport enum FilterType {\n  None = 0,\n  Available = 1,\n  NotAvailable = 2,\n  Approved = 3,\n  Processing = 4,\n  PendingApproval = 5,\n}\n\n\n\n// WEBPACK FOOTER //\n// ./node_modules/angular2-template-loader!./node_modules/angular-router-loader/src!./ClientApp/app/interfaces/IRequestModel.ts","import { ICheckbox } from \"./index\";\n\nexport interface IUser {\n    id: string;\n    userName: string;\n    alias: string;\n    claims: ICheckbox[];\n    emailAddress: string;\n    password: string;\n    userType: UserType;\n    lastLoggedIn: Date;\n    hasLoggedIn: boolean;\n    movieRequestLimit: number;\n    episodeRequestLimit: number;\n    userAccessToken: string;\n    // FOR UI\n    checked: boolean;\n}\n\nexport interface ICreateWizardUser {\n    username: string;\n    password: string;\n    usePlexAdminAccount: boolean;\n}\n\nexport enum UserType {\n    LocalUser = 1,\n    PlexUser = 2,\n    EmbyUser = 3,\n}\n\nexport interface IIdentityResult {\n    errors: string[];\n    successful: boolean;\n}\n\nexport interface IUpdateLocalUser extends IUser {\n    currentPassword: string;\n    confirmNewPassword: string;\n}\n\nexport interface IResetPasswordToken {\n    email: string;\n    token: string;\n    password: string;\n}\n\nexport interface IMobileUsersViewModel {\n    username: string;\n    devices: number;\n}\n\n\n\n// WEBPACK FOOTER //\n// ./node_modules/angular2-template-loader!./node_modules/angular-router-loader/src!./ClientApp/app/interfaces/IUser.ts","import { IIssueCategory, IUser, RequestType } from \"./\";\n\nexport interface IIssues {\n    id?: number;\n    title: string;\n    requestType: RequestType;\n    providerId: string;\n    subject: string;\n    description: string;\n    issueCategory: IIssueCategory;\n    issueCategoryId: number;\n    status: IssueStatus;\n    resolvedDate?: Date;\n    comments: IIssueComments[];\n    requestId: number | undefined;\n    userReported: IUser | undefined;\n}\n\nexport enum IssueStatus {\n    Pending = 0,\n    InProgress = 1,\n    Resolved = 2,\n}\n\nexport interface IIssueCount {\n    pending: number;\n    inProgress: number;\n    resolved: number;\n}\n\nexport interface IPagenator {\n        first: number;\n        rows: number;\n        page: number;\n        pageCount: number;\n}\n\nexport interface IIssueComments {\n    userId: string;\n    comment: string;\n    movieIssueId: number | undefined;\n    tvIssueId: number | undefined;\n    date: Date;\n    user: IUser;\n    issues: IIssues | undefined;\n}\n\nexport interface IIssuesChat {\n    comment: string;\n    date: Date;\n    username: string;\n    adminComment: boolean;\n}\n\nexport interface INewIssueComments {\n    comment: string;\n    issueId: number;\n}\n\nexport interface IUpdateStatus {\n    issueId: number;\n    status: IssueStatus;\n}\n\n\n\n// WEBPACK FOOTER //\n// ./node_modules/angular2-template-loader!./node_modules/angular-router-loader/src!./ClientApp/app/interfaces/IIssues.ts","module.exports = (__webpack_require__(1))(794);\n\n\n//////////////////\n// WEBPACK FOOTER\n// delegated ./node_modules/rxjs/add/operator/debounceTime.js from dll-reference vendor_a449fdf94c391aac3fe0\n// module id = 177\n// module chunks = 1 2","module.exports = (__webpack_require__(1))(803);\n\n\n//////////////////\n// WEBPACK FOOTER\n// delegated ./node_modules/rxjs/add/operator/distinctUntilChanged.js from dll-reference vendor_a449fdf94c391aac3fe0\n// module id = 178\n// module chunks = 1 2","import { CommonModule } from \"@angular/common\";\nimport { NgModule } from \"@angular/core\";\nimport { FormsModule } from \"@angular/forms\";\nimport { TranslateModule } from \"@ngx-translate/core\";\n\nimport { IssuesReportComponent } from \"./issues-report.component\";\n\nimport { SidebarModule } from \"primeng/primeng\";\n\n@NgModule({\n  declarations: [\n    IssuesReportComponent,\n  ],\n  imports: [\n    SidebarModule,\n    FormsModule,\n    CommonModule,\n  ],\n  exports: [\n      TranslateModule, \n      CommonModule, \n      FormsModule,\n      SidebarModule,\n      IssuesReportComponent,\n    ],\n})\nexport class SharedModule {}\n\n\n\n// WEBPACK FOOTER //\n// ./node_modules/angular2-template-loader!./node_modules/angular-router-loader/src!./ClientApp/app/shared/shared.module.ts","import { Component, EventEmitter, Input, Output } from \"@angular/core\";\n\nimport { IIssueCategory, IIssues, IssueStatus, RequestType } from \"./../interfaces\";\nimport { IssuesService, NotificationService } from \"./../services\";\n\n@Component({\n    selector: \"issue-report\",\n    template: require('./issues-report.component.html'),\n\n})\nexport class IssuesReportComponent {\n    @Input() public visible: boolean;\n    @Input() public id: number; // RequestId\n    @Input() public title: string;\n    @Input() public issueCategory: IIssueCategory;\n    @Input() public movie: boolean;\n    @Input() public providerId: string;\n\n    @Output() public visibleChange = new EventEmitter<boolean>();\n\n    public submitted: boolean = false;\n\n    get getTitle(): string {\n        return this.title;\n    }\n\n    public issue: IIssues;\n\n    constructor(private issueService: IssuesService,\n                private notification: NotificationService) {\n        this.issue = {\n            subject: \"\",\n            description: \"\",\n            issueCategory: { value: \"\", id: 0 },\n            status: IssueStatus.Pending,\n            resolvedDate: undefined,\n            id: undefined,\n            issueCategoryId: 0,\n            comments: [],\n            requestId: undefined,\n            requestType: RequestType.movie,\n            title: \"\",\n            providerId: \"\",\n            userReported: undefined,\n        };\n    }\n\n    public submit() {\n        this.submitted = true;\n        const issue = this.issue;\n        issue.requestId = this.id;\n        issue.issueCategory = this.issueCategory;\n        issue.issueCategoryId = this.issueCategory.id;\n        issue.title = this.title;\n        issue.providerId = this.providerId;\n        if (this.movie) {\n            issue.requestType = RequestType.movie;\n        } else {\n            issue.requestType = RequestType.tvShow;\n        }\n        this.issueService.createIssue(issue).subscribe(x => {\n            if (x) {\n                this.notification.success(\"Issue Created\");\n            }\n        });\n\n    }\n\n    public hide(): void {\n        this.submitted = false;\n        this.visible = !this.visible;\n        this.visibleChange.emit(this.visible);\n    }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./node_modules/angular2-template-loader!./node_modules/angular-router-loader/src!./ClientApp/app/shared/issues-report.component.ts","module.exports = \"<p-sidebar [(visible)]=\\\"visible\\\" position=\\\"right\\\" styleClass=\\\"ui-sidebar-md side-back\\\" (onHide)=\\\"hide()\\\">\\n    <div *ngIf=\\\"title\\\">\\n\\n       \\n        <h3>Reporting an Issue for \\\"{{title}}\\\"</h3>\\n\\n        <h4 *ngIf=\\\"issueCategory\\\">Issue type: {{issueCategory.value}}</h4>\\n\\n        <div class=\\\"form-group\\\">\\n            <label for=\\\"subject\\\" class=\\\"control-label\\\">Subject</label>\\n            <div>\\n                <input type=\\\"text\\\" [(ngModel)]=\\\"issue.subject\\\" class=\\\"form-control form-control-custom \\\" id=\\\"subject\\\" name=\\\"subject\\\"\\n                    value=\\\"{{issue?.subject}}\\\">\\n            </div>\\n        </div>\\n\\n        <div class=\\\"form-group\\\">\\n            <label for=\\\"description\\\" class=\\\"control-label\\\">Description</label>\\n            <div>\\n                <textarea class=\\\"form-control-custom form-control\\\" [(ngModel)]=\\\"issue.description\\\" rows=\\\"5\\\" type=\\\"text\\\"></textarea>\\n            </div>\\n        </div>\\n\\n\\n        <button type=\\\"button\\\" [disabled]=\\\"submitted\\\" class=\\\"btn btn-primary-outline\\\" (click)=\\\"submit()\\\">Submit</button>\\n     </div>\\n</p-sidebar>\\n\";\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./ClientApp/app/shared/issues-report.component.html\n// module id = 181\n// module chunks = 1 2 3","\n        var result = require(\"!!../../../node_modules/css-loader/index.js?-url&minimize!../../../node_modules/sass-loader/lib/loader.js!./tvrequests.component.scss\");\n\n        if (typeof result === \"string\") {\n            module.exports = result;\n        } else {\n            module.exports = result.toString();\n        }\n    \n\n\n//////////////////\n// WEBPACK FOOTER\n// ./ClientApp/app/requests/tvrequests.component.scss\n// module id = 186\n// module chunks = 1 2","exports = module.exports = require(\"../../../node_modules/css-loader/lib/css-base.js\")(false);\n// imports\n\n\n// module\nexports.push([module.id, \"th{text-align:left!important}\", \"\"]);\n\n// exports\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/css-loader?-url&minimize!./node_modules/sass-loader/lib/loader.js!./ClientApp/app/requests/tvrequests.component.scss\n// module id = 187\n// module chunks = 1 2","import { Directive, ElementRef, EventEmitter, Input, NgModule, NgZone, Output } from '@angular/core';\nimport 'rxjs/add/observable/fromEvent';\nimport 'rxjs/add/observable/of';\nimport 'rxjs/add/operator/filter';\nimport 'rxjs/add/operator/mergeMap';\nimport 'rxjs/add/operator/sampleTime';\nimport { Observable } from 'rxjs/Observable';\n/**\n * @param {?} selector\n * @param {?} scrollWindow\n * @param {?} defaultElement\n * @param {?} fromRoot\n * @return {?}\n */\nfunction resolveContainerElement(selector, scrollWindow, defaultElement, fromRoot) {\n    var /** @type {?} */ hasWindow = window && window.hasOwnProperty('document');\n    var /** @type {?} */ containerIsString = selector && hasWindow && typeof selector === 'string';\n    var /** @type {?} */ container = hasWindow && scrollWindow ? window : defaultElement;\n    if (containerIsString) {\n        container = containerIsString\n            ? findElement(selector, defaultElement.nativeElement, fromRoot)\n            : selector;\n    }\n    return container;\n}\n/**\n * @param {?} selector\n * @param {?} customRoot\n * @param {?} fromRoot\n * @return {?}\n */\nfunction findElement(selector, customRoot, fromRoot) {\n    var /** @type {?} */ rootEl = fromRoot ? window.document : customRoot;\n    return rootEl.querySelector(selector);\n}\n/**\n * @param {?} prop\n * @return {?}\n */\nfunction inputPropChanged(prop) {\n    return prop && !prop.firstChange;\n}\n/**\n * @return {?}\n */\nfunction hasWindowDefined() {\n    return typeof window !== 'undefined';\n}\nvar AxisResolver = (function () {\n    /**\n     * @param {?=} vertical\n     */\n    function AxisResolver(vertical) {\n        if (vertical === void 0) { vertical = true; }\n        this.vertical = vertical;\n    }\n    /**\n     * @return {?}\n     */\n    AxisResolver.prototype.clientHeightKey = function () { return this.vertical ? 'clientHeight' : 'clientWidth'; };\n    /**\n     * @return {?}\n     */\n    AxisResolver.prototype.offsetHeightKey = function () { return this.vertical ? 'offsetHeight' : 'offsetWidth'; };\n    /**\n     * @return {?}\n     */\n    AxisResolver.prototype.scrollHeightKey = function () { return this.vertical ? 'scrollHeight' : 'scrollWidth'; };\n    /**\n     * @return {?}\n     */\n    AxisResolver.prototype.pageYOffsetKey = function () { return this.vertical ? 'pageYOffset' : 'pageXOffset'; };\n    /**\n     * @return {?}\n     */\n    AxisResolver.prototype.offsetTopKey = function () { return this.vertical ? 'offsetTop' : 'offsetLeft'; };\n    /**\n     * @return {?}\n     */\n    AxisResolver.prototype.scrollTopKey = function () { return this.vertical ? 'scrollTop' : 'scrollLeft'; };\n    /**\n     * @return {?}\n     */\n    AxisResolver.prototype.topKey = function () { return this.vertical ? 'top' : 'left'; };\n    return AxisResolver;\n}());\n/**\n * @param {?} __0\n * @return {?}\n */\nfunction shouldTriggerEvents(_a) {\n    var alwaysCallback = _a.alwaysCallback, shouldScroll = _a.shouldScroll, disable = _a.disable;\n    return (alwaysCallback || shouldScroll) && !disable;\n}\n/**\n * @param {?} callbacks\n * @param {?} isScrollingDown\n * @param {?} scrolledUntilNow\n * @return {?}\n */\nfunction triggerEvents(callbacks, isScrollingDown, scrolledUntilNow) {\n    var /** @type {?} */ eventData = {\n        currentScrollPosition: scrolledUntilNow\n    };\n    var /** @type {?} */ callback = isScrollingDown ? callbacks.down : callbacks.up;\n    callback(eventData);\n}\n/**\n * @param {?} __0\n * @return {?}\n */\nfunction createResolver(_a) {\n    var isWindow = _a.isWindow, windowElement = _a.windowElement, axis = _a.axis;\n    return createResolverWithContainer({\n        axis: axis,\n        isWindow: isWindow\n    }, windowElement);\n}\n/**\n * @param {?} resolver\n * @param {?} windowElement\n * @return {?}\n */\nfunction createResolverWithContainer(resolver, windowElement) {\n    var /** @type {?} */ container = resolver.isWindow || (windowElement && !windowElement.nativeElement)\n        ? windowElement\n        : windowElement.nativeElement;\n    return Object.assign({}, resolver, { container: container });\n}\n/**\n * @param {?} windowElement\n * @return {?}\n */\nfunction isElementWindow(windowElement) {\n    var /** @type {?} */ isWindow = ['Window', 'global'].some(function (obj) { return Object.prototype.toString.call(windowElement).includes(obj); });\n    return isWindow;\n}\n/**\n * @param {?} isContainerWindow\n * @param {?} windowElement\n * @return {?}\n */\nfunction getDocumentElement(isContainerWindow, windowElement) {\n    return isContainerWindow ? windowElement.document.documentElement : null;\n}\n/**\n * @param {?} element\n * @param {?} resolver\n * @return {?}\n */\nfunction calculatePoints(element, resolver) {\n    var /** @type {?} */ height = extractHeightForElement(resolver);\n    return resolver.isWindow\n        ? calculatePointsForWindow(height, element, resolver)\n        : calculatePointsForElement(height, element, resolver);\n}\n/**\n * @param {?} height\n * @param {?} element\n * @param {?} resolver\n * @return {?}\n */\nfunction calculatePointsForWindow(height, element, resolver) {\n    var axis = resolver.axis, container = resolver.container, isWindow = resolver.isWindow;\n    var _a = extractHeightPropKeys(axis), offsetHeightKey = _a.offsetHeightKey, clientHeightKey = _a.clientHeightKey;\n    // scrolled until now / current y point\n    var /** @type {?} */ scrolledUntilNow = height +\n        getElementPageYOffset(getDocumentElement(isWindow, container), axis, isWindow);\n    // total height / most bottom y point\n    var /** @type {?} */ nativeElementHeight = getElementHeight(element.nativeElement, isWindow, offsetHeightKey, clientHeightKey);\n    var /** @type {?} */ totalToScroll = getElementOffsetTop(element.nativeElement, axis, isWindow) +\n        nativeElementHeight;\n    return { height: height, scrolledUntilNow: scrolledUntilNow, totalToScroll: totalToScroll };\n}\n/**\n * @param {?} height\n * @param {?} element\n * @param {?} resolver\n * @return {?}\n */\nfunction calculatePointsForElement(height, element, resolver) {\n    var axis = resolver.axis, container = resolver.container;\n    // perhaps use container.offsetTop instead of 'scrollTop'\n    var /** @type {?} */ scrolledUntilNow = container[axis.scrollTopKey()];\n    var /** @type {?} */ totalToScroll = container[axis.scrollHeightKey()];\n    return { height: height, scrolledUntilNow: scrolledUntilNow, totalToScroll: totalToScroll };\n}\n/**\n * @param {?} axis\n * @return {?}\n */\nfunction extractHeightPropKeys(axis) {\n    return {\n        offsetHeightKey: axis.offsetHeightKey(),\n        clientHeightKey: axis.clientHeightKey()\n    };\n}\n/**\n * @param {?} __0\n * @return {?}\n */\nfunction extractHeightForElement(_a) {\n    var container = _a.container, isWindow = _a.isWindow, axis = _a.axis;\n    var _b = extractHeightPropKeys(axis), offsetHeightKey = _b.offsetHeightKey, clientHeightKey = _b.clientHeightKey;\n    return getElementHeight(container, isWindow, offsetHeightKey, clientHeightKey);\n}\n/**\n * @param {?} elem\n * @param {?} isWindow\n * @param {?} offsetHeightKey\n * @param {?} clientHeightKey\n * @return {?}\n */\nfunction getElementHeight(elem, isWindow, offsetHeightKey, clientHeightKey) {\n    if (isNaN(elem[offsetHeightKey])) {\n        return getDocumentElement(isWindow, elem)[clientHeightKey];\n    }\n    else {\n        return elem[offsetHeightKey];\n    }\n}\n/**\n * @param {?} elem\n * @param {?} axis\n * @param {?} isWindow\n * @return {?}\n */\nfunction getElementOffsetTop(elem, axis, isWindow) {\n    var /** @type {?} */ topKey = axis.topKey();\n    // elem = elem.nativeElement;\n    if (!elem.getBoundingClientRect) {\n        // || elem.css('none')) {\n        return;\n    }\n    return (elem.getBoundingClientRect()[topKey] +\n        getElementPageYOffset(elem, axis, isWindow));\n}\n/**\n * @param {?} elem\n * @param {?} axis\n * @param {?} isWindow\n * @return {?}\n */\nfunction getElementPageYOffset(elem, axis, isWindow) {\n    var /** @type {?} */ pageYOffset = axis.pageYOffsetKey();\n    var /** @type {?} */ scrollTop = axis.scrollTopKey();\n    var /** @type {?} */ offsetTop = axis.offsetTopKey();\n    if (isNaN(window[pageYOffset])) {\n        return getDocumentElement(isWindow, elem)[scrollTop];\n    }\n    else if (elem.ownerDocument) {\n        return elem.ownerDocument.defaultView[pageYOffset];\n    }\n    else {\n        return elem[offsetTop];\n    }\n}\n/**\n * @param {?} container\n * @param {?} config\n * @param {?} scrollingDown\n * @return {?}\n */\nfunction shouldScroll(container, config, scrollingDown) {\n    var /** @type {?} */ distance = config.distance;\n    var /** @type {?} */ remaining;\n    var /** @type {?} */ containerBreakpoint;\n    if (scrollingDown) {\n        remaining = container.totalToScroll - container.scrolledUntilNow;\n        containerBreakpoint = container.height * distance.down + 1;\n    }\n    else {\n        remaining = container.scrolledUntilNow;\n        containerBreakpoint = container.height * distance.up + 1;\n    }\n    var /** @type {?} */ shouldScroll = remaining <= containerBreakpoint;\n    return shouldScroll;\n}\n/**\n * @param {?} lastScrollPosition\n * @param {?} container\n * @return {?}\n */\nfunction isScrollingDownwards(lastScrollPosition, container) {\n    return lastScrollPosition < container.scrolledUntilNow;\n}\n/**\n * @param {?} lastScrollPosition\n * @param {?} container\n * @param {?} config\n * @return {?}\n */\nfunction getScrollStats(lastScrollPosition, container, config) {\n    var /** @type {?} */ isScrollingDown = isScrollingDownwards(lastScrollPosition, container);\n    return {\n        shouldScroll: shouldScroll(container, config, isScrollingDown),\n        isScrollingDown: isScrollingDown\n    };\n}\n/**\n * @param {?} position\n * @param {?} lastPositionState\n * @return {?}\n */\nfunction updateScrollPosition(position, lastPositionState) {\n    return (lastPositionState.last = position);\n}\n/**\n * @param {?} options\n * @return {?}\n */\nfunction attachScrollEvent(options) {\n    return Observable.fromEvent(options.container, 'scroll')\n        .sampleTime(options.throttleDuration)\n        .filter(options.filterBefore)\n        .mergeMap(function (ev) { return Observable.of(options.mergeMap(ev)); })\n        .subscribe(options.scrollHandler);\n}\n/**\n * @param {?} config\n * @return {?}\n */\nfunction createScroller(config) {\n    var /** @type {?} */ containerElement = resolveContainerElement(config.scrollContainer, config.scrollWindow, config.element, config.fromRoot);\n    var /** @type {?} */ resolver = createResolver({\n        axis: new AxisResolver(!config.horizontal),\n        isWindow: isElementWindow(containerElement),\n        windowElement: containerElement\n    });\n    var /** @type {?} */ scrollPosition = {\n        last: 0\n    };\n    var /** @type {?} */ options = {\n        container: resolver.container,\n        filterBefore: config.filterBefore,\n        mergeMap: function () { return calculatePoints(config.element, resolver); },\n        scrollHandler: function (positionStats) { return handleOnScroll(scrollPosition, positionStats, config); },\n        throttleDuration: config.throttle\n    };\n    return attachScrollEvent(options);\n}\n/**\n * @param {?} scrollPosition\n * @param {?} positionStats\n * @param {?} config\n * @return {?}\n */\nfunction handleOnScroll(scrollPosition, positionStats, config) {\n    var /** @type {?} */ distance = {\n        down: config.downDistance,\n        up: config.upDistance\n    };\n    var _a = getScrollStats(scrollPosition.last, positionStats, {\n        distance: distance\n    }), isScrollingDown = _a.isScrollingDown, shouldScroll$$1 = _a.shouldScroll;\n    var /** @type {?} */ scrollConfig = {\n        alwaysCallback: config.alwaysCallback,\n        disable: config.disable,\n        shouldScroll: shouldScroll$$1\n    };\n    updateScrollPosition(positionStats.scrolledUntilNow, scrollPosition);\n    if (shouldTriggerEvents(scrollConfig)) {\n        triggerEvents(config.events, isScrollingDown, positionStats.scrolledUntilNow);\n    }\n}\nvar InfiniteScrollDirective = (function () {\n    /**\n     * @param {?} element\n     * @param {?} zone\n     */\n    function InfiniteScrollDirective(element, zone) {\n        this.element = element;\n        this.zone = zone;\n        this.scrolled = new EventEmitter();\n        this.scrolledUp = new EventEmitter();\n        this.infiniteScrollDistance = 2;\n        this.infiniteScrollUpDistance = 1.5;\n        this.infiniteScrollThrottle = 300;\n        this.infiniteScrollDisabled = false;\n        this.infiniteScrollContainer = null;\n        this.scrollWindow = true;\n        this.immediateCheck = false;\n        this.horizontal = false;\n        this.alwaysCallback = false;\n        this.fromRoot = false;\n    }\n    /**\n     * @return {?}\n     */\n    InfiniteScrollDirective.prototype.ngAfterViewInit = function () {\n        this.setup();\n    };\n    /**\n     * @param {?} __0\n     * @return {?}\n     */\n    InfiniteScrollDirective.prototype.ngOnChanges = function (_a) {\n        var infiniteScrollContainer = _a.infiniteScrollContainer;\n        if (inputPropChanged(infiniteScrollContainer)) {\n            this.destroyScroller();\n            this.setup();\n        }\n    };\n    /**\n     * @return {?}\n     */\n    InfiniteScrollDirective.prototype.setup = function () {\n        var _this = this;\n        if (hasWindowDefined()) {\n            this.zone.runOutsideAngular(function () {\n                _this.disposeScroller = createScroller({\n                    fromRoot: _this.fromRoot,\n                    alwaysCallback: _this.alwaysCallback,\n                    disable: _this.infiniteScrollDisabled,\n                    downDistance: _this.infiniteScrollDistance,\n                    element: _this.element,\n                    events: {\n                        // tslint:disable-next-line:arrow-parens\n                        down: function (event) { return _this.zone.run(function () { return _this.scrolled.emit(event); }); },\n                        // tslint:disable-next-line:arrow-parens\n                        up: function (event) { return _this.zone.run(function () { return _this.scrolledUp.emit(event); }); }\n                    },\n                    filterBefore: function () { return !_this.infiniteScrollDisabled; },\n                    horizontal: _this.horizontal,\n                    scrollContainer: _this.infiniteScrollContainer,\n                    scrollWindow: _this.scrollWindow,\n                    throttle: _this.infiniteScrollThrottle,\n                    upDistance: _this.infiniteScrollUpDistance\n                });\n            });\n        }\n    };\n    /**\n     * @return {?}\n     */\n    InfiniteScrollDirective.prototype.ngOnDestroy = function () {\n        this.destroyScroller();\n    };\n    /**\n     * @return {?}\n     */\n    InfiniteScrollDirective.prototype.destroyScroller = function () {\n        if (this.disposeScroller) {\n            this.disposeScroller.unsubscribe();\n        }\n    };\n    return InfiniteScrollDirective;\n}());\nInfiniteScrollDirective.decorators = [\n    { type: Directive, args: [{\n                selector: '[infiniteScroll], [infinite-scroll], [data-infinite-scroll]'\n            },] },\n];\n/**\n * @nocollapse\n */\nInfiniteScrollDirective.ctorParameters = function () { return [\n    { type: ElementRef, },\n    { type: NgZone, },\n]; };\nInfiniteScrollDirective.propDecorators = {\n    'scrolled': [{ type: Output },],\n    'scrolledUp': [{ type: Output },],\n    'infiniteScrollDistance': [{ type: Input },],\n    'infiniteScrollUpDistance': [{ type: Input },],\n    'infiniteScrollThrottle': [{ type: Input },],\n    'infiniteScrollDisabled': [{ type: Input },],\n    'infiniteScrollContainer': [{ type: Input },],\n    'scrollWindow': [{ type: Input },],\n    'immediateCheck': [{ type: Input },],\n    'horizontal': [{ type: Input },],\n    'alwaysCallback': [{ type: Input },],\n    'fromRoot': [{ type: Input },],\n};\nvar InfiniteScrollModule = (function () {\n    function InfiniteScrollModule() {\n    }\n    return InfiniteScrollModule;\n}());\nInfiniteScrollModule.decorators = [\n    { type: NgModule, args: [{\n                declarations: [InfiniteScrollDirective],\n                exports: [InfiniteScrollDirective],\n                imports: [],\n                providers: []\n            },] },\n];\n/**\n * @nocollapse\n */\nInfiniteScrollModule.ctorParameters = function () { return []; };\n/**\n * Angular library starter.\n * Build an Angular library compatible with AoT compilation & Tree shaking.\n * Written by Roberto Simonetti.\n * MIT license.\n * https://github.com/robisim74/angular-library-starter\n */\n/**\n * Entry point for all public APIs of the package.\n */\n/**\n * Generated bundle index. Do not edit.\n */\nexport { InfiniteScrollDirective, InfiniteScrollModule };\n//# sourceMappingURL=ngx-infinite-scroll.es5.js.map\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/ngx-infinite-scroll/modules/ngx-infinite-scroll.es5.js\n// module id = 269\n// module chunks = 1","module.exports = (__webpack_require__(1))(727);\n\n\n//////////////////\n// WEBPACK FOOTER\n// delegated ./node_modules/rxjs/add/observable/fromEvent.js from dll-reference vendor_a449fdf94c391aac3fe0\n// module id = 270\n// module chunks = 1","module.exports = (__webpack_require__(1))(367);\n\n\n//////////////////\n// WEBPACK FOOTER\n// delegated ./node_modules/rxjs/add/observable/of.js from dll-reference vendor_a449fdf94c391aac3fe0\n// module id = 271\n// module chunks = 1","module.exports = (__webpack_require__(1))(816);\n\n\n//////////////////\n// WEBPACK FOOTER\n// delegated ./node_modules/rxjs/add/operator/filter.js from dll-reference vendor_a449fdf94c391aac3fe0\n// module id = 272\n// module chunks = 1","module.exports = (__webpack_require__(1))(398);\n\n\n//////////////////\n// WEBPACK FOOTER\n// delegated ./node_modules/rxjs/add/operator/mergeMap.js from dll-reference vendor_a449fdf94c391aac3fe0\n// module id = 273\n// module chunks = 1","module.exports = (__webpack_require__(1))(886);\n\n\n//////////////////\n// WEBPACK FOOTER\n// delegated ./node_modules/rxjs/add/operator/sampleTime.js from dll-reference vendor_a449fdf94c391aac3fe0\n// module id = 274\n// module chunks = 1","module.exports = (__webpack_require__(1))(0);\n\n\n//////////////////\n// WEBPACK FOOTER\n// delegated ./node_modules/rxjs/Observable.js from dll-reference vendor_a449fdf94c391aac3fe0\n// module id = 275\n// module chunks = 1","import { Component, Input, OnInit } from \"@angular/core\";\nimport { DomSanitizer } from \"@angular/platform-browser\";\nimport \"rxjs/add/operator/debounceTime\";\nimport \"rxjs/add/operator/distinctUntilChanged\";\nimport \"rxjs/add/operator/map\";\nimport { Subject } from \"rxjs/Subject\";\n\nimport { AuthService } from \"../auth/auth.service\";\nimport { NotificationService, RadarrService, RequestService } from \"../services\";\n\nimport { FilterType, IFilter, IIssueCategory, IMovieRequests, IRadarrProfile, IRadarrRootFolder } from \"../interfaces\";\n\n@Component({\n    selector: \"movie-requests\",\n    template: require('./movierequests.component.html'),\n})\nexport class MovieRequestsComponent implements OnInit {\n    public movieRequests: IMovieRequests[];\n\n    public searchChanged: Subject<string> = new Subject<string>();\n    public searchText: string;\n\n    public isAdmin: boolean; // Also PowerUser\n\n    public radarrProfiles: IRadarrProfile[];\n    public radarrRootFolders: IRadarrRootFolder[];\n\n    @Input() public issueCategories: IIssueCategory[];\n    @Input() public issuesEnabled: boolean;\n    public issuesBarVisible = false;\n    public issueRequest: IMovieRequests;\n    public issueProviderId: string;\n    public issueCategorySelected: IIssueCategory;\n\n    public filterDisplay: boolean;\n    public filter: IFilter;\n    public filterType = FilterType;\n\n    private currentlyLoaded: number;\n    private amountToLoad: number;\n\n    constructor(private requestService: RequestService,\n                private auth: AuthService,\n                private notificationService: NotificationService,\n                private radarrService: RadarrService,\n                private sanitizer: DomSanitizer) {\n        this.searchChanged\n            .debounceTime(600) // Wait Xms after the last event before emitting last event\n            .distinctUntilChanged() // only emit if value is different from previous value\n            .subscribe(x => {\n                this.searchText = x as string;\n                if (this.searchText === \"\") {\n                    this.resetSearch();\n                    return;\n                }\n                this.requestService.searchMovieRequests(this.searchText)\n                    .subscribe(m => {\n                        this.setOverrides(m);\n                        this.movieRequests = m;\n                    });\n            });\n    }\n\n    public ngOnInit() {\n        this.amountToLoad = 100;\n        this.currentlyLoaded = 100;\n        this.loadInit();\n        this.isAdmin = this.auth.hasRole(\"admin\") || this.auth.hasRole(\"poweruser\");\n        this.filter = {\n            availabilityFilter: FilterType.None,\n            statusFilter: FilterType.None};\n    }\n\n    public loadMore() {\n        this.loadRequests(this.amountToLoad, this.currentlyLoaded);\n    }\n\n    public search(text: any) {\n        this.searchChanged.next(text.target.value);\n    }\n\n    public removeRequest(request: IMovieRequests) {\n        this.requestService.removeMovieRequest(request);\n        this.removeRequestFromUi(request);\n        this.loadRequests(1, this.currentlyLoaded);\n    }\n\n    public changeAvailability(request: IMovieRequests, available: boolean) {\n        request.available = available;\n\n        if(available) {\n            this.requestService.markMovieAvailable({ id: request.id }).subscribe(x => {\n                if (x.result) {\n                    this.notificationService.success(\n                        `${request.title} Is now available`);\n                } else {\n                    this.notificationService.warning(\"Request Available\", x.message ? x.message : x.errorMessage);\n                    request.approved = false;\n                }\n            });\n        } else {\n            this.requestService.markMovieUnavailable({ id: request.id }).subscribe(x => {\n                if (x.result) {\n                    this.notificationService.success(\n                        `${request.title} Is now unavailable`);\n                } else {\n                    this.notificationService.warning(\"Request Available\", x.message ? x.message : x.errorMessage);\n                    request.approved = false;\n                }\n            });\n        }\n    }\n\n    public approve(request: IMovieRequests) {\n        request.approved = true;\n        this.approveRequest(request);\n    }\n\n    public deny(request: IMovieRequests) {\n        request.denied = true;\n        this.denyRequest(request);\n    }\n\n    public selectRootFolder(searchResult: IMovieRequests, rootFolderSelected: IRadarrRootFolder, event: any) {\n        event.preventDefault();\n        searchResult.rootPathOverride = rootFolderSelected.id;\n        this.setOverride(searchResult);\n        this.updateRequest(searchResult);\n    }\n\n    public selectQualityProfile(searchResult: IMovieRequests, profileSelected: IRadarrProfile, event: any) {\n        event.preventDefault();\n        searchResult.qualityOverride = profileSelected.id;\n        this.setOverride(searchResult);\n        this.updateRequest(searchResult);\n    }\n\n    public reportIssue(catId: IIssueCategory, req: IMovieRequests) {\n        this.issueRequest = req;\n        this.issueCategorySelected = catId;\n        this.issuesBarVisible = true;\n        this.issueProviderId = req.theMovieDbId.toString();\n    }\n\n    public ignore(event: any): void {\n        event.preventDefault();\n    }\n\n    public clearFilter() {\n        this.filterDisplay = false;\n        this.filter.availabilityFilter = FilterType.None;\n        this.filter.statusFilter = FilterType.None;\n        \n        this.resetSearch();\n    }\n\n    public filterAvailability(filter: FilterType) {\n        this.filter.availabilityFilter = filter;\n        this.requestService.filterMovies(this.filter)\n        .subscribe(x => {\n            this.setOverrides(x);\n            this.movieRequests = x;\n        });\n    }\n\n    public filterStatus(filter: FilterType) {\n        this.filter.statusFilter = filter;\n        this.requestService.filterMovies(this.filter)\n        .subscribe(x => {\n            this.setOverrides(x);\n            this.movieRequests = x;\n        });\n    }\n\n    private loadRequests(amountToLoad: number, currentlyLoaded: number) {\n        this.requestService.getMovieRequests(amountToLoad, currentlyLoaded + 1)\n            .subscribe(x => {\n                this.setOverrides(x);\n                if(!this.movieRequests) {\n                    this.movieRequests = [];\n                }\n                this.movieRequests.push.apply(this.movieRequests, x);\n                this.currentlyLoaded = currentlyLoaded + amountToLoad;\n            });\n    }\n\n    private updateRequest(request: IMovieRequests) {\n        this.requestService.updateMovieRequest(request)\n            .subscribe(x => {\n                this.setOverride(x);\n                request = x;\n            });\n    }\n\n    private approveRequest(request: IMovieRequests) {\n        this.requestService.approveMovie({ id: request.id })\n            .subscribe(x => {\n                request.approved = true;\n                if (x.result) {\n                    this.notificationService.success(\n                        `Request for ${request.title} has been approved successfully`);\n                } else {\n                    this.notificationService.warning(\"Request Approved\", x.message ? x.message : x.errorMessage);\n                    request.approved = false;\n                }\n            });\n    }\n\n    private denyRequest(request: IMovieRequests) {\n        this.requestService.denyMovie({ id: request.id })\n            .subscribe(x => {\n                if (x.result) {\n                    this.notificationService.success(\n                        `Request for ${request.title} has been denied successfully`);\n                } else {\n                    this.notificationService.warning(\"Request Denied\", x.message ? x.message : x.errorMessage);\n                    request.denied = false;\n                }\n            });\n    }\n\n    private loadInit() {\n        this.requestService.getMovieRequests(this.amountToLoad, 0)\n            .subscribe(x => {\n                this.movieRequests = x;\n\n                this.movieRequests.forEach((req) => {\n                    this.movieRequests.forEach((req) => this.setBackground(req));\n                });\n                this.radarrService.getQualityProfilesFromSettings().subscribe(c => {\n                    this.radarrProfiles = c;\n                    this.movieRequests.forEach((req) => this.setQualityOverrides(req));\n                });\n                this.radarrService.getRootFoldersFromSettings().subscribe(c => {\n                    this.radarrRootFolders = c;\n                    this.movieRequests.forEach((req) => this.setRootFolderOverrides(req));\n                });\n            });\n    }\n\n    private resetSearch() {\n        this.currentlyLoaded = 5;\n        this.loadInit();\n    }\n\n    private removeRequestFromUi(key: IMovieRequests) {\n        const index = this.movieRequests.indexOf(key, 0);\n        if (index > -1) {\n            this.movieRequests.splice(index, 1);\n        }\n    }\n\n    private setOverrides(requests: IMovieRequests[]): void {\n        requests.forEach((req) => {\n            this.setOverride(req);\n        });\n    }\n\n    private setQualityOverrides(req: IMovieRequests): void {\n        if (this.radarrProfiles) {\n            const profile = this.radarrProfiles.filter((p) => {\n                return p.id === req.qualityOverride;\n            });\n            if (profile.length > 0) {\n                req.qualityOverrideTitle = profile[0].name;\n            }\n        }\n    }\n    private setRootFolderOverrides(req: IMovieRequests): void {\n        if (this.radarrRootFolders) {\n            const path = this.radarrRootFolders.filter((folder) => {\n                return folder.id === req.rootPathOverride;\n            });\n            if (path.length > 0) {\n                req.rootPathOverrideTitle = path[0].path;\n            }\n        }\n    }\n\n    private setOverride(req: IMovieRequests): void {\n        this.setBackground(req);\n        this.setQualityOverrides(req);\n        this.setRootFolderOverrides(req);\n    }\n\n    private setBackground(req: IMovieRequests): void {\n        req.backgroundPath = this.sanitizer.bypassSecurityTrustStyle\n        (\"url(\" + \"https://image.tmdb.org/t/p/w1280\" + req.background + \")\");\n    }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./node_modules/angular2-template-loader!./node_modules/angular-router-loader/src!./ClientApp/app/requests/movierequests.component.ts","module.exports = \"\\n<div class=\\\"form-group\\\">\\n    <div class=\\\"input-group\\\">\\n        <input type=\\\"text\\\" id=\\\"search\\\" class=\\\"form-control form-control-custom searchwidth\\\" placeholder=\\\"Search\\\" (keyup)=\\\"search($event)\\\">\\n        <span class=\\\"input-group-btn\\\">       \\n        <button id=\\\"filterBtn\\\" class=\\\"btn btn-sm btn-info-outline\\\" (click)=\\\"filterDisplay = true\\\" >\\n            <i class=\\\"fa fa-filter\\\"></i> {{ 'Requests.Filter' | translate }}</button>\\n       </span>\\n\\n        </div>\\n     \\n           \\n</div>\\n<br />\\n\\n\\n<div infinite-scroll [infiniteScrollDistance]=\\\"1\\\" [infiniteScrollThrottle]=\\\"100\\\" (scrolled)=\\\"loadMore()\\\">\\n\\n\\n    <div *ngFor=\\\"let request of movieRequests\\\">\\n\\n\\n        <div class=\\\"row\\\">\\n            <div class=\\\"myBg backdrop\\\" [style.background-image]=\\\"request.backgroundPath\\\"></div>\\n            <div class=\\\"tint\\\" style=\\\"background-image: linear-gradient(to bottom, rgba(0,0,0,0.6) 0%,rgba(0,0,0,0.6) 100%);\\\"></div>\\n            <div class=\\\"col-sm-2 small-padding\\\">\\n\\n                <img class=\\\"img-responsive poster\\\" src=\\\"https://image.tmdb.org/t/p/w300/{{request.posterPath}}\\\" alt=\\\"poster\\\">\\n\\n            </div>\\n\\n            <div class=\\\"col-sm-5 small-padding\\\">\\n                <div>\\n                    <a href=\\\"http://www.imdb.com/title/{{request.imdbId}}/\\\" target=\\\"_blank\\\">\\n                        <h4 class=\\\"request-title\\\">{{request.title}} ({{request.releaseDate | date: 'yyyy'}})</h4>\\n                    </a>\\n                </div>\\n                <br />\\n                <div>\\n                    <span>{{ 'Requests.RequestedBy' | translate }} </span>\\n                    <span *ngIf=\\\"!isAdmin\\\">{{request.requestedUser.userName}}</span>\\n                    <span *ngIf=\\\"isAdmin && request.requestedUser.alias\\\">{{request.requestedUser.alias}}</span>\\n                    <span *ngIf=\\\"isAdmin && !request.requestedUser.alias\\\">{{request.requestedUser.userName}}</span>\\n                </div>\\n                <div>\\n                    <span>{{ 'Requests.Status' | translate }} </span>\\n                    <span class=\\\"label label-success\\\" id=\\\"requestedStatusLabel\\\">{{request.status}}</span>\\n                </div>\\n\\n                <div>\\n                    <span>{{ 'Requests.RequestStatus' | translate }} </span>\\n                    <span *ngIf=\\\"request.available\\\" class=\\\"label label-success\\\" id=\\\"availableLabel\\\" [translate]=\\\"'Common.Available'\\\"></span>\\n                    <span *ngIf=\\\"request.approved && !request.available\\\" id=\\\"processingRequestLabel\\\" class=\\\"label label-info\\\" [translate]=\\\"'Common.ProcessingRequest'\\\"></span>\\n                    <span *ngIf=\\\"request.denied\\\" class=\\\"label label-danger\\\" id=\\\"requestDeclinedLabel\\\" [translate]=\\\"'Common.RequestDenied'\\\"></span>\\n                    <span *ngIf=\\\"request.deniedReason\\\" title=\\\"{{request.deniedReason}}\\\">\\n                        <i class=\\\"fa fa-info-circle\\\"></i>\\n                    </span>\\n                    <span *ngIf=\\\"!request.approved && !request.availble && !request.denied\\\" id=\\\"pendingApprovalLabel\\\" class=\\\"label label-warning\\\"\\n                        [translate]=\\\"'Common.PendingApproval'\\\"></span>\\n\\n                </div>\\n                <div *ngIf=\\\"request.denied\\\" id=\\\"requestDenied\\\">\\n                    {{ 'Requests.Denied' | translate }}\\n                    <i style=\\\"color:red;\\\" class=\\\"fa fa-check\\\"></i>\\n\\n                </div>\\n\\n\\n                <div id=\\\"releaseDate\\\">{{ 'Requests.ReleaseDate' | translate }} {{request.releaseDate | date}}</div>\\n                <div id=\\\"requestedDate\\\">{{ 'Requests.RequestDate' | translate }} {{request.requestedDate | date}}</div>\\n                <br />\\n                <div *ngIf=\\\"isAdmin\\\">\\n                    <div *ngIf=\\\"request.qualityOverrideTitle\\\">{{ 'Requests.QualityOverride' | translate }}\\n                        <span>{{request.qualityOverrideTitle}} </span>\\n                    </div>\\n                    <div *ngIf=\\\"request.rootPathOverrideTitle\\\">{{ 'Requests.RootFolderOverride' | translate }}\\n                        <span>{{request.rootPathOverrideTitle}} </span>\\n                    </div>\\n                </div>\\n\\n            </div>\\n            <div class=\\\"col-sm-3 col-sm-push-3  small-padding\\\">\\n                <div *ngIf=\\\"isAdmin\\\">\\n                    <div *ngIf=\\\"!request.approved\\\" id=\\\"approveBtn\\\">\\n                        <form>\\n                            <button (click)=\\\"approve(request)\\\" style=\\\"text-align: right\\\" class=\\\"btn btn-sm btn-success-outline approve\\\" type=\\\"submit\\\">\\n                                <i class=\\\"fa fa-plus\\\"></i> {{ 'Common.Approve' | translate }}</button>\\n                        </form>\\n\\n                        <!--Radarr Root Folder-->\\n                        <div *ngIf=\\\"radarrRootFolders\\\" class=\\\"btn-group btn-split\\\" id=\\\"rootFolderBtn\\\">\\n                            <button type=\\\"button\\\" class=\\\"btn btn-sm btn-warning-outline\\\">\\n                                <i class=\\\"fa fa-plus\\\"></i> {{ 'Requests.ChangeRootFolder' | translate }}</button>\\n                            <button type=\\\"button\\\" class=\\\"btn btn-warning-outline dropdown-toggle\\\" data-toggle=\\\"dropdown\\\" aria-haspopup=\\\"true\\\" aria-expanded=\\\"false\\\">\\n                                <span class=\\\"caret\\\"></span>\\n                                <span class=\\\"sr-only\\\">Toggle Dropdown</span>\\n                            </button>\\n                            <ul class=\\\"dropdown-menu\\\">\\n                                <li *ngFor=\\\"let folder of radarrRootFolders\\\">\\n                                    <a href=\\\"#\\\" (click)=\\\"selectRootFolder(request, folder, $event)\\\">{{folder.path}}</a>\\n                                </li>\\n                            </ul>\\n                        </div>\\n\\n                        <!--Radarr Quality Profiles -->\\n                        <div *ngIf=\\\"radarrProfiles\\\" class=\\\"btn-group btn-split\\\" id=\\\"changeQualityBtn\\\">\\n                            <button type=\\\"button\\\" class=\\\"btn btn-sm btn-warning-outline\\\">\\n                                <i class=\\\"fa fa-plus\\\"></i> {{ 'Requests.ChangeQualityProfile' | translate }}</button>\\n                            <button type=\\\"button\\\" class=\\\"btn btn-warning-outline dropdown-toggle\\\" data-toggle=\\\"dropdown\\\" aria-haspopup=\\\"true\\\" aria-expanded=\\\"false\\\">\\n                                <span class=\\\"caret\\\"></span>\\n                                <span class=\\\"sr-only\\\">Toggle Dropdown</span>\\n                            </button>\\n                            <ul class=\\\"dropdown-menu\\\">\\n                                <li *ngFor=\\\"let profile of radarrProfiles\\\">\\n                                    <a href=\\\"#\\\" (click)=\\\"selectQualityProfile(request, profile, $event)\\\">{{profile.name}}</a>\\n                                </li>\\n                            </ul>\\n                        </div>\\n\\n                        <div *ngIf=\\\"!request.denied\\\" id=\\\"denyBtn\\\">\\n                            <button type=\\\"button\\\" (click)=\\\"deny(request)\\\" class=\\\"btn btn-sm btn-danger-outline deny\\\">\\n                                <i class=\\\"fa fa-times\\\"></i> {{ 'Requests.Deny' | translate }}</button>\\n                        </div>\\n                    </div>\\n                    <form id=\\\"removeBtn\\\">\\n                        <button (click)=\\\"removeRequest(request)\\\" style=\\\"text-align: right\\\" class=\\\"btn btn-sm btn-danger-outline delete\\\">\\n                            <i class=\\\"fa fa-minus\\\"></i> {{ 'Requests.Remove' | translate }}</button>\\n                    </form>\\n\\n                    <form id=\\\"markBtnGroup\\\">\\n                        <button id=\\\"unavailableBtn\\\" *ngIf=\\\"request.available\\\" (click)=\\\"changeAvailability(request, false)\\\" style=\\\"text-align: right\\\" value=\\\"false\\\" class=\\\"btn btn-sm btn-info-outline change\\\">\\n                            <i class=\\\"fa fa-minus\\\"></i> {{ 'Requests.MarkUnavailable' | translate }}</button>\\n                        <button id=\\\"availableBtn\\\" *ngIf=\\\"!request.available\\\" (click)=\\\"changeAvailability(request, true)\\\" style=\\\"text-align: right\\\" value=\\\"true\\\" class=\\\"btn btn-sm btn-success-outline change\\\">\\n                            <i class=\\\"fa fa-plus\\\"></i> {{ 'Requests.MarkAvailable' | translate }}</button>\\n                    </form>\\n\\n\\n\\n                </div>\\n\\n                <div class=\\\"dropdown\\\" *ngIf=\\\"issueCategories && issuesEnabled\\\" id=\\\"issuesBtn\\\">\\n                    <button class=\\\"btn btn-sm btn-primary-outline dropdown-toggle\\\" type=\\\"button\\\" data-toggle=\\\"dropdown\\\" aria-haspopup=\\\"true\\\"\\n                        aria-expanded=\\\"true\\\">\\n                        <i class=\\\"fa fa-plus\\\"></i> {{ 'Requests.ReportIssue' | translate }}\\n                        <span class=\\\"caret\\\"></span>\\n                    </button>\\n                    <ul class=\\\"dropdown-menu\\\" aria-labelledby=\\\"dropdownMenu1\\\">\\n                        <li *ngFor=\\\"let cat of issueCategories\\\">\\n                            <a [routerLink]=\\\"\\\" (click)=\\\"reportIssue(cat, request)\\\">{{cat.value}}</a>\\n                        </li>\\n                    </ul>\\n                </div>\\n\\n            </div>\\n        </div>\\n        <br/>\\n        <br/>\\n\\n\\n\\n\\n    </div>\\n</div>\\n\\n\\n<issue-report [movie]=\\\"true\\\" [visible]=\\\"issuesBarVisible\\\" (visibleChange)=\\\"issuesBarVisible = $event;\\\" [title]=\\\"issueRequest?.title\\\"\\n    [issueCategory]=\\\"issueCategorySelected\\\" [id]=\\\"issueRequest?.id\\\" [providerId]=\\\"\\\"></issue-report>\\n\\n\\n<p-sidebar [(visible)]=\\\"filterDisplay\\\" styleClass=\\\"ui-sidebar-md side-back side-small\\\">\\n    <h3>{{ 'Filter.Filter' | translate }}</h3>\\n    <hr>\\n\\n    <h4>{{ 'Filter.FilterHeaderAvailability' | translate }}</h4>\\n    <div class=\\\"form-group\\\">\\n        <div class=\\\"radio\\\">\\n            <input type=\\\"radio\\\" id=\\\"Available\\\" name=\\\"Availability\\\" (click)=\\\"filterAvailability(filterType.Available)\\\">\\n            <label for=\\\"Available\\\">{{ 'Common.Available' | translate }}</label>\\n        </div>\\n    </div>\\n    <div class=\\\"form-group\\\">\\n        <div class=\\\"radio\\\">\\n            <input type=\\\"radio\\\" id=\\\"notAvailable\\\" name=\\\"Availability\\\" (click)=\\\"filterAvailability(filterType.NotAvailable)\\\">\\n            <label for=\\\"notAvailable\\\">{{ 'Common.NotAvailable' | translate }}</label>\\n        </div>\\n    </div>\\n\\n    <h4>{{ 'Filter.FilterHeaderRequestStatus' | translate }}</h4>\\n    <div class=\\\"form-group\\\">\\n        <div class=\\\"radio\\\">\\n            <input type=\\\"radio\\\" id=\\\"approved\\\" name=\\\"Status\\\" (click)=\\\"filterStatus(filterType.Approved)\\\">\\n            <label for=\\\"approved\\\">{{ 'Filter.Approved' | translate }}</label>\\n        </div>\\n    </div>\\n    <div class=\\\"form-group\\\">\\n        <div class=\\\"radio\\\">\\n            <input type=\\\"radio\\\" id=\\\"Processing\\\" name=\\\"Status\\\" (click)=\\\"filterStatus(filterType.Processing)\\\">\\n            <label for=\\\"Processing\\\">{{ 'Common.ProcessingRequest' | translate }}</label>\\n        </div>\\n    </div>\\n\\n    <button class=\\\"btn btn-sm btn-primary-outline\\\" (click)=\\\"clearFilter()\\\">\\n        <i class=\\\"fa fa-filter\\\"></i> {{ 'Requests.ClearFilter' | translate }}</button>\\n</p-sidebar>\";\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./ClientApp/app/requests/movierequests.component.html\n// module id = 277\n// module chunks = 1","\nimport { Component, OnInit } from \"@angular/core\";\n\nimport { IIssueCategory } from \"./../interfaces\";\nimport { IssuesService, SettingsService } from \"./../services\";\n\n@Component({\n    template: require('./request.component.html'),\n})\nexport class RequestComponent implements OnInit  {\n\n    public showMovie = true;\n    public showTv = false;\n\n    public issueCategories: IIssueCategory[];\n    public issuesEnabled = false;\n\n    constructor(private issuesService: IssuesService,\n                private settingsService: SettingsService) {\n\n    }\n\n    public ngOnInit(): void {\n        this.issuesService.getCategories().subscribe(x => this.issueCategories = x);\n        this.settingsService.getIssueSettings().subscribe(x => this.issuesEnabled = x.enabled);\n    }\n\n    public selectMovieTab() {\n        this.showMovie = true;\n        this.showTv = false;\n    }\n\n    public selectTvTab() {\n        this.showMovie = false;\n        this.showTv = true;\n    }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./node_modules/angular2-template-loader!./node_modules/angular-router-loader/src!./ClientApp/app/requests/request.component.ts","module.exports = \"<h1 id=\\\"searchTitle\\\"  [translate]=\\\"'Requests.Title'\\\"></h1>\\n<h4  [translate]=\\\"'Requests.Paragraph'\\\"></h4>\\n\\n<ul id=\\\"nav-tabs\\\" class=\\\"nav nav-tabs\\\" role=\\\"tablist\\\">\\n    <li role=\\\"presentation\\\" class=\\\"active\\\">\\n        <a id=\\\"movieTabButton\\\" aria-controls=\\\"home\\\" role=\\\"tab\\\" data-toggle=\\\"tab\\\" (click)=\\\"selectMovieTab()\\\"><i class=\\\"fa fa-film\\\"></i> {{ 'Requests.MoviesTab' | translate }}</a>\\n    </li>\\n    <li role=\\\"presentation\\\">\\n        <a id=\\\"tvTabButton\\\" aria-controls=\\\"profile\\\" role=\\\"tab\\\" data-toggle=\\\"tab\\\" (click)=\\\"selectTvTab()\\\"><i class=\\\"fa fa-television\\\"></i> {{ 'Requests.TvTab' | translate }}</a>\\n\\n    </li>\\n</ul>\\n\\n<!-- Tab panes -->\\n<div class=\\\"tab-content\\\">\\n    <div [hidden]=\\\"!showMovie\\\">\\n        <movie-requests [issueCategories]=\\\"issueCategories\\\" [issuesEnabled]=\\\"issuesEnabled\\\"></movie-requests>\\n    </div>\\n    <div [hidden]=\\\"!showTv\\\">\\n        <tv-requests [issueCategories]=\\\"issueCategories\\\" [issuesEnabled]=\\\"issuesEnabled\\\"></tv-requests>\\n    </div>\\n</div>\\n\\n\";\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./ClientApp/app/requests/request.component.html\n// module id = 279\n// module chunks = 1","import { Component, EventEmitter, Input, Output } from \"@angular/core\";\nimport { IChildRequests, IIssueCategory } from \"../interfaces\";\n\nimport { NotificationService, RequestService } from \"../services\";\n\n@Component({\n    selector:\"tvrequests-children\",\n    template: require('./tvrequest-children.component.html'),\n})\nexport class TvRequestChildrenComponent {\n    @Input() public childRequests: IChildRequests[];\n    @Input() public isAdmin: boolean;\n\n    @Output() public requestDeleted = new EventEmitter<number>();\n\n    @Input() public issueCategories: IIssueCategory[];\n    @Input() public issuesEnabled: boolean;\n    @Input() public issueProviderId: string;\n    public issuesBarVisible = false;\n    public issueRequest: IChildRequests;\n    public issueCategorySelected: IIssueCategory;\n\n    constructor(private requestService: RequestService,\n                private notificationService: NotificationService) { }\n\n    public removeRequest(request: IChildRequests) {\n        this.requestService.deleteChild(request)\n            .subscribe(x => {\n                this.removeRequestFromUi(request);\n                this.requestDeleted.emit(request.id);\n            });       \n    }\n\n    public changeAvailability(request: IChildRequests, available: boolean) {\n        request.available = available;\n        request.seasonRequests.forEach((season)=> {\n            season.episodes.forEach((ep)=> {\n                ep.available = available;\n            });\n        });\n        if(available) {\n            this.requestService.markTvAvailable({ id: request.id }).subscribe(x => {\n                if (x.result) {\n                    this.notificationService.success(\n                        `This request is now available`);\n                } else {\n                    this.notificationService.warning(\"Request Available\", x.message ? x.message : x.errorMessage);\n                    request.approved = false;\n                }\n            });\n        } else {\n            this.requestService.markTvUnavailable({ id: request.id }).subscribe(x => {\n                if (x.result) {\n                    this.notificationService.success(\n                    `This request is now unavailable`);\n                } else {\n                    this.notificationService.warning(\"Request Available\", x.message ? x.message : x.errorMessage);\n                    request.approved = false;\n                }\n            });\n        }\n    }\n\n    public deny(request: IChildRequests) {\n        request.denied = true;\n\n        request.seasonRequests.forEach((season) => {\n            season.episodes.forEach((ep) => {\n                ep.approved = false;\n            });\n        });\n        this.requestService.denyChild({ id: request.id })\n            .subscribe(x => {\n                if (x.result) {\n                    this.notificationService.success(\n                        `Request has been denied successfully`);\n                } else {\n                    this.notificationService.warning(\"Request Denied\", x.message ? x.message : x.errorMessage);\n                    request.approved = false;\n                }\n            });\n    }\n\n    public approve(request: IChildRequests) {\n        request.approved = true;\n        request.denied = false;\n        request.seasonRequests.forEach((season) => {\n            season.episodes.forEach((ep) => {\n                ep.approved = true;\n            });\n        });\n        this.requestService.approveChild({ id: request.id })\n            .subscribe(x => {\n                if (x.result) {\n                    this.notificationService.success(\n                        `Request has been approved successfully`);\n                } else {\n                    this.notificationService.warning(\"Request Approved\", x.message ? x.message : x.errorMessage);\n                    request.approved = false;\n                }\n            });\n    }\n\n    public reportIssue(catId: IIssueCategory, req: IChildRequests) {\n        this.issueRequest = req;\n        this.issueCategorySelected = catId;\n        this.issuesBarVisible = true;\n    }\n\n    private removeRequestFromUi(key: IChildRequests) {\n        const index = this.childRequests.indexOf(key, 0);\n        if (index > -1) {\n            this.childRequests.splice(index, 1);\n        }\n    }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./node_modules/angular2-template-loader!./node_modules/angular-router-loader/src!./ClientApp/app/requests/tvrequest-children.component.ts","module.exports = \"<div *ngIf=\\\"childRequests\\\">\\n    <hr />\\n    <div *ngFor=\\\"let child of childRequests\\\">\\n        <div class=\\\"col-md-12\\\">\\n\\n            <div class=\\\"col-md-2\\\">\\n                <span [translate]=\\\"'Requests.RequestedBy'\\\"></span>\\n                \\n                <span *ngIf=\\\"!isAdmin\\\">{{child.requestedUser.userName}}</span>\\n                <span *ngIf=\\\"isAdmin && child.requestedUser.alias\\\">{{child.requestedUser.alias}}</span>\\n                <span *ngIf=\\\"isAdmin && !child.requestedUser.alias\\\">{{child.requestedUser.userName}}</span>\\n            </div>\\n\\n\\n            <div class=\\\"col-md-1 col-md-push-9\\\">\\n              <div *ngIf=\\\"isAdmin\\\"> \\n                    <button id=\\\"approveBtn\\\" *ngIf=\\\"child.canApprove && !child.approved\\\" (click)=\\\"approve(child)\\\" class=\\\"btn btn-sm btn-success-outline\\\" type=\\\"submit\\\"><i class=\\\"fa fa-plus\\\"></i> {{ 'Common.Approve' | translate }}</button>\\n                    <button id=\\\"unavailableBtn\\\" *ngIf=\\\"child.available\\\" (click)=\\\"changeAvailability(child, false)\\\" style=\\\"text-align: right\\\" value=\\\"false\\\" class=\\\"btn btn-sm btn-info-outline change\\\"><i class=\\\"fa fa-minus\\\"></i> {{ 'Requests.MarkUnavailable' | translate }}</button>\\n                    <button id=\\\"availableBtn\\\" *ngIf=\\\"!child.available\\\" (click)=\\\"changeAvailability(child, true)\\\" style=\\\"text-align: right\\\" value=\\\"true\\\" class=\\\"btn btn-sm btn-success-outline change\\\"><i class=\\\"fa fa-plus\\\"></i> {{ 'Requests.MarkAvailable' | translate }}</button>\\n\\n                    <button id=\\\"denyBtn\\\" *ngIf=\\\"!child.denied\\\" type=\\\"button\\\" (click)=\\\"deny(child)\\\" class=\\\"btn btn-sm btn-danger-outline deny\\\"><i class=\\\"fa fa-times\\\"></i> {{ 'Requests.Deny' | translate }}</button>\\n           \\n                    <button id=\\\"removeBtn\\\" type=\\\"button\\\" (click)=\\\"removeRequest(child)\\\" class=\\\"btn btn-sm btn-danger-outline deny\\\"><i class=\\\"fa fa-times\\\"></i> {{ 'Requests.Remove' | translate }}</button>\\n                </div>\\n                <div class=\\\"dropdown\\\" *ngIf=\\\"issueCategories && issuesEnabled\\\" id=\\\"issueBtn\\\">\\n                        <button class=\\\"btn btn-sm btn-primary-outline dropdown-toggle\\\" type=\\\"button\\\" data-toggle=\\\"dropdown\\\" aria-haspopup=\\\"true\\\" aria-expanded=\\\"true\\\">\\n                            <i class=\\\"fa fa-plus\\\"></i> {{ 'Requests.ReportIssue' | translate }}\\n                            <span class=\\\"caret\\\"></span>\\n                        </button>\\n                        <ul class=\\\"dropdown-menu\\\" aria-labelledby=\\\"dropdownMenu1\\\">\\n                            <li *ngFor=\\\"let cat of issueCategories\\\"><a [routerLink]=\\\"\\\" (click)=\\\"reportIssue(cat, child)\\\">{{cat.value}}</a></li>\\n                        </ul>\\n                    </div>\\n                \\n            </div>\\n        </div>\\n        <div class=\\\"col-md-12\\\">\\n            <ngb-tabset>\\n\\n                <div *ngFor=\\\"let season of child.seasonRequests\\\">\\n                    <ngb-tab [id]=\\\"season.seasonNumber\\\" [title]=\\\"season.seasonNumber\\\">\\n                        <ng-template ngbTabContent>\\n                            <h2>{{ 'Requests.Season' | translate }} {{season.seasonNumber}}</h2>\\n\\n                            <table class=\\\"table table-striped table-hover table-responsive table-condensed\\\">\\n                                <thead>\\n                                    <tr>\\n                                        <th>\\n                                            <a>\\n                                                #\\n                                            </a>\\n                                        </th>\\n                                        <th>\\n                                            <a>\\n                                                {{ 'Requests.GridTitle' | translate }}\\n                                            </a>\\n                                        </th>\\n                                        <th>\\n                                            <a>\\n                                                {{ 'Requests.AirDate' | translate }}\\n                                            </a>\\n                                        </th>\\n                                        <th>\\n                                            <a>\\n                                                {{ 'Requests.GridStatus' | translate }}\\n                                            </a>\\n                                        </th>\\n                                    </tr>\\n                                </thead>\\n                                <tbody>\\n                                    <tr *ngFor=\\\"let ep of season.episodes\\\">\\n                                        <td>\\n                                            {{ep.episodeNumber}}\\n                                        </td>\\n                                        <td>\\n                                            {{ep.title}}\\n                                        </td>\\n                                        <td>\\n                                            {{ep.airDate | date: 'dd/MM/yyyy' }}\\n                                        </td>\\n                                        <td>\\n                                            <span *ngIf=\\\"child.denied\\\" class=\\\"label label-danger\\\" id=\\\"deniedLabel\\\" [translate]=\\\"'Common.Denied'\\\"></span>\\n                                            <span *ngIf=\\\"!child.denied && ep.available\\\" class=\\\"label label-success\\\" id=\\\"availableLabel\\\" [translate]=\\\"'Common.Available'\\\"></span>\\n                                            <span *ngIf=\\\"!child.denied &&ep.approved && !ep.available\\\" class=\\\"label label-info\\\" id=\\\"processingRequestLabel\\\" [translate]=\\\"'Common.ProcessingRequest'\\\"></span>\\n                                            <div *ngIf=\\\"!child.denied && !ep.approved\\\">\\n                                                <div *ngIf=\\\"!ep.available\\\"><span class=\\\"label label-warning\\\" id=\\\"pendingApprovalLabel\\\" [translate]=\\\"'Common.PendingApproval'\\\"></span></div>\\n                                            </div>\\n                                            \\n                                        </td>\\n                                    </tr>\\n                                </tbody>\\n                            </table>\\n                        </ng-template>\\n                    </ngb-tab>\\n                </div>\\n            </ngb-tabset>\\n        </div>\\n        <br />\\n        <br />\\n        <hr />\\n    </div>\\n\\n</div>\\n\\n\\n\\n<issue-report [movie]=\\\"false\\\" [visible]=\\\"issuesBarVisible\\\" [title]=\\\"issueRequest?.title\\\"\\n[issueCategory]=\\\"issueCategorySelected\\\" [id]=\\\"issueRequest?.id\\\" (visibleChange)=\\\"issuesBarVisible = $event;\\\"></issue-report>\";\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./ClientApp/app/requests/tvrequest-children.component.html\n// module id = 281\n// module chunks = 1","import { Component, Input, OnInit } from \"@angular/core\";\nimport { DomSanitizer } from \"@angular/platform-browser\";\nimport \"rxjs/add/operator/debounceTime\";\nimport \"rxjs/add/operator/distinctUntilChanged\";\nimport \"rxjs/add/operator/map\";\nimport { Subject } from \"rxjs/Subject\";\nimport { ImageService } from \"./../services/image.service\";\n\nimport \"rxjs/add/operator/debounceTime\";\nimport \"rxjs/add/operator/distinctUntilChanged\";\nimport \"rxjs/add/operator/map\";\n\nimport { AuthService } from \"../auth/auth.service\";\nimport { RequestService } from \"../services\";\n\nimport { TreeNode } from \"primeng/primeng\";\nimport { IIssueCategory, ITvRequests } from \"../interfaces\";\n\n@Component({\n    selector: \"tv-requests\",\n    template: require('./tvrequests.component.html'),\n    styles: [require('./tvrequests.component.scss')],\n})\nexport class TvRequestsComponent implements OnInit {\n\n    public tvRequests: TreeNode[];\n    public searchChanged = new Subject<string>();\n    public searchText: string;\n    public isAdmin: boolean;\n    public showChildDialogue = false; // This is for the child modal popup\n    public selectedSeason: ITvRequests;\n\n    @Input() public issueCategories: IIssueCategory[];\n    @Input() public issuesEnabled: boolean;\n    public issueProviderId: string;\n\n    private currentlyLoaded: number;\n    private amountToLoad: number;\n\n    constructor(private requestService: RequestService,\n                private auth: AuthService,\n                private sanitizer: DomSanitizer,\n                private imageService: ImageService) {\n        this.searchChanged\n            .debounceTime(600) // Wait Xms after the last event before emitting last event\n            .distinctUntilChanged() // only emit if value is different from previous value\n            .subscribe(x => {\n                this.searchText = x as string;\n                if (this.searchText === \"\") {\n                    this.resetSearch();\n                    return;\n                }\n                this.requestService.searchTvRequestsTree(this.searchText)\n                    .subscribe(m => {\n                        this.tvRequests = m;\n                        this.tvRequests.forEach((val) => this.loadBackdrop(val));\n                    });\n            });\n    }\n    public openClosestTab(el: any) {\n        const rowclass = \"undefined ng-star-inserted\";\n        el = el.toElement || el.relatedTarget || el.target;\n        while (el.className !== rowclass) {\n            // Increment the loop to the parent node until we find the row we need\n            el = el.parentNode;\n        }\n        // At this point, the while loop has stopped and `el` represents the element that has\n        // the class you specified\n\n        // Then we loop through the children to find the caret which we want to click\n        const caretright = \"fa-caret-right\";\n        const caretdown = \"fa-caret-down\";\n        for (const value of el.children) {\n            // the caret from the ui has 2 class selectors depending on if expanded or not\n            // we search for both since we want to still toggle the clicking\n            if (value.className.includes(caretright) || value.className.includes(caretdown)) {\n                // Then we tell JS to click the element even though we hid it from the UI\n                value.click();\n                //Break from loop since we no longer need to continue looking\n                break;\n            }\n        }\n    }\n\n    public ngOnInit() {\n        this.amountToLoad = 1000;\n        this.currentlyLoaded = 1000;\n        this.tvRequests = [];\n        this.loadInit();\n        this.isAdmin = this.auth.hasRole(\"admin\") || this.auth.hasRole(\"poweruser\");\n    }\n\n    public loadMore() {\n        //TODO: I believe this +1 is causing off by one error skipping loading of tv shows\n        //When removed and scrolling very slowly everything works as expected, however\n        //if you scroll really quickly then you start getting duplicates of movies\n        //since it's async and some subsequent results return first and then incrementer\n        //is increased so you see movies which had already been gotten show up...\n        this.requestService.getTvRequestsTree(this.amountToLoad, this.currentlyLoaded + 1)\n            .subscribe(x => {\n                this.tvRequests = x;\n                this.currentlyLoaded = this.currentlyLoaded + this.amountToLoad;\n            });\n    }\n\n    public search(text: any) {\n        this.searchChanged.next(text.target.value);\n    }\n\n    public showChildren(request: ITvRequests) {\n        this.selectedSeason = request;\n        this.showChildDialogue = true;\n    }\n\n    public childRequestDeleted(childId: number): void {\n        // Refresh the UI, hackly way around reloading the data\n        this.ngOnInit();\n    }\n\n    private loadInit() {\n        this.requestService.getTvRequestsTree(this.amountToLoad, 0)\n            .subscribe(x => {\n                this.tvRequests = x;\n                this.tvRequests.forEach((val, index) => {\n                    this.loadBackdrop(val);\n            });     \n        });\n    }\n\n    private resetSearch() {\n        this.currentlyLoaded = 5;\n        this.loadInit();\n    }\n    private loadBackdrop(val: TreeNode): void {\n        this.imageService.getTvBanner(val.data.id).subscribe(x => {\n            val.data.background = this.sanitizer.bypassSecurityTrustStyle\n                (\"url(\" + x + \")\");\n            });\n    }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./node_modules/angular2-template-loader!./node_modules/angular-router-loader/src!./ClientApp/app/requests/tvrequests.component.ts","module.exports = \"<div class=\\\"form-group\\\">\\n    <div>\\n        <input type=\\\"text\\\" id=\\\"search\\\" class=\\\"form-control form-control-custom\\\" placeholder=\\\"Search\\\" (keyup)=\\\"search($event)\\\">\\n    </div>\\n</div>\\n<br />\\n<!--TODO: I believe this +1 is causing off by one error skipping loading of tv shows\\n    When removed and scrolling very slowly everything works as expected, however\\n    if you scroll really quickly then you start getting duplicates of movies\\n    since it's async and some subsequent results return first and then incrementer\\n    is increased so you see movies which had already been gotten show up...\\n    \\n    Removing infinte-scroll and setting max to 1000 till we work out some sort of fix\\n\\n    -->\\n<!--<div infinite-scroll\\n     [infiniteScrollDistance]=\\\"1\\\"\\n     [infiniteScrollThrottle]=\\\"100\\\"\\n     (scrolled)=\\\"loadMore()\\\">-->\\n    <div>\\n    <p-treeTable [value]=\\\"tvRequests\\\">\\n\\n        <p-column>\\n            <ng-template let-col let-node=\\\"rowData\\\" pTemplate=\\\"header\\\">\\n                Results\\n            </ng-template>\\n            <ng-template let-col let-node=\\\"rowData\\\" pTemplate=\\\"body\\\">\\n                <!--This is the section that holds the parent level results set-->\\n                <div *ngIf=\\\"!node.leaf\\\">\\n                    <div class=\\\"row\\\">                        \\n                        <div class=\\\"myBg backdrop\\\" [style.background-image]=\\\"node?.data?.background\\\"></div>\\n                        <div class=\\\"tint\\\" style=\\\"background-image: linear-gradient(to bottom, rgba(0,0,0,0.6) 0%,rgba(0,0,0,0.6) 100%);\\\"></div>\\n\\n                        <div class=\\\"col-sm-2  small-padding\\\" >\\n\\n                            <img class=\\\"img-responsive poster\\\" src=\\\"{{node.data.posterPath || null}}\\\" alt=\\\"poster\\\">\\n\\n                        </div>\\n\\n                        <div class=\\\"col-sm-5  small-padding\\\">\\n                            <div>\\n                                <a href=\\\"http://www.imdb.com/title/{{node.data.imdbId}}/\\\" target=\\\"_blank\\\">\\n                                    <h4 class=\\\"request-title\\\">{{node.data.title}} ({{node.data.releaseDate | date: 'yyyy'}})</h4>\\n                                </a>\\n                            </div>\\n                            <br />\\n                            <div>\\n                                <span>Status: </span>\\n                                <span class=\\\"label label-success\\\">{{node.data.status}}</span>\\n                            </div>\\n\\n    \\n                            <div>Release Date: {{node.data.releaseDate | date}}</div>\\n                            <br />\\n                        </div>\\n                        <div class=\\\"col-sm-3 col-sm-push-3  small-padding\\\">\\n\\n                            <button  style=\\\"text-align: right\\\" class=\\\"btn btn-sm btn-success-outline\\\" (click)=\\\"openClosestTab($event)\\\"><i class=\\\"fa fa-plus\\\"></i> View</button>\\n                        </div>\\n                    </div>\\n                </div>\\n                <!--This is the section that holds the child seasons if they want to specify specific episodes-->\\n                <div *ngIf=\\\"node.leaf\\\">\\n                    <tvrequests-children [childRequests]=\\\"node.data\\\" [isAdmin] =\\\"isAdmin\\\" (requestDeleted)=\\\"childRequestDeleted($event)\\\" [issueCategories]=\\\"issueCategories\\\" [issuesEnabled]=\\\"issuesEnabled\\\" [issueProviderId]=\\\"node.data.tvDbId\\\" ></tvrequests-children>\\n                </div>\\n            </ng-template>\\n        </p-column>\\n    </p-treeTable>\\n\\n</div>\\n\";\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./ClientApp/app/requests/tvrequests.component.html\n// module id = 283\n// module chunks = 1"],"sourceRoot":""}