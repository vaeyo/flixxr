{"version":3,"sources":["webpack:///./ClientApp/app/usermanagement/usermanagement.module.ts","webpack:///./ClientApp/app/interfaces/index.ts","webpack:///./ClientApp/app/interfaces/INotificationSettings.ts","webpack:///./ClientApp/app/interfaces/IRequestModel.ts","webpack:///./ClientApp/app/interfaces/IUser.ts","webpack:///./ClientApp/app/interfaces/IIssues.ts","webpack:///./ClientApp/app/pipes/pipe.module.ts","webpack:///./ClientApp/app/pipes/HumanizePipe.ts","webpack:///delegated ./node_modules/ngx-order-pipe/ngx-order-pipe.es5.js from dll-reference vendor_a449fdf94c391aac3fe0","webpack:///./ClientApp/app/usermanagement/updatedetails.component.ts","webpack:///./ClientApp/app/usermanagement/updatedetails.component.html","webpack:///./ClientApp/app/usermanagement/usermanagement-add.component.ts","webpack:///./ClientApp/app/usermanagement/usermanagement-add.component.html","webpack:///./ClientApp/app/usermanagement/usermanagement-edit.component.ts","webpack:///./ClientApp/app/usermanagement/usermanagement-edit.component.html","webpack:///./ClientApp/app/usermanagement/usermanagement.component.ts","webpack:///./ClientApp/app/usermanagement/usermanagement.component.html"],"names":["common_1","__webpack_require__","core_1","forms_1","router_1","primeng_1","ng_bootstrap_1","updatedetails_component_1","usermanagement_add_component_1","usermanagement_edit_component_1","usermanagement_component_1","pipe_module_1","services_1","auth_guard_1","ngx_order_pipe_1","routes","path","component","UserManagementComponent","canActivate","AuthGuard","UserManagementAddComponent","UserManagementEditComponent","UpdateDetailsComponent","UserManagementModule","__decorate","NgModule","imports","CommonModule","FormsModule","ReactiveFormsModule","RouterModule","forChild","NgbModule","forRoot","MultiSelectModule","PipeModule","ConfirmDialogModule","TooltipModule","OrderModule","SidebarModule","declarations","exports","providers","IdentityService","ConfirmationService","__export","NotificationAgent","NotificationType","RequestType","FilterType","UserType","IssueStatus","HumanizePipe_1","ngModule","PipeModule_1","HumanizePipe","prototype","transform","value","split","join","toUpperCase","slice","Pipe","name","module","services_2","identityService","notificationService","fb","this","ngOnInit","_this","getUser","subscribe","x","localUser","form","group","id","username","userName","emailAddress","Validators","email","confirmNewPassword","currentPassword","required","password","onSubmit","invalid","error","controls","dirty","updateLocalUser","successful","success","errors","forEach","val","Component","template","NotificationService","FormBuilder","interfaces_1","notificationSerivce","router","getAllAvailableClaims","availableClaims","user","alias","claims","userType","LocalUser","checked","hasLoggedIn","lastLoggedIn","Date","episodeRequestLimit","movieRequestLimit","userAccessToken","create","confirmPass","some","item","enabled","createUser","navigate","Router","router_2","route","confirmationService","params","userId","getUserById","delete","confirm","message","header","icon","accept","deleteUser","reject","resetPassword","submitResetPassword","update","updateUser","ActivatedRoute","settingsService","checkAll","order","reverse","showBulkEdit","users","getUsers","getCustomization","customizationSettings","getEmailNotificationSettings","emailSettings","welcomeEmail","sendWelcomeEmail","checkAllBoxes","hasChecked","bulkUpdate","anyRoles","bulkEpisodeLimit","bulkMovieLimit","y","undefined","setOrder","SettingsService"],"mappings":"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","file":"4.js","sourcesContent":["import { CommonModule } from \"@angular/common\";\nimport { NgModule } from \"@angular/core\";\nimport { FormsModule, ReactiveFormsModule } from \"@angular/forms\";\nimport { RouterModule, Routes } from \"@angular/router\";\nimport { ConfirmationService, ConfirmDialogModule, MultiSelectModule, SidebarModule, TooltipModule } from \"primeng/primeng\";\n\nimport { NgbModule } from \"@ng-bootstrap/ng-bootstrap\";\n\nimport { UpdateDetailsComponent } from \"./updatedetails.component\";\nimport { UserManagementAddComponent } from \"./usermanagement-add.component\";\nimport { UserManagementEditComponent } from \"./usermanagement-edit.component\";\nimport { UserManagementComponent } from \"./usermanagement.component\";\n\nimport { PipeModule } from \"../pipes/pipe.module\";\nimport { IdentityService } from \"../services\";\n\nimport { AuthGuard } from \"../auth/auth.guard\";\n\nimport { OrderModule } from \"ngx-order-pipe\";\n\nconst routes: Routes = [\n    { path: \"\", component: UserManagementComponent, canActivate: [AuthGuard] },\n    { path: \"add\", component: UserManagementAddComponent, canActivate: [AuthGuard] },\n    { path: \"edit/:id\", component: UserManagementEditComponent, canActivate: [AuthGuard] },\n    { path: \"updatedetails\", component: UpdateDetailsComponent, canActivate: [AuthGuard] },\n];\n\n@NgModule({\n    imports: [\n        CommonModule,\n        FormsModule,\n        ReactiveFormsModule,\n        RouterModule.forChild(routes),\n        NgbModule.forRoot(),\n        MultiSelectModule,\n        PipeModule,\n        ConfirmDialogModule,\n        TooltipModule,\n        OrderModule,\n        SidebarModule,\n    ],\n    declarations: [\n        UserManagementComponent,\n        UserManagementAddComponent,\n        UserManagementEditComponent,\n        UpdateDetailsComponent,\n    ],\n    exports: [\n        RouterModule,\n    ],\n    providers: [\n        IdentityService,\n        ConfirmationService,\n    ],\n\n})\nexport class UserManagementModule { }\n\n\n\n// WEBPACK FOOTER //\n// ./node_modules/angular2-template-loader!./node_modules/angular-router-loader/src!./ClientApp/app/usermanagement/usermanagement.module.ts","export * from \"./ICommon\";\nexport * from \"./ICouchPotato\";\nexport * from \"./IImages\";\nexport * from \"./IMediaServerStatus\";\nexport * from \"./INotificationSettings\";\nexport * from \"./IPlex\";\nexport * from \"./IRadarr\";\nexport * from \"./IRequestEngineResult\";\nexport * from \"./IRequestModel\";\nexport * from \"./ISearchMovieResult\";\nexport * from \"./ISearchTvResult\";\nexport * from \"./ISettings\";\nexport * from \"./ISonarr\";\nexport * from \"./IUser\";\nexport * from \"./IIssues\";\n\n\n\n// WEBPACK FOOTER //\n// ./node_modules/angular2-template-loader!./node_modules/angular-router-loader/src!./ClientApp/app/interfaces/index.ts","import { ISettings } from \"./ICommon\";\n\nexport interface INotificationSettings extends ISettings {\n    enabled: boolean;\n}\n\nexport interface IEmailNotificationSettings extends INotificationSettings {\n    host: string;\n    password: string;\n    port: number;\n    senderAddress: string;\n    senderName: string;\n    username: string;\n    authentication: boolean;\n    adminEmail: string;\n    disableTLS: boolean;\n    disableCertificateChecking: boolean;\n    notificationTemplates: INotificationTemplates[];\n}\n\nexport interface INotificationTemplates {\n    subject: string;\n    message: string;\n    notificationType: NotificationType;\n    notificationAgent: NotificationAgent;\n    enabled: boolean;\n}\n\nexport enum NotificationAgent {\n    Email,\n    Discord,\n    Pushbullet,\n    Pushover,\n    Telegram,\n}\n\nexport enum NotificationType {\n    NewRequest,\n    Issue,\n    RequestAvailable,\n    RequestApproved,\n    AdminNote,\n    Test,\n    RequestDeclined,\n    ItemAddedToFaultQueue,\n    WelcomeEmail,\n    IssueResolved,\n}\n\nexport interface IDiscordNotifcationSettings extends INotificationSettings {\n    webhookUrl: string;\n    username: string;\n    notificationTemplates: INotificationTemplates[];\n}\n\nexport interface ITelegramNotifcationSettings extends INotificationSettings {\n    botApi: string;\n    chatId: string;\n    parseMode: string;\n    notificationTemplates: INotificationTemplates[];\n}\n\nexport interface ISlackNotificationSettings extends INotificationSettings {\n    webhookUrl: string;\n    username: string;\n    channel: string;\n    iconEmoji: string;\n    iconUrl: string;\n    notificationTemplates: INotificationTemplates[];\n}\n\nexport interface IPushbulletNotificationSettings extends INotificationSettings {\n    accessToken: string;\n    notificationTemplates: INotificationTemplates[];\n    channelTag: string;\n}\n\nexport interface IPushoverNotificationSettings extends INotificationSettings {\n    accessToken: string;\n    notificationTemplates: INotificationTemplates[];\n    userToken: string;\n}\n\nexport interface IMattermostNotifcationSettings extends INotificationSettings {\n    webhookUrl: string;\n    username: string;\n    channel: string;\n    iconUrl: string;\n    notificationTemplates: INotificationTemplates[];\n}\n\nexport interface IMobileNotifcationSettings extends INotificationSettings {\n    notificationTemplates: INotificationTemplates[];\n}\n\n\n\n// WEBPACK FOOTER //\n// ./node_modules/angular2-template-loader!./node_modules/angular-router-loader/src!./ClientApp/app/interfaces/INotificationSettings.ts","import { IUser } from \"./IUser\";\n\nexport interface IMediaBase {\n  imdbId: string;\n  id: number;\n  providerId: number;\n  title: string;\n  overview: string;\n  posterPath: string;\n  releaseDate: Date;\n  status: string;\n  requestedDate: Date;\n  approved: boolean;\n  type: RequestType;\n  requested: boolean;\n  available: boolean;\n  otherMessage: string;\n  adminNote: string;\n  requestedUser: string;\n  issueId: number;\n  denied: boolean;\n  deniedReason: string;\n  released: boolean;\n}\n\nexport enum RequestType {\n  movie = 1,\n  tvShow = 2,\n}\n\n// NEW WORLD\n\nexport interface IMovieRequests extends IFullBaseRequest {\n  theMovieDbId: number;\n  rootPathOverride: number;\n  qualityOverride: number;\n\n  rootPathOverrideTitle: string;\n  qualityOverrideTitle: string;\n}\n\nexport interface IMovieUpdateModel {\n  id: number;\n}\n\nexport interface IFullBaseRequest extends IBaseRequest {\n  imdbId: string;\n  overview: string;\n  title: string;\n  posterPath: string;\n  backdropPath: string;\n  releaseDate: Date;\n  status: string;\n  released: boolean;\n  background: string;\n\n  // Used in the UI\n  backgroundPath: any;\n}\n\nexport interface IBaseRequest {\n  id: number;\n  approved: boolean;\n  requestedDate: Date;\n  available: boolean;\n  requestedUserId: number;\n  issueId: number;\n  denied: boolean;\n  deniedReason: string;\n  requestType: RequestType;\n  requestedUser: IUser;\n  canApprove: boolean;\n  title: string;\n}\n\nexport interface ITvRequests {\n  id: number;\n  imdbId: string;\n  rootFolder: number;\n  overview: string;\n  title: string;\n  posterPath: string;\n  backdropPath: string;\n  releaseDate: Date;\n  status: string;\n  childRequests: IChildRequests[];\n}\n\nexport interface IChildRequests extends IBaseRequest {\n  seasonRequests: INewSeasonRequests[];\n}\n\nexport interface ITvUpdateModel {\n  id: number;\n}\n\nexport interface INewSeasonRequests {\n  id: number;\n  seasonNumber: number;\n  episodes: IEpisodesRequests[];\n}\n\nexport interface IEpisodesRequests {\n  id: number;\n  episodeNumber: number;\n  title: string;\n  airDate: Date;\n  url: string;\n  available: boolean;\n  requested: boolean;\n  approved: boolean;\n  selected: boolean; // This is for the UI only\n}\n\nexport interface IMovieRequestModel {\n  theMovieDbId: number;\n}\n\nexport interface IFilter {\n  availabilityFilter: FilterType;\n  statusFilter: FilterType;\n}\n\nexport enum FilterType {\n  None = 0,\n  Available = 1,\n  NotAvailable = 2,\n  Approved = 3,\n  Processing = 4,\n  PendingApproval = 5,\n}\n\n\n\n// WEBPACK FOOTER //\n// ./node_modules/angular2-template-loader!./node_modules/angular-router-loader/src!./ClientApp/app/interfaces/IRequestModel.ts","import { ICheckbox } from \"./index\";\n\nexport interface IUser {\n    id: string;\n    userName: string;\n    alias: string;\n    claims: ICheckbox[];\n    emailAddress: string;\n    password: string;\n    userType: UserType;\n    lastLoggedIn: Date;\n    hasLoggedIn: boolean;\n    movieRequestLimit: number;\n    episodeRequestLimit: number;\n    userAccessToken: string;\n    // FOR UI\n    checked: boolean;\n}\n\nexport interface ICreateWizardUser {\n    username: string;\n    password: string;\n    usePlexAdminAccount: boolean;\n}\n\nexport enum UserType {\n    LocalUser = 1,\n    PlexUser = 2,\n    EmbyUser = 3,\n}\n\nexport interface IIdentityResult {\n    errors: string[];\n    successful: boolean;\n}\n\nexport interface IUpdateLocalUser extends IUser {\n    currentPassword: string;\n    confirmNewPassword: string;\n}\n\nexport interface IResetPasswordToken {\n    email: string;\n    token: string;\n    password: string;\n}\n\nexport interface IMobileUsersViewModel {\n    username: string;\n    devices: number;\n}\n\n\n\n// WEBPACK FOOTER //\n// ./node_modules/angular2-template-loader!./node_modules/angular-router-loader/src!./ClientApp/app/interfaces/IUser.ts","import { IIssueCategory, IUser, RequestType } from \"./\";\n\nexport interface IIssues {\n    id?: number;\n    title: string;\n    requestType: RequestType;\n    providerId: string;\n    subject: string;\n    description: string;\n    issueCategory: IIssueCategory;\n    issueCategoryId: number;\n    status: IssueStatus;\n    resolvedDate?: Date;\n    comments: IIssueComments[];\n    requestId: number | undefined;\n    userReported: IUser | undefined;\n}\n\nexport enum IssueStatus {\n    Pending = 0,\n    InProgress = 1,\n    Resolved = 2,\n}\n\nexport interface IIssueCount {\n    pending: number;\n    inProgress: number;\n    resolved: number;\n}\n\nexport interface IPagenator {\n        first: number;\n        rows: number;\n        page: number;\n        pageCount: number;\n}\n\nexport interface IIssueComments {\n    userId: string;\n    comment: string;\n    movieIssueId: number | undefined;\n    tvIssueId: number | undefined;\n    date: Date;\n    user: IUser;\n    issues: IIssues | undefined;\n}\n\nexport interface IIssuesChat {\n    comment: string;\n    date: Date;\n    username: string;\n    adminComment: boolean;\n}\n\nexport interface INewIssueComments {\n    comment: string;\n    issueId: number;\n}\n\nexport interface IUpdateStatus {\n    issueId: number;\n    status: IssueStatus;\n}\n\n\n\n// WEBPACK FOOTER //\n// ./node_modules/angular2-template-loader!./node_modules/angular-router-loader/src!./ClientApp/app/interfaces/IIssues.ts","import { ModuleWithProviders, NgModule } from \"@angular/core\";\nimport { HumanizePipe } from \"./HumanizePipe\";\n\n@NgModule({\n    imports:        [],\n    declarations:   [HumanizePipe],\n    exports:        [HumanizePipe],\n})\nexport class PipeModule {\n\n    public static forRoot(): ModuleWithProviders {\n        return {\n            ngModule: PipeModule,\n            providers: [],\n        };\n    }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./node_modules/angular2-template-loader!./node_modules/angular-router-loader/src!./ClientApp/app/pipes/pipe.module.ts","import { Pipe, PipeTransform } from \"@angular/core\";\n\n@Pipe({\n    name: \"humanize\",\n})\nexport class HumanizePipe implements PipeTransform  {\n    public transform(value: string) {\n        if ((typeof value) !== \"string\") {\n            return value;\n        }\n        value = value.split(/(?=[A-Z])/).join(\" \");\n        value = value[0].toUpperCase() + value.slice(1);\n        return value;\n    }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./node_modules/angular2-template-loader!./node_modules/angular-router-loader/src!./ClientApp/app/pipes/HumanizePipe.ts","module.exports = (__webpack_require__(1))(978);\n\n\n//////////////////\n// WEBPACK FOOTER\n// delegated ./node_modules/ngx-order-pipe/ngx-order-pipe.es5.js from dll-reference vendor_a449fdf94c391aac3fe0\n// module id = 184\n// module chunks = 3 4","import { Component, OnInit } from \"@angular/core\";\nimport { FormBuilder, FormGroup, Validators } from \"@angular/forms\";\n\nimport { IUpdateLocalUser } from \"../interfaces\";\nimport { IdentityService } from \"../services\";\nimport { NotificationService } from \"../services\";\n\n@Component({\n    template: require('./updatedetails.component.html'),\n})\nexport class UpdateDetailsComponent implements OnInit {\n    public form: FormGroup;\n\n    constructor(private identityService: IdentityService,\n                private notificationService: NotificationService,\n                private fb: FormBuilder) { }\n\n    public ngOnInit() {\n        this.identityService.getUser().subscribe(x => {\n            const localUser = x as IUpdateLocalUser;\n            this.form = this.fb.group({\n                 id:[localUser.id],\n                username: [localUser.userName],\n                emailAddress: [localUser.emailAddress, [Validators.email]],\n                confirmNewPassword: [localUser.confirmNewPassword],\n                currentPassword: [localUser.currentPassword, [Validators.required]],\n                password: [localUser.password],\n            });\n\n        });\n\n    }\n\n    public onSubmit(form: FormGroup) {\n    if (form.invalid) {\n            this.notificationService.error(\"Please check your entered values\");\n            return;\n        }\n\n    if (form.controls.password.dirty) {\n            if (form.value.password !== form.value.confirmNewPassword) {\n                this.notificationService.error(\"Passwords do not match\");\n                return;\n            }\n        }\n\n    this.identityService.updateLocalUser(this.form.value).subscribe(x => {\n            if (x.successful) {\n                this.notificationService.success(`All of your details have now been updated`);\n            } else {\n                x.errors.forEach((val) => {\n                    this.notificationService.error(val);\n                });\n            }\n        });\n\n    }\n\n}\n\n\n\n// WEBPACK FOOTER //\n// ./node_modules/angular2-template-loader!./node_modules/angular-router-loader/src!./ClientApp/app/usermanagement/updatedetails.component.ts","module.exports = \"<div *ngIf=\\\"form\\\">\\n\\n    <h3>Hello {{form.value.username}}!</h3>\\n    <div class=\\\"col-md-6\\\">\\n        <form novalidate [formGroup]=\\\"form\\\" (ngSubmit)=\\\"onSubmit(form)\\\">\\n            <div class=\\\"modal-body\\\" style=\\\"margin-top:45px;\\\">\\n                <div class=\\\"form-group\\\">\\n                    <label for=\\\"emailAddress\\\" class=\\\"control-label\\\">Email Address</label>\\n                    <div>\\n                        <input type=\\\"text\\\" formControlName=\\\"emailAddress\\\" class=\\\"form-control form-control-custom \\\" id=\\\"emailAddress\\\" name=\\\"emailAddress\\\">\\n                    </div>\\n                </div>\\n                <div class=\\\"form-group\\\">\\n                    <label for=\\\"currentPassword\\\" class=\\\"control-label\\\">Current Password</label>\\n                    <div>\\n                        <input type=\\\"password\\\" formControlName=\\\"currentPassword\\\" class=\\\"form-control form-control-custom \\\" id=\\\"currentPassword\\\" name=\\\"currentPassword\\\">\\n                    </div>\\n                </div>\\n                <div class=\\\"form-group\\\">\\n                    <label for=\\\"password\\\" class=\\\"control-label\\\">New Password</label>\\n                    <div>\\n                        <input type=\\\"password\\\" formControlName=\\\"password\\\" class=\\\"form-control form-control-custom \\\" id=\\\"password\\\" name=\\\"password\\\">\\n                    </div>\\n                </div>\\n                <div class=\\\"form-group\\\">\\n                    <label for=\\\"confirmPassword\\\" class=\\\"control-label\\\">Confirm New Password</label>\\n                    <div>\\n                        <input type=\\\"password\\\" formControlName=\\\"confirmNewPassword\\\" class=\\\"form-control form-control-custom \\\" id=\\\"confirmPassword\\\"\\n                            name=\\\"confirmPassword\\\">\\n                    </div>\\n                </div>\\n            </div>\\n            <div>\\n                <button type=\\\"submit\\\" class=\\\"btn btn-primary-outline\\\" [disabled]=\\\"form.invalid\\\">Save</button>\\n\\n            </div>\\n        </form>\\n    </div>\\n    <div class=\\\"col-md-6\\\">\\n        <div *ngIf=\\\"form.invalid && form.dirty\\\" class=\\\"alert alert-danger\\\">\\n            <div *ngIf=\\\"form.get('emailAddress').hasError('email')\\\">Email address format is incorrect</div>\\n            <div *ngIf=\\\"form.get('password').hasError('required')\\\">The Password is required</div>\\n            <div *ngIf=\\\"form.get('confirmNewPassword').hasError('required')\\\">The Confirm New Password is required</div>\\n            <div *ngIf=\\\"form.get('currentPassword').hasError('required')\\\">Your current password is required</div>\\n        </div>\\n    </div>\\n</div>\\n\";\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./ClientApp/app/usermanagement/updatedetails.component.html\n// module id = 262\n// module chunks = 4","import { Component, OnInit } from \"@angular/core\";\nimport { Router } from \"@angular/router\";\n\nimport { ICheckbox, IUser, UserType } from \"../interfaces\";\nimport { IdentityService, NotificationService } from \"../services\";\n\n@Component({\n    template: require('./usermanagement-add.component.html'),\n})\nexport class UserManagementAddComponent implements OnInit {\n    public user: IUser;\n    public availableClaims: ICheckbox[];\n    public confirmPass: \"\";\n\n    constructor(private identityService: IdentityService,\n                private notificationSerivce: NotificationService,\n                private router: Router) { }\n\n    public ngOnInit() {\n        this.identityService.getAllAvailableClaims().subscribe(x => this.availableClaims = x);\n        this.user = {\n            alias: \"\",\n            claims: [],\n            emailAddress: \"\",\n            id: \"\",\n            password: \"\",\n            userName: \"\",\n            userType: UserType.LocalUser,\n            checked: false,\n            hasLoggedIn: false,\n            lastLoggedIn: new Date(),\n            episodeRequestLimit: 0,\n            movieRequestLimit: 0,\n            userAccessToken: \"\",\n    };\n    }\n\n    public create() {\n        this.user.claims = this.availableClaims;\n\n        if (this.user.password) {\n            if (this.user.password !== this.confirmPass) {\n                this.notificationSerivce.error(\"Passwords do not match\");\n                return;\n            }\n        }\n        const hasClaims = this.availableClaims.some((item) => {\n            if (item.enabled) { return true; }\n\n            return false;\n        });\n\n        if (!hasClaims) {\n            this.notificationSerivce.error(\"Please assign a role\");\n            return;\n        }\n\n        this.identityService.createUser(this.user).subscribe(x => {\n            if (x.successful) {\n                this.notificationSerivce.success(`The user ${this.user.userName} has been created successfully`);\n                this.router.navigate([\"usermanagement\"]);\n            } else {\n                x.errors.forEach((val) => {\n                    this.notificationSerivce.error(val);\n                });\n            }\n        });\n    }\n\n}\n\n\n\n// WEBPACK FOOTER //\n// ./node_modules/angular2-template-loader!./node_modules/angular-router-loader/src!./ClientApp/app/usermanagement/usermanagement-add.component.ts","module.exports = \"\\n<h3>Create User</h3>\\n<button type=\\\"button\\\" class=\\\"btn btn-primary-outline\\\" style=\\\"float:right;\\\" [routerLink]=\\\"['/usermanagement/']\\\">Back</button>\\n\\n<div class=\\\"modal-body\\\" style=\\\"margin-top: 45px;\\\">    \\n    <div class=\\\"col-md-6\\\">\\n        <h4>User Details</h4>\\n    </div>\\n    <div class=\\\"col-md-6\\\">\\n        <h4>Roles</h4>\\n    </div>\\n    <div class=\\\"row\\\">\\n    <div class=\\\"col-md-6\\\">\\n        <div class=\\\"form-group\\\">\\n            <label for=\\\"username\\\" class=\\\"control-label\\\">Username</label>\\n            <div>\\n                <input type=\\\"text\\\" [(ngModel)]=\\\"user.userName\\\" class=\\\"form-control form-control-custom \\\" id=\\\"username\\\" name=\\\"username\\\" value=\\\"{{user?.userName}}\\\">\\n            </div>\\n        </div>\\n        <div class=\\\"form-group\\\">\\n            <label for=\\\"alias\\\" class=\\\"control-label\\\">Alias</label>\\n            <div>\\n                <input type=\\\"text\\\" [(ngModel)]=\\\"user.alias\\\" class=\\\"form-control form-control-custom \\\" id=\\\"alias\\\" name=\\\"alias\\\" value=\\\"{{user?.alias}}\\\">\\n            </div>\\n        </div>\\n\\n        <div class=\\\"form-group\\\">\\n            <label for=\\\"emailAddress\\\" class=\\\"control-label\\\">Email Address</label>\\n            <div>\\n                <input type=\\\"text\\\" [(ngModel)]=\\\"user.emailAddress\\\" class=\\\"form-control form-control-custom \\\" id=\\\"emailAddress\\\" name=\\\"emailAddress\\\" value=\\\"{{user?.emailAddress}}\\\">\\n            </div>\\n        </div>\\n\\n        <div class=\\\"form-group\\\">\\n            <label for=\\\"password\\\" class=\\\"control-label\\\">Password</label>\\n            <div>\\n                <input type=\\\"password\\\" [(ngModel)]=\\\"user.password\\\" class=\\\"form-control form-control-custom \\\" id=\\\"password\\\" name=\\\"password\\\">\\n            </div>\\n        </div>\\n\\n        <div class=\\\"form-group\\\">\\n            <label for=\\\"confirmPass\\\" class=\\\"control-label\\\">Confirm Password</label>\\n            <div>\\n                <input type=\\\"password\\\" [(ngModel)]=\\\"confirmPass\\\" class=\\\"form-control form-control-custom \\\" id=\\\"confirmPass\\\" name=\\\"confirmPass\\\">\\n            </div>\\n        </div>\\n    </div>\\n        <div class=\\\"col-md-6\\\">\\n            <div *ngFor=\\\"let c of availableClaims\\\">\\n                <div class=\\\"form-group\\\">\\n                    <div class=\\\"checkbox\\\">\\n                        <input type=\\\"checkbox\\\" [(ngModel)]=\\\"c.enabled\\\" [value]=\\\"c.value\\\" id=\\\"create{{c.value}}\\\" [attr.name]=\\\"'create' + c.value\\\" ng-checked=\\\"c.enabled\\\">\\n                        <label for=\\\"create{{c.value}}\\\">{{c.value | humanize}}</label>\\n\\n                    </div>\\n                </div>\\n            </div>\\n            <div class=\\\"form-group\\\">\\n                <label for=\\\"movieRequestLimit\\\" class=\\\"control-label\\\">Movie Request Limit</label>\\n                <div>\\n                    <input type=\\\"text\\\" [(ngModel)]=\\\"user.movieRequestLimit\\\" class=\\\"form-control form-small form-control-custom \\\" id=\\\"movieRequestLimit\\\" name=\\\"movieRequestLimit\\\" value=\\\"{{user?.movieRequestLimit}}\\\">\\n                </div>\\n            </div>\\n\\n            <div class=\\\"form-group\\\">\\n                <label for=\\\"episodeRequestLimit\\\" class=\\\"control-label\\\">Episode Request Limit</label>\\n                <div>\\n                    <input type=\\\"text\\\" [(ngModel)]=\\\"user.episodeRequestLimit\\\" class=\\\"form-control form-small form-control-custom \\\" id=\\\"episodeRequestLimit\\\" name=\\\"episodeRequestLimit\\\" value=\\\"{{user?.episodeRequestLimit}}\\\">\\n                </div>\\n            </div>\\n        </div>\\n    </div>\\n</div>\\n<div class=\\\"row\\\">\\n    <div class=\\\"col-md-12\\\">\\n        <button type=\\\"button\\\" class=\\\"btn btn-danger-outline\\\" (click)=\\\"create()\\\">Create</button>\\n\\n    </div>\\n</div>\";\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./ClientApp/app/usermanagement/usermanagement-add.component.html\n// module id = 264\n// module chunks = 4","import { Component } from \"@angular/core\";\nimport { Router } from \"@angular/router\";\nimport { ConfirmationService } from \"primeng/primeng\";\n\nimport { ActivatedRoute } from \"@angular/router\";\nimport { IUser } from \"../interfaces\";\nimport { IdentityService } from \"../services\";\nimport { NotificationService } from \"../services\";\n\n@Component({\n    template: require('./usermanagement-edit.component.html'),\n})\nexport class UserManagementEditComponent {\n    public user: IUser;\n    public userId: string;\n    \n    constructor(private identityService: IdentityService,\n                private route: ActivatedRoute,\n                private notificationService: NotificationService,\n                private router: Router,\n                private confirmationService: ConfirmationService) {\n        this.route.params\n            .subscribe((params: any) => {\n                this.userId = params.id;\n\n                this.identityService.getUserById(this.userId).subscribe(x => {\n                    this.user = x;\n                });\n            });\n    }\n\n    public delete() {\n\n        this.confirmationService.confirm({\n            message: \"Are you sure that you want to delete this user? If this user has any requests they will also be deleted.\",\n            header: \"Are you sure?\",\n            icon: \"fa fa-trash\",\n            accept: () => {\n                this.identityService.deleteUser(this.user).subscribe(x => {\n                    if (x.successful) {\n                        this.notificationService.success(`The user ${this.user.userName} was deleted`);\n                        this.router.navigate([\"usermanagement\"]);\n                    } else {\n                        x.errors.forEach((val) => {\n                            this.notificationService.error(val);\n                        });\n                    }\n        \n                });\n            },\n            reject: () => {\n                return;\n            },\n        });        \n    }\n\n    public resetPassword() {\n        this.identityService.submitResetPassword(this.user.emailAddress).subscribe(x => {\n            if (x.successful) {\n                this.notificationService.success(`Sent reset password email to ${this.user.emailAddress}`);\n                this.router.navigate([\"usermanagement\"]);\n            } else {\n                x.errors.forEach((val) => {\n                    this.notificationService.error(val);\n                });\n            }\n\n        });\n    }\n\n    public update() {\n        const hasClaims = this.user.claims.some((item) => {\n            if (item.enabled) { return true; }\n\n            return false;\n        });\n\n        if (!hasClaims) {\n            this.notificationService.error(\"Please assign a role\");\n            return;\n        }\n\n        this.identityService.updateUser(this.user).subscribe(x => {\n            if (x.successful) {\n                this.notificationService.success(`The user ${this.user.userName} has been updated successfully`);\n                this.router.navigate([\"usermanagement\"]);\n            } else {\n                x.errors.forEach((val) => {\n                    this.notificationService.error(val);\n                });\n            }\n        });\n    }\n\n}\n\n\n\n// WEBPACK FOOTER //\n// ./node_modules/angular2-template-loader!./node_modules/angular-router-loader/src!./ClientApp/app/usermanagement/usermanagement-edit.component.ts","module.exports = \"<div *ngIf=\\\"user\\\">\\n    <h3>User: {{user.userName}}</h3>\\n    <button type=\\\"button\\\" class=\\\"btn btn-primary-outline\\\" style=\\\"float:right;\\\" [routerLink]=\\\"['/usermanagement/']\\\">Back</button>\\n\\n\\n    <p-confirmDialog></p-confirmDialog>\\n    \\n    <div class=\\\"modal-body\\\" style=\\\"margin-top: 45px;\\\">\\n        <div class=\\\"col-md-6\\\">\\n            <h4>User Details</h4>\\n        </div>\\n        <div class=\\\"col-md-6\\\">\\n            <h4>Roles</h4>\\n        </div>\\n        <div class=\\\"col-md-6\\\">\\n            <div class=\\\"form-group\\\">\\n                <label for=\\\"username\\\" class=\\\"control-label\\\">Username</label>\\n                <div>\\n                    <input type=\\\"text\\\" [(ngModel)]=\\\"user.userName\\\" [readonly]=\\\"true\\\" class=\\\"form-control form-control-custom \\\" id=\\\"username\\\" name=\\\"username\\\" value=\\\"{{user?.userName}}\\\">\\n                </div>\\n            </div>\\n            <div class=\\\"form-group\\\">\\n                <label for=\\\"alias\\\" class=\\\"control-label\\\">Alias</label>\\n                <div>\\n                    <input type=\\\"text\\\" [(ngModel)]=\\\"user.alias\\\" class=\\\"form-control form-control-custom \\\" id=\\\"alias\\\" name=\\\"alias\\\" value=\\\"{{user?.alias}}\\\">\\n                </div>\\n            </div>\\n\\n            <div class=\\\"form-group\\\">\\n                <label for=\\\"emailAddress\\\" class=\\\"control-label\\\">Email Address</label>\\n                <div>\\n                    <input type=\\\"text\\\" [(ngModel)]=\\\"user.emailAddress\\\" class=\\\"form-control form-control-custom \\\" id=\\\"emailAddress\\\" name=\\\"emailAddress\\\" value=\\\"{{user?.emailAddress}}\\\" [disabled]=\\\"user?.userType == 2\\\">\\n                </div>\\n            </div>\\n        </div>\\n\\n        <div class=\\\"col-md-6\\\">\\n            <div *ngFor=\\\"let c of user.claims\\\">\\n                <div class=\\\"form-group\\\">\\n                    <div class=\\\"checkbox\\\">\\n                        <input type=\\\"checkbox\\\" [(ngModel)]=\\\"c.enabled\\\" [value]=\\\"c.value\\\" id=\\\"create{{c.value}}\\\" [attr.name]=\\\"'create' + c.value\\\" ng-checked=\\\"c.enabled\\\">\\n                        <label for=\\\"create{{c.value}}\\\">{{c.value | humanize}}</label>\\n\\n                    </div>\\n                </div>\\n            </div>\\n            <div class=\\\"form-group\\\">\\n                <label for=\\\"movieRequestLimit\\\" class=\\\"control-label\\\">Movie Request Limit</label>\\n                <div>\\n                    <input type=\\\"text\\\" [(ngModel)]=\\\"user.movieRequestLimit\\\" class=\\\"form-control form-small form-control-custom \\\" id=\\\"movieRequestLimit\\\" name=\\\"movieRequestLimit\\\" value=\\\"{{user?.movieRequestLimit}}\\\">\\n                </div>\\n            </div>\\n\\n            <div class=\\\"form-group\\\">\\n                <label for=\\\"episodeRequestLimit\\\" class=\\\"control-label\\\">Episode Request Limit</label>\\n                <div>\\n                    <input type=\\\"text\\\" [(ngModel)]=\\\"user.episodeRequestLimit\\\" class=\\\"form-control form-small form-control-custom \\\" id=\\\"episodeRequestLimit\\\" name=\\\"episodeRequestLimit\\\" value=\\\"{{user?.episodeRequestLimit}}\\\">\\n                </div>\\n            </div>\\n        </div>\\n    </div>\\n    <div>\\n        <button type=\\\"button\\\" class=\\\"btn btn-primary-outline\\\" (click)=\\\"update()\\\">Update</button>\\n        <button type=\\\"button\\\" class=\\\"btn btn-danger-outline\\\" (click)=\\\"delete()\\\">Delete</button>\\n        <button type=\\\"button\\\"  style=\\\"float:right;\\\"  class=\\\"btn btn-info-outline\\\" (click)=\\\"resetPassword()\\\"  pTooltip=\\\"You need your SMTP settings setup\\\">Send Reset Password Link</button>\\n\\n    </div>\\n</div>\";\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./ClientApp/app/usermanagement/usermanagement-edit.component.html\n// module id = 266\n// module chunks = 4","import { Component, OnInit } from \"@angular/core\";\n\nimport { ICheckbox, ICustomizationSettings, IEmailNotificationSettings,IUser } from \"../interfaces\";\nimport { IdentityService, NotificationService, SettingsService } from \"../services\";\n\n@Component({\n    template: require('./usermanagement.component.html'),\n})\nexport class UserManagementComponent implements OnInit {\n\n    public users: IUser[];\n    public checkAll = false;\n    public emailSettings: IEmailNotificationSettings; \n    public customizationSettings: ICustomizationSettings;\n\n    public order: string = \"u.userName\";\n    public reverse = false;\n\n    public showBulkEdit = false;\n    public availableClaims: ICheckbox[];\n    public bulkMovieLimit?: number;\n    public bulkEpisodeLimit?: number;\n\n    constructor(private readonly identityService: IdentityService,\n                private readonly settingsService: SettingsService,\n                private readonly notificationService: NotificationService) { }\n\n    public ngOnInit() {\n        this.users = [];\n        this.identityService.getUsers().subscribe(x => {\n            this.users = x;\n        });\n\n        this.identityService.getAllAvailableClaims().subscribe(x => this.availableClaims = x);\n        this.settingsService.getCustomization().subscribe(x => this.customizationSettings = x);\n        this.settingsService.getEmailNotificationSettings().subscribe(x => this.emailSettings = x);\n    }\n\n    public welcomeEmail(user: IUser) {\n        if(!user.emailAddress) {\n            this.notificationService.error(\"The user needs an email address.\");\n            return;\n        }\n        if (!this.emailSettings.enabled) {\n            this.notificationService.error(\"Email Notifications are not setup, cannot send welcome email\");\n            return;\n        }\n        this.identityService.sendWelcomeEmail(user).subscribe();        \n        this.notificationService.success(`Sent a welcome email to ${user.emailAddress}`);\n    }\n\n    public checkAllBoxes() {\n        this.checkAll = !this.checkAll;\n        this.users.forEach(user => {\n            user.checked = this.checkAll;\n        });\n    }\n\n    public hasChecked(): boolean {\n        return this.users.some(x => {\n            return x.checked;\n        });\n    }\n\n    public bulkUpdate() {\n        const anyRoles = this.availableClaims.some(x => {\n            return x.enabled;\n        });\n\n        this.users.forEach(x => {\n            if(!x.checked) {\n                return;\n            }\n            if(anyRoles) {\n                x.claims = this.availableClaims;\n            }\n            if(this.bulkEpisodeLimit && this.bulkEpisodeLimit > 0) {\n                x.episodeRequestLimit = this.bulkEpisodeLimit;\n            }\n            if(this.bulkMovieLimit && this.bulkMovieLimit > 0) {\n                x.movieRequestLimit = this.bulkMovieLimit;\n            }\n            this.identityService.updateUser(x).subscribe(y => {\n                if(!y.successful) {\n                    this.notificationService.error(`Could not update user ${x.userName}. Reason ${y.errors[0]}`);\n                }\n            });\n        });\n        \n        this.notificationService.success(`Updated users`);\n        this.showBulkEdit = false;\n        this.bulkMovieLimit = undefined;\n        this.bulkEpisodeLimit = undefined;\n    }\n    \n    public setOrder(value: string) {\n        if (this.order === value) {\n          this.reverse = !this.reverse;\n        }\n    \n        this.order = value;\n      }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./node_modules/angular2-template-loader!./node_modules/angular-router-loader/src!./ClientApp/app/usermanagement/usermanagement.component.ts","module.exports = \"<h1>User Management</h1>\\n\\n\\n\\n<button type=\\\"button\\\" class=\\\"btn btn-success-outline\\\" [routerLink]=\\\"['/usermanagement/add']\\\">Add User</button>\\n<button type=\\\"button\\\" style=\\\"float:right;\\\" class=\\\"btn btn-primary-outline\\\"(click)=\\\"showBulkEdit = !showBulkEdit\\\" [disabled]=\\\"!hasChecked()\\\">Bulk Edit</button>\\n<!-- Table -->\\n<table class=\\\"table table-striped table-hover table-responsive table-condensed table-usermanagement\\\">\\n    <thead>\\n        <tr>\\n            <th style=\\\"width:1%\\\">\\n                <a>\\n                        <td class=\\\"checkbox\\\" data-label=\\\"Select:\\\">\\n                                <input id=\\\"all\\\" type=\\\"checkbox\\\" ng-checked=\\\"checkAll\\\" (change)=\\\"checkAllBoxes()\\\">\\n                                <label for=\\\"all\\\"></label>\\n                            </td>\\n                </a>\\n            </th>\\n            <th (click)=\\\"setOrder('u.userName')\\\">\\n                <a>\\n                    Username\\n                </a>\\n                <span *ngIf=\\\"order === 'u.userName'\\\">\\n                    <span [hidden]=\\\"reverse\\\"><i class=\\\"fa fa-arrow-down\\\" aria-hidden=\\\"true\\\"></i></span><span [hidden]=\\\"!reverse\\\"><i class=\\\"fa fa-arrow-up\\\" aria-hidden=\\\"true\\\"></i></span>\\n                </span>\\n            </th>\\n            <th (click)=\\\"setOrder('u.alias')\\\">\\n                <a>\\n                    Alias\\n                </a>\\n                <span *ngIf=\\\"order === 'u.alias'\\\">\\n                    <span [hidden]=\\\"reverse\\\"><i class=\\\"fa fa-arrow-down\\\" aria-hidden=\\\"true\\\"></i></span><span [hidden]=\\\"!reverse\\\"><i class=\\\"fa fa-arrow-up\\\" aria-hidden=\\\"true\\\"></i></span>\\n                </span>\\n            </th>\\n            <th (click)=\\\"setOrder('u.emailAddress')\\\">\\n                <a>\\n                    Email\\n                </a>\\n                <span *ngIf=\\\"order === 'u.emailAddress'\\\">\\n                    <span [hidden]=\\\"reverse\\\"><i class=\\\"fa fa-arrow-down\\\" aria-hidden=\\\"true\\\"></i></span><span [hidden]=\\\"!reverse\\\"><i class=\\\"fa fa-arrow-up\\\" aria-hidden=\\\"true\\\"></i></span>\\n                </span>\\n            </th>\\n            <th>\\n                Roles\\n            </th>\\n            <th (click)=\\\"setOrder('u.lastLoggedIn')\\\">\\n               <a> Last Logged In</a>\\n               <span *ngIf=\\\"order === 'u.lastLoggedIn'\\\">\\n                <span [hidden]=\\\"reverse\\\"><i class=\\\"fa fa-arrow-down\\\" aria-hidden=\\\"true\\\"></i></span><span [hidden]=\\\"!reverse\\\"><i class=\\\"fa fa-arrow-up\\\" aria-hidden=\\\"true\\\"></i></span>\\n            </span>\\n            </th>\\n            <th (click)=\\\"setOrder('u.userType')\\\">\\n                <a>\\n                    User Type\\n                </a>\\n                <span *ngIf=\\\"order === 'u.userType'\\\">\\n                    <span [hidden]=\\\"reverse\\\"><i class=\\\"fa fa-arrow-down\\\" aria-hidden=\\\"true\\\"></i></span><span [hidden]=\\\"!reverse\\\"><i class=\\\"fa fa-arrow-up\\\" aria-hidden=\\\"true\\\"></i></span>\\n                </span>\\n            </th>\\n        </tr>\\n    </thead>\\n    <tbody>\\n        <tr *ngFor=\\\"let u of users | orderBy: order : reverse : 'case-insensitive'\\\">\\n            <td class=\\\"checkbox\\\" data-label=\\\"Select:\\\">\\n                <input id=\\\"{{u.id}}\\\" type=\\\"checkbox\\\" [(ngModel)]=\\\"u.checked\\\">\\n                <label for=\\\"{{u.id}}\\\"></label>\\n            </td>\\n            <td class=\\\"td-labelled\\\" data-label=\\\"Username:\\\">\\n                {{u.userName}}\\n            </td>\\n            <td class=\\\"td-labelled\\\" data-label=\\\"Alias:\\\">\\n                {{u.alias}}\\n            </td>\\n            <td class=\\\"td-labelled\\\" data-label=\\\"Email:\\\">\\n                {{u.emailAddress}}\\n            </td>\\n            <td class=\\\"td-labelled\\\" data-label=\\\"Roles:\\\">\\n                <div *ngFor=\\\"let claim of u.claims\\\">\\n                    <span *ngIf=\\\"claim.enabled\\\">{{claim.value}}</span>\\n                </div>\\n\\n            </td>\\n            <td class=\\\"td-labelled\\\" data-label=\\\"Last Logged In:\\\">\\n                {{u.lastLoggedIn | date: 'short'}}\\n            </td>\\n            <td class=\\\"td-labelled\\\" data-label=\\\"User Type:\\\">\\n                <span *ngIf=\\\"u.userType === 1\\\">Local User</span>\\n                <span *ngIf=\\\"u.userType === 2\\\">Plex User</span>\\n                <span *ngIf=\\\"u.userType === 3\\\">Emby User</span>\\n            </td>\\n            <td>\\n                <a [routerLink]=\\\"['/usermanagement/edit/' + u.id]\\\" class=\\\"btn btn-sm btn-info-outline\\\">Details/Edit</a>\\n            </td>\\n            <td *ngIf=\\\"customizationSettings\\\">\\n                <button *ngIf=\\\"!u.hasLoggedIn\\\" (click)=\\\"welcomeEmail(u)\\\" [disabled]=\\\"!customizationSettings.applicationUrl\\\" class=\\\"btn btn-sm btn-info-outline\\\">Send Welcome Email</button>\\n            </td>\\n        </tr>\\n    </tbody>\\n</table>\\n\\n\\n<p-sidebar [(visible)]=\\\"showBulkEdit\\\" position=\\\"right\\\" styleClass=\\\"ui-sidebar-md side-back\\\">\\n<h3>Bulk Edit</h3>\\n<hr/>\\n<div *ngFor=\\\"let c of availableClaims\\\">\\n        <div class=\\\"form-group\\\">\\n            <div class=\\\"checkbox\\\">\\n                <input type=\\\"checkbox\\\" [(ngModel)]=\\\"c.enabled\\\" [value]=\\\"c.value\\\" id=\\\"create{{c.value}}\\\" [attr.name]=\\\"'create' + c.value\\\" ng-checked=\\\"c.enabled\\\">\\n                <label for=\\\"create{{c.value}}\\\">{{c.value | humanize}}</label>\\n            </div>\\n        </div>\\n    </div>\\n\\n    <div class=\\\"form-group\\\">\\n            <label for=\\\"movieRequestLimit\\\" class=\\\"control-label\\\">Movie Request Limit</label>\\n            <div>\\n                <input type=\\\"text\\\" [(ngModel)]=\\\"bulkMovieLimit\\\" class=\\\"form-control form-small form-control-custom \\\" id=\\\"movieRequestLimit\\\" name=\\\"movieRequestLimit\\\" value=\\\"{{bulkMovieLimit}}\\\">\\n            </div>\\n        </div>\\n\\n        <div class=\\\"form-group\\\">\\n            <label for=\\\"episodeRequestLimit\\\" class=\\\"control-label\\\">Episode Request Limit</label>\\n            <div>\\n                <input type=\\\"text\\\" [(ngModel)]=\\\"bulkEpisodeLimit\\\" class=\\\"form-control form-small form-control-custom \\\" id=\\\"episodeRequestLimit\\\" name=\\\"episodeRequestLimit\\\" value=\\\"{{bulkEpisodeLimit}}\\\">\\n            </div>\\n        </div>\\n    \\n<button type=\\\"button\\\" class=\\\"btn btn-success-outline\\\" (click)=\\\"bulkUpdate()\\\">Update Users</button>\\n</p-sidebar>\";\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./ClientApp/app/usermanagement/usermanagement.component.html\n// module id = 268\n// module chunks = 4"],"sourceRoot":""}