{"version":3,"sources":["webpack:///./ClientApp/app/search/search.module.ts","webpack:///./ClientApp/app/interfaces/index.ts","webpack:///./ClientApp/app/interfaces/INotificationSettings.ts","webpack:///./ClientApp/app/interfaces/IRequestModel.ts","webpack:///./ClientApp/app/interfaces/IUser.ts","webpack:///./ClientApp/app/interfaces/IIssues.ts","webpack:///delegated ./node_modules/rxjs/add/operator/debounceTime.js from dll-reference vendor_a449fdf94c391aac3fe0","webpack:///delegated ./node_modules/rxjs/add/operator/distinctUntilChanged.js from dll-reference vendor_a449fdf94c391aac3fe0","webpack:///./ClientApp/app/shared/shared.module.ts","webpack:///./ClientApp/app/shared/issues-report.component.ts","webpack:///./ClientApp/app/shared/issues-report.component.html","webpack:///delegated ./node_modules/rxjs/add/operator/takeUntil.js from dll-reference vendor_a449fdf94c391aac3fe0","webpack:///./ClientApp/app/requests/tvrequests.component.scss?98c9","webpack:///./ClientApp/app/requests/tvrequests.component.scss","webpack:///./ClientApp/app/search/moviesearch.component.ts","webpack:///./ClientApp/app/search/moviesearch.component.html","webpack:///./ClientApp/app/search/moviesearchgrid.component.ts","webpack:///./ClientApp/app/search/moviesearchgrid.component.html","webpack:///./ClientApp/app/search/search.component.ts","webpack:///./ClientApp/app/search/search.component.html","webpack:///./ClientApp/app/search/seriesinformation.component.ts","webpack:///./ClientApp/app/search/seriesinformation.component.html","webpack:///./ClientApp/app/search/seriesinformation.component.scss?245e","webpack:///./ClientApp/app/search/seriesinformation.component.scss","webpack:///./ClientApp/app/search/tvsearch.component.ts","webpack:///./ClientApp/app/search/tvsearch.component.html"],"names":["common_1","__webpack_require__","core_1","forms_1","router_1","ng_bootstrap_1","moviesearch_component_1","moviesearchgrid_component_1","search_component_1","seriesinformation_component_1","tvsearch_component_1","primeng_1","services_1","services_2","auth_guard_1","shared_module_1","routes","path","component","SearchComponent","canActivate","AuthGuard","SeriesInformationComponent","SearchModule","__decorate","NgModule","imports","CommonModule","FormsModule","RouterModule","forChild","NgbModule","forRoot","TreeTableModule","SharedModule","SidebarModule","declarations","MovieSearchComponent","TvSearchComponent","MovieSearchGridComponent","exports","providers","SearchService","RequestService","__export","NotificationAgent","NotificationType","RequestType","FilterType","UserType","IssueStatus","module","core_2","issues_report_component_1","IssuesReportComponent","TranslateModule","interfaces_1","issueService","notification","this","visibleChange","EventEmitter","submitted","issue","subject","description","issueCategory","value","id","status","Pending","resolvedDate","undefined","issueCategoryId","comments","requestId","requestType","movie","title","providerId","userReported","Object","defineProperty","prototype","submit","_this","tvShow","createIssue","subscribe","x","success","hide","visible","emit","Input","Output","Component","selector","template","IssuesService","NotificationService","result","toString","push","i","platform_browser_1","Subject_1","auth_service_1","searchService","requestService","notificationService","authService","translate","sanitizer","searchChanged","Subject","searchApplied","issuesBarVisible","debounceTime","distinctUntilChanged","searchText","searchMovie","movieResults","getExtraInfo","clearResults","ngOnInit","message","errorMessage","search","text","next","target","request","searchResult","requested","requestProcessing","hasRole","approved","requestMovie","theMovieDbId","get","processed","warning","e","error","popularMovies","nowPlayingMovies","topRatedMovies","upcomingMovies","reportIssue","catId","req","issueRequestId","issueRequestTitle","issueCategorySelected","issueProviderId","forEach","val","index","background","bypassSecurityTrustStyle","backdropPath","getMovieInformation","m","updateItem","key","updated","indexOf","copy","__assign","AuthService","TranslateService","DomSanitizer","movieResultGrid","getExtaInfo","processGrid","movies","container","issuesService","settingsService","issuesEnabled","showMovie","showTv","getCategories","issueCategories","getIssueSettings","enabled","selectMovieTab","selectTvTab","SettingsService","services_3","requestedEpisodes","getShowInformation","seriesId","series","submitRequests","seasonRequests","some","season","episodes","ep","selected","requestTv","addRequest","episode","removeRequest","addAllEpisodes","styles","imageService","searchTvTreeNode","tvResults","openClosestTab","el","preventDefault","toElement","relatedTarget","className","parentNode","_i","_a","children","length","includes","click","popularShows","popularTv","trendingShows","trendingTv","mostWatchedShows","mostWatchedTv","anticipatedShows","anticipatedTv","getTvBanner","data","getShowInformationTreeNode","index_1","splice","allSeasons","event","requestAll","firstSeason","latestSeason","banner","imdbId","fullyAvailable","backdrop","ImageService"],"mappings":"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","file":"2.js","sourcesContent":["import { CommonModule } from \"@angular/common\";\nimport { NgModule } from \"@angular/core\";\nimport { FormsModule } from \"@angular/forms\";\nimport { RouterModule, Routes } from \"@angular/router\";\n\nimport { NgbModule } from \"@ng-bootstrap/ng-bootstrap\";\n\nimport { MovieSearchComponent } from \"./moviesearch.component\";\nimport { MovieSearchGridComponent } from \"./moviesearchgrid.component\";\nimport { SearchComponent } from \"./search.component\";\nimport { SeriesInformationComponent } from \"./seriesinformation.component\";\nimport { TvSearchComponent } from \"./tvsearch.component\";\n\nimport { SidebarModule, TreeTableModule } from \"primeng/primeng\";\n\nimport { RequestService } from \"../services\";\nimport { SearchService } from \"../services\";\n\nimport { AuthGuard } from \"../auth/auth.guard\";\n\nimport { SharedModule } from \"../shared/shared.module\";\n\nconst routes: Routes = [\n    { path: \"\", component: SearchComponent, canActivate: [AuthGuard] },\n    { path: \"show/:id\", component: SeriesInformationComponent, canActivate: [AuthGuard] },\n];\n@NgModule({\n    imports: [        \n        CommonModule,\n        FormsModule,\n        RouterModule.forChild(routes),\n        NgbModule.forRoot(),\n        TreeTableModule,\n        SharedModule,\n        SidebarModule,\n    ],\n    declarations: [\n        SearchComponent,\n        MovieSearchComponent,\n        TvSearchComponent,\n        SeriesInformationComponent,\n        MovieSearchGridComponent,\n    ],\n    exports: [\n        RouterModule,\n    ],\n    providers: [\n        SearchService,\n        RequestService,\n    ],\n})\nexport class SearchModule { }\n\n\n\n// WEBPACK FOOTER //\n// ./node_modules/angular2-template-loader!./node_modules/angular-router-loader/src!./ClientApp/app/search/search.module.ts","export * from \"./ICommon\";\nexport * from \"./ICouchPotato\";\nexport * from \"./IImages\";\nexport * from \"./IMediaServerStatus\";\nexport * from \"./INotificationSettings\";\nexport * from \"./IPlex\";\nexport * from \"./IRadarr\";\nexport * from \"./IRequestEngineResult\";\nexport * from \"./IRequestModel\";\nexport * from \"./ISearchMovieResult\";\nexport * from \"./ISearchTvResult\";\nexport * from \"./ISettings\";\nexport * from \"./ISonarr\";\nexport * from \"./IUser\";\nexport * from \"./IIssues\";\n\n\n\n// WEBPACK FOOTER //\n// ./node_modules/angular2-template-loader!./node_modules/angular-router-loader/src!./ClientApp/app/interfaces/index.ts","import { ISettings } from \"./ICommon\";\n\nexport interface INotificationSettings extends ISettings {\n    enabled: boolean;\n}\n\nexport interface IEmailNotificationSettings extends INotificationSettings {\n    host: string;\n    password: string;\n    port: number;\n    senderAddress: string;\n    senderName: string;\n    username: string;\n    authentication: boolean;\n    adminEmail: string;\n    disableTLS: boolean;\n    disableCertificateChecking: boolean;\n    notificationTemplates: INotificationTemplates[];\n}\n\nexport interface INotificationTemplates {\n    subject: string;\n    message: string;\n    notificationType: NotificationType;\n    notificationAgent: NotificationAgent;\n    enabled: boolean;\n}\n\nexport enum NotificationAgent {\n    Email,\n    Discord,\n    Pushbullet,\n    Pushover,\n    Telegram,\n}\n\nexport enum NotificationType {\n    NewRequest,\n    Issue,\n    RequestAvailable,\n    RequestApproved,\n    AdminNote,\n    Test,\n    RequestDeclined,\n    ItemAddedToFaultQueue,\n    WelcomeEmail,\n    IssueResolved,\n}\n\nexport interface IDiscordNotifcationSettings extends INotificationSettings {\n    webhookUrl: string;\n    username: string;\n    notificationTemplates: INotificationTemplates[];\n}\n\nexport interface ITelegramNotifcationSettings extends INotificationSettings {\n    botApi: string;\n    chatId: string;\n    parseMode: string;\n    notificationTemplates: INotificationTemplates[];\n}\n\nexport interface ISlackNotificationSettings extends INotificationSettings {\n    webhookUrl: string;\n    username: string;\n    channel: string;\n    iconEmoji: string;\n    iconUrl: string;\n    notificationTemplates: INotificationTemplates[];\n}\n\nexport interface IPushbulletNotificationSettings extends INotificationSettings {\n    accessToken: string;\n    notificationTemplates: INotificationTemplates[];\n    channelTag: string;\n}\n\nexport interface IPushoverNotificationSettings extends INotificationSettings {\n    accessToken: string;\n    notificationTemplates: INotificationTemplates[];\n    userToken: string;\n}\n\nexport interface IMattermostNotifcationSettings extends INotificationSettings {\n    webhookUrl: string;\n    username: string;\n    channel: string;\n    iconUrl: string;\n    notificationTemplates: INotificationTemplates[];\n}\n\nexport interface IMobileNotifcationSettings extends INotificationSettings {\n    notificationTemplates: INotificationTemplates[];\n}\n\n\n\n// WEBPACK FOOTER //\n// ./node_modules/angular2-template-loader!./node_modules/angular-router-loader/src!./ClientApp/app/interfaces/INotificationSettings.ts","import { IUser } from \"./IUser\";\n\nexport interface IMediaBase {\n  imdbId: string;\n  id: number;\n  providerId: number;\n  title: string;\n  overview: string;\n  posterPath: string;\n  releaseDate: Date;\n  status: string;\n  requestedDate: Date;\n  approved: boolean;\n  type: RequestType;\n  requested: boolean;\n  available: boolean;\n  otherMessage: string;\n  adminNote: string;\n  requestedUser: string;\n  issueId: number;\n  denied: boolean;\n  deniedReason: string;\n  released: boolean;\n}\n\nexport enum RequestType {\n  movie = 1,\n  tvShow = 2,\n}\n\n// NEW WORLD\n\nexport interface IMovieRequests extends IFullBaseRequest {\n  theMovieDbId: number;\n  rootPathOverride: number;\n  qualityOverride: number;\n\n  rootPathOverrideTitle: string;\n  qualityOverrideTitle: string;\n}\n\nexport interface IMovieUpdateModel {\n  id: number;\n}\n\nexport interface IFullBaseRequest extends IBaseRequest {\n  imdbId: string;\n  overview: string;\n  title: string;\n  posterPath: string;\n  backdropPath: string;\n  releaseDate: Date;\n  status: string;\n  released: boolean;\n  background: string;\n\n  // Used in the UI\n  backgroundPath: any;\n}\n\nexport interface IBaseRequest {\n  id: number;\n  approved: boolean;\n  requestedDate: Date;\n  available: boolean;\n  requestedUserId: number;\n  issueId: number;\n  denied: boolean;\n  deniedReason: string;\n  requestType: RequestType;\n  requestedUser: IUser;\n  canApprove: boolean;\n  title: string;\n}\n\nexport interface ITvRequests {\n  id: number;\n  imdbId: string;\n  rootFolder: number;\n  overview: string;\n  title: string;\n  posterPath: string;\n  backdropPath: string;\n  releaseDate: Date;\n  status: string;\n  childRequests: IChildRequests[];\n}\n\nexport interface IChildRequests extends IBaseRequest {\n  seasonRequests: INewSeasonRequests[];\n}\n\nexport interface ITvUpdateModel {\n  id: number;\n}\n\nexport interface INewSeasonRequests {\n  id: number;\n  seasonNumber: number;\n  episodes: IEpisodesRequests[];\n}\n\nexport interface IEpisodesRequests {\n  id: number;\n  episodeNumber: number;\n  title: string;\n  airDate: Date;\n  url: string;\n  available: boolean;\n  requested: boolean;\n  approved: boolean;\n  selected: boolean; // This is for the UI only\n}\n\nexport interface IMovieRequestModel {\n  theMovieDbId: number;\n}\n\nexport interface IFilter {\n  availabilityFilter: FilterType;\n  statusFilter: FilterType;\n}\n\nexport enum FilterType {\n  None = 0,\n  Available = 1,\n  NotAvailable = 2,\n  Approved = 3,\n  Processing = 4,\n  PendingApproval = 5,\n}\n\n\n\n// WEBPACK FOOTER //\n// ./node_modules/angular2-template-loader!./node_modules/angular-router-loader/src!./ClientApp/app/interfaces/IRequestModel.ts","import { ICheckbox } from \"./index\";\n\nexport interface IUser {\n    id: string;\n    userName: string;\n    alias: string;\n    claims: ICheckbox[];\n    emailAddress: string;\n    password: string;\n    userType: UserType;\n    lastLoggedIn: Date;\n    hasLoggedIn: boolean;\n    movieRequestLimit: number;\n    episodeRequestLimit: number;\n    userAccessToken: string;\n    // FOR UI\n    checked: boolean;\n}\n\nexport interface ICreateWizardUser {\n    username: string;\n    password: string;\n    usePlexAdminAccount: boolean;\n}\n\nexport enum UserType {\n    LocalUser = 1,\n    PlexUser = 2,\n    EmbyUser = 3,\n}\n\nexport interface IIdentityResult {\n    errors: string[];\n    successful: boolean;\n}\n\nexport interface IUpdateLocalUser extends IUser {\n    currentPassword: string;\n    confirmNewPassword: string;\n}\n\nexport interface IResetPasswordToken {\n    email: string;\n    token: string;\n    password: string;\n}\n\nexport interface IMobileUsersViewModel {\n    username: string;\n    devices: number;\n}\n\n\n\n// WEBPACK FOOTER //\n// ./node_modules/angular2-template-loader!./node_modules/angular-router-loader/src!./ClientApp/app/interfaces/IUser.ts","import { IIssueCategory, IUser, RequestType } from \"./\";\n\nexport interface IIssues {\n    id?: number;\n    title: string;\n    requestType: RequestType;\n    providerId: string;\n    subject: string;\n    description: string;\n    issueCategory: IIssueCategory;\n    issueCategoryId: number;\n    status: IssueStatus;\n    resolvedDate?: Date;\n    comments: IIssueComments[];\n    requestId: number | undefined;\n    userReported: IUser | undefined;\n}\n\nexport enum IssueStatus {\n    Pending = 0,\n    InProgress = 1,\n    Resolved = 2,\n}\n\nexport interface IIssueCount {\n    pending: number;\n    inProgress: number;\n    resolved: number;\n}\n\nexport interface IPagenator {\n        first: number;\n        rows: number;\n        page: number;\n        pageCount: number;\n}\n\nexport interface IIssueComments {\n    userId: string;\n    comment: string;\n    movieIssueId: number | undefined;\n    tvIssueId: number | undefined;\n    date: Date;\n    user: IUser;\n    issues: IIssues | undefined;\n}\n\nexport interface IIssuesChat {\n    comment: string;\n    date: Date;\n    username: string;\n    adminComment: boolean;\n}\n\nexport interface INewIssueComments {\n    comment: string;\n    issueId: number;\n}\n\nexport interface IUpdateStatus {\n    issueId: number;\n    status: IssueStatus;\n}\n\n\n\n// WEBPACK FOOTER //\n// ./node_modules/angular2-template-loader!./node_modules/angular-router-loader/src!./ClientApp/app/interfaces/IIssues.ts","module.exports = (__webpack_require__(1))(794);\n\n\n//////////////////\n// WEBPACK FOOTER\n// delegated ./node_modules/rxjs/add/operator/debounceTime.js from dll-reference vendor_a449fdf94c391aac3fe0\n// module id = 177\n// module chunks = 1 2","module.exports = (__webpack_require__(1))(803);\n\n\n//////////////////\n// WEBPACK FOOTER\n// delegated ./node_modules/rxjs/add/operator/distinctUntilChanged.js from dll-reference vendor_a449fdf94c391aac3fe0\n// module id = 178\n// module chunks = 1 2","import { CommonModule } from \"@angular/common\";\nimport { NgModule } from \"@angular/core\";\nimport { FormsModule } from \"@angular/forms\";\nimport { TranslateModule } from \"@ngx-translate/core\";\n\nimport { IssuesReportComponent } from \"./issues-report.component\";\n\nimport { SidebarModule } from \"primeng/primeng\";\n\n@NgModule({\n  declarations: [\n    IssuesReportComponent,\n  ],\n  imports: [\n    SidebarModule,\n    FormsModule,\n    CommonModule,\n  ],\n  exports: [\n      TranslateModule, \n      CommonModule, \n      FormsModule,\n      SidebarModule,\n      IssuesReportComponent,\n    ],\n})\nexport class SharedModule {}\n\n\n\n// WEBPACK FOOTER //\n// ./node_modules/angular2-template-loader!./node_modules/angular-router-loader/src!./ClientApp/app/shared/shared.module.ts","import { Component, EventEmitter, Input, Output } from \"@angular/core\";\n\nimport { IIssueCategory, IIssues, IssueStatus, RequestType } from \"./../interfaces\";\nimport { IssuesService, NotificationService } from \"./../services\";\n\n@Component({\n    selector: \"issue-report\",\n    template: require('./issues-report.component.html'),\n\n})\nexport class IssuesReportComponent {\n    @Input() public visible: boolean;\n    @Input() public id: number; // RequestId\n    @Input() public title: string;\n    @Input() public issueCategory: IIssueCategory;\n    @Input() public movie: boolean;\n    @Input() public providerId: string;\n\n    @Output() public visibleChange = new EventEmitter<boolean>();\n\n    public submitted: boolean = false;\n\n    get getTitle(): string {\n        return this.title;\n    }\n\n    public issue: IIssues;\n\n    constructor(private issueService: IssuesService,\n                private notification: NotificationService) {\n        this.issue = {\n            subject: \"\",\n            description: \"\",\n            issueCategory: { value: \"\", id: 0 },\n            status: IssueStatus.Pending,\n            resolvedDate: undefined,\n            id: undefined,\n            issueCategoryId: 0,\n            comments: [],\n            requestId: undefined,\n            requestType: RequestType.movie,\n            title: \"\",\n            providerId: \"\",\n            userReported: undefined,\n        };\n    }\n\n    public submit() {\n        this.submitted = true;\n        const issue = this.issue;\n        issue.requestId = this.id;\n        issue.issueCategory = this.issueCategory;\n        issue.issueCategoryId = this.issueCategory.id;\n        issue.title = this.title;\n        issue.providerId = this.providerId;\n        if (this.movie) {\n            issue.requestType = RequestType.movie;\n        } else {\n            issue.requestType = RequestType.tvShow;\n        }\n        this.issueService.createIssue(issue).subscribe(x => {\n            if (x) {\n                this.notification.success(\"Issue Created\");\n            }\n        });\n\n    }\n\n    public hide(): void {\n        this.submitted = false;\n        this.visible = !this.visible;\n        this.visibleChange.emit(this.visible);\n    }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./node_modules/angular2-template-loader!./node_modules/angular-router-loader/src!./ClientApp/app/shared/issues-report.component.ts","module.exports = \"<p-sidebar [(visible)]=\\\"visible\\\" position=\\\"right\\\" styleClass=\\\"ui-sidebar-md side-back\\\" (onHide)=\\\"hide()\\\">\\n    <div *ngIf=\\\"title\\\">\\n\\n       \\n        <h3>Reporting an Issue for \\\"{{title}}\\\"</h3>\\n\\n        <h4 *ngIf=\\\"issueCategory\\\">Issue type: {{issueCategory.value}}</h4>\\n\\n        <div class=\\\"form-group\\\">\\n            <label for=\\\"subject\\\" class=\\\"control-label\\\">Subject</label>\\n            <div>\\n                <input type=\\\"text\\\" [(ngModel)]=\\\"issue.subject\\\" class=\\\"form-control form-control-custom \\\" id=\\\"subject\\\" name=\\\"subject\\\"\\n                    value=\\\"{{issue?.subject}}\\\">\\n            </div>\\n        </div>\\n\\n        <div class=\\\"form-group\\\">\\n            <label for=\\\"description\\\" class=\\\"control-label\\\">Description</label>\\n            <div>\\n                <textarea class=\\\"form-control-custom form-control\\\" [(ngModel)]=\\\"issue.description\\\" rows=\\\"5\\\" type=\\\"text\\\"></textarea>\\n            </div>\\n        </div>\\n\\n\\n        <button type=\\\"button\\\" [disabled]=\\\"submitted\\\" class=\\\"btn btn-primary-outline\\\" (click)=\\\"submit()\\\">Submit</button>\\n     </div>\\n</p-sidebar>\\n\";\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./ClientApp/app/shared/issues-report.component.html\n// module id = 181\n// module chunks = 1 2 3","module.exports = (__webpack_require__(1))(920);\n\n\n//////////////////\n// WEBPACK FOOTER\n// delegated ./node_modules/rxjs/add/operator/takeUntil.js from dll-reference vendor_a449fdf94c391aac3fe0\n// module id = 185\n// module chunks = 0 2","\n        var result = require(\"!!../../../node_modules/css-loader/index.js?-url&minimize!../../../node_modules/sass-loader/lib/loader.js!./tvrequests.component.scss\");\n\n        if (typeof result === \"string\") {\n            module.exports = result;\n        } else {\n            module.exports = result.toString();\n        }\n    \n\n\n//////////////////\n// WEBPACK FOOTER\n// ./ClientApp/app/requests/tvrequests.component.scss\n// module id = 186\n// module chunks = 1 2","exports = module.exports = require(\"../../../node_modules/css-loader/lib/css-base.js\")(false);\n// imports\n\n\n// module\nexports.push([module.id, \"th{text-align:left!important}\", \"\"]);\n\n// exports\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/css-loader?-url&minimize!./node_modules/sass-loader/lib/loader.js!./ClientApp/app/requests/tvrequests.component.scss\n// module id = 187\n// module chunks = 1 2","import { Component, Input, OnInit } from \"@angular/core\";\nimport { DomSanitizer } from \"@angular/platform-browser\";\nimport { TranslateService } from \"@ngx-translate/core\";\nimport \"rxjs/add/operator/debounceTime\";\nimport \"rxjs/add/operator/distinctUntilChanged\";\nimport \"rxjs/add/operator/map\";\nimport { Subject } from \"rxjs/Subject\";\n\nimport { AuthService } from \"../auth/auth.service\";\nimport { IIssueCategory, IRequestEngineResult, ISearchMovieResult } from \"../interfaces\";\nimport { NotificationService, RequestService, SearchService } from \"../services\";\n\n@Component({\n    selector: \"movie-search\",\n    template: require('./moviesearch.component.html'),\n})\nexport class MovieSearchComponent implements OnInit {\n\n    public searchText: string;\n    public searchChanged: Subject<string> = new Subject<string>();\n    public movieResults: ISearchMovieResult[];\n    public result: IRequestEngineResult;\n    public searchApplied = false;\n    \n    @Input() public issueCategories: IIssueCategory[];\n    @Input() public issuesEnabled: boolean;\n    public issuesBarVisible = false;\n    public issueRequestTitle: string;\n    public issueRequestId: number;\n    public issueProviderId: string;\n    public issueCategorySelected: IIssueCategory;\n        \n    constructor(private searchService: SearchService, private requestService: RequestService,\n                private notificationService: NotificationService, private authService: AuthService,\n                private readonly translate: TranslateService, private sanitizer: DomSanitizer) {\n\n        this.searchChanged\n            .debounceTime(600) // Wait Xms after the last event before emitting last event\n            .distinctUntilChanged() // only emit if value is different from previous value\n            .subscribe(x => {\n                this.searchText = x as string;\n                if (this.searchText === \"\") {\n                    this.clearResults();\n                    return;\n                }\n                this.searchService.searchMovie(this.searchText)\n                    .subscribe(x => {\n                        this.movieResults = x;\n                        this.searchApplied = true;\n                        // Now let's load some extra info including IMDB Id\n                        // This way the search is fast at displaying results.\n                        this.getExtraInfo();\n                    });\n            });\n    }\n\n    public ngOnInit() {\n        this.searchText = \"\";\n        this.movieResults = [];\n        this.result = {\n            message: \"\",\n            result: false,\n            errorMessage: \"\",\n        };      \n    }\n\n    public search(text: any) {\n        this.searchChanged.next(text.target.value);\n    }\n\n    public request(searchResult: ISearchMovieResult) {\n        searchResult.requested = true;\n        searchResult.requestProcessing = true;\n        if (this.authService.hasRole(\"admin\") || this.authService.hasRole(\"AutoApproveMovie\")) {\n            searchResult.approved = true;\n        }\n\n        try {\n            this.requestService.requestMovie({ theMovieDbId: searchResult.id })\n                .subscribe(x => {\n                    this.result = x;\n\n                    if (this.result.result) {\n                        this.translate.get(\"Search.RequestAdded\", { title: searchResult.title }).subscribe(x => {\n                            this.notificationService.success(x);\n                            searchResult.processed = true;\n                        });\n                    } else {\n                        if (this.result.errorMessage && this.result.message) {\n                            this.notificationService.warning(\"Request Added\", `${this.result.message} - ${this.result.errorMessage}`);\n                        } else {\n                            this.notificationService.warning(\"Request Added\", this.result.message ? this.result.message : this.result.errorMessage);\n                        }\n                        searchResult.requested = false;\n                        searchResult.approved = false;\n                        searchResult.processed = false;\n                        searchResult.requestProcessing = false;\n                    }\n                });\n        } catch (e) {\n\n            searchResult.processed = false;\n            searchResult.requestProcessing = false;\n            this.notificationService.error(e);\n        }\n    }\n\n    public popularMovies() {\n        this.clearResults();\n        this.searchService.popularMovies()\n            .subscribe(x => {\n                this.movieResults = x;\n                this.getExtraInfo();\n            });\n    }\n    public nowPlayingMovies() {\n        this.clearResults();\n        this.searchService.nowPlayingMovies()\n            .subscribe(x => {\n                this.movieResults = x;\n                this.getExtraInfo();\n            });\n    }\n    public topRatedMovies() {\n        this.clearResults();\n        this.searchService.topRatedMovies()\n            .subscribe(x => {\n                this.movieResults = x;\n                this.getExtraInfo();\n            });\n    }\n    public upcomingMovies() {\n        this.clearResults();\n        this.searchService.upcomingMovies()\n            .subscribe(x => {\n                this.movieResults = x;\n                this.getExtraInfo();\n            });\n    }\n\n    public reportIssue(catId: IIssueCategory, req: ISearchMovieResult) {\n        this.issueRequestId = req.id;\n        this.issueRequestTitle = req.title;\n        this.issueCategorySelected = catId;\n        this.issuesBarVisible = true;\n        this.issueProviderId = req.id.toString();\n    }\n\n   private getExtraInfo() {\n\n        this.movieResults.forEach((val, index) => {\n           \n            val.background = this.sanitizer.\n            bypassSecurityTrustStyle\n            (\"url(\" + \"https://image.tmdb.org/t/p/w1280\" + val.backdropPath + \")\");\n            this.searchService.getMovieInformation(val.id)\n                .subscribe(m => {\n                    this.updateItem(val, m);\n                });\n        });\n    }\n\n    private updateItem(key: ISearchMovieResult, updated: ISearchMovieResult) {\n        const index = this.movieResults.indexOf(key, 0);\n        if (index > -1) {\n            const copy = { ...this.movieResults[index] };\n            this.movieResults[index] = updated;  \n            this.movieResults[index].background = copy.background;     \n        }\n    }\n    private clearResults() {\n        this.movieResults = [];\n        this.searchApplied = false;\n    }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./node_modules/angular2-template-loader!./node_modules/angular-router-loader/src!./ClientApp/app/search/moviesearch.component.ts","module.exports = \"<!-- Movie tab -->\\n<div role=\\\"tabpanel\\\" class=\\\"tab-pane active\\\" id=\\\"MoviesTab\\\">\\n    <div class=\\\"input-group\\\">\\n        <input id=\\\"search\\\" type=\\\"text\\\" class=\\\"form-control form-control-custom form-control-search form-control-withbuttons\\\" (keyup)=\\\"search($event)\\\">\\n        <div class=\\\"input-group-addon right-radius\\\">\\n            <div class=\\\"btn-group\\\">\\n                <a href=\\\"#\\\" class=\\\"btn btn-sm btn-primary-outline dropdown-toggle\\\" data-toggle=\\\"dropdown\\\" aria-expanded=\\\"false\\\">\\n                    {{ 'Search.Suggestions' | translate }}\\n                    <i class=\\\"fa fa-chevron-down\\\"></i>\\n                </a>\\n                <ul class=\\\"dropdown-menu\\\">\\n                    <li><a (click)=\\\"popularMovies()\\\" [translate]=\\\"'Search.Movies.PopularMovies'\\\"></a></li>\\n                    <li><a (click)=\\\"upcomingMovies()\\\" [translate]=\\\"'Search.Movies.UpcomingMovies'\\\"></a></li>\\n                    <li><a (click)=\\\"topRatedMovies()\\\" [translate]=\\\"'Search.Movies.TopRatedMovies'\\\"></a></li>\\n                    <li><a (click)=\\\"nowPlayingMovies()\\\" [translate]=\\\"'Search.Movies.NowPlayingMovies'\\\"></a></li>\\n                </ul>\\n            </div>\\n            <i class=\\\"fa fa-search\\\"></i>\\n        </div>\\n    </div>\\n    <br />\\n    <br />\\n    <!-- Movie content -->\\n    <div id=\\\"movieList\\\">\\n        <div *ngIf=\\\"searchApplied && movieResults?.length <= 0\\\" class='no-search-results'>\\n            <i class='fa fa-film no-search-results-icon'></i><div class='no-search-results-text' [translate]=\\\"'Search.NoResults'\\\"></div>\\n        </div>\\n\\n        <div *ngFor=\\\"let result of movieResults\\\">\\n        \\n            <div class=\\\"row\\\" >\\n                \\n                    <div class=\\\"myBg backdrop\\\" [style.background-image]=\\\"result.background\\\"></div>\\n                    <div class=\\\"tint\\\" style=\\\"background-image: linear-gradient(to bottom, rgba(0,0,0,0.6) 0%,rgba(0,0,0,0.6) 100%);\\\"></div>\\n                <div class=\\\"col-sm-2 small-padding\\\">\\n                    <img *ngIf=\\\"result.posterPath\\\"  class=\\\"img-responsive poster\\\" src=\\\"https://image.tmdb.org/t/p/w300/{{result.posterPath}}\\\" alt=\\\"poster\\\">\\n\\n                </div>\\n                <div class=\\\"col-sm-8 small-padding\\\">\\n                    <div>\\n                        <a href=\\\"https://www.themoviedb.org/movie/{{result.id}}/\\\" target=\\\"_blank\\\">\\n                            <h4>{{result.title}} ({{result.releaseDate | date: 'yyyy'}})</h4>\\n                        </a>\\n<span class=\\\"tags\\\">\\n                        <span *ngIf=\\\"result.releaseDate\\\" class=\\\"label label-info\\\" id=\\\"releaseDateLabel\\\" target=\\\"_blank\\\">{{ 'Search.ReleaseDate' | translate }} {{result.releaseDate | date: 'dd/MM/yyyy'}}</span>\\n\\n                        <a *ngIf=\\\"result.homepage\\\" href=\\\"{{result.homepage}}\\\" id=\\\"homePageLabel\\\" target=\\\"_blank\\\"><span class=\\\"label label-info\\\" [translate]=\\\"'Search.Movies.HomePage'\\\"></span></a>\\n\\n                        <a *ngIf=\\\"result.trailer\\\" href=\\\"{{result.trailer}}\\\" id=\\\"trailerLabel\\\" target=\\\"_blank\\\"><span class=\\\"label label-info\\\" [translate]=\\\"'Search.Movies.Trailer'\\\"></span></a>\\n                        <span *ngIf=\\\"result.quality\\\" id=\\\"qualityLabel\\\" class=\\\"label label-success\\\">{{result.quality}}p</span>\\n                        \\n                        <ng-template [ngIf]=\\\"result.available\\\"><span class=\\\"label label-success\\\" id=\\\"availableLabel\\\" [translate]=\\\"'Common.Available'\\\"></span></ng-template>\\n                        <ng-template [ngIf]=\\\"result.approved && !result.available\\\"><span class=\\\"label label-info\\\" id=\\\"processingRequestLabel\\\" [translate]=\\\"'Common.ProcessingRequest'\\\"></span></ng-template>\\n                        <ng-template [ngIf]=\\\"result.requested && !result.approved && !result.available\\\"><span class=\\\"label label-warning\\\" id=\\\"pendingApprovalLabel\\\" [translate]=\\\"'Common.PendingApproval'\\\"></span></ng-template>\\n                        <ng-template [ngIf]=\\\"!result.requested && !result.available && !result.approved\\\"><span class=\\\"label label-danger\\\" id=\\\"notRequestedLabel\\\" [translate]=\\\"'Common.NotRequested'\\\"></span></ng-template>\\n\\n\\n                    </span>\\n\\n                        <br/>\\n                    </div>\\n                    <p style=\\\"font-size: 0.9rem !important\\\">{{result.overview}}</p>\\n                </div>\\n\\n\\n                <div class=\\\"col-sm-2 small-padding\\\">\\n\\n                    <div *ngIf=\\\"result.available\\\">\\n                        <button style=\\\"text-align: right\\\" class=\\\"btn btn-success-outline disabled\\\" disabled><i class=\\\"fa fa-check\\\"></i> {{ 'Common.Available' | translate }}</button>\\n                    </div>\\n                    <div *ngIf=\\\"!result.available\\\">\\n                    <div *ngIf=\\\"result.requested || result.approved; then requestedBtn else notRequestedBtn\\\"></div>\\n                    <ng-template #requestedBtn>\\n                        <button style=\\\"text-align: right\\\" class=\\\"btn btn-primary-outline disabled\\\" [disabled]><i class=\\\"fa fa-check\\\"></i> {{ 'Common.Requested' | translate }}</button>\\n                    </ng-template>\\n                    <ng-template #notRequestedBtn>\\n                        <button id=\\\"{{result.id}}\\\" style=\\\"text-align: right\\\" class=\\\"btn btn-primary-outline\\\" (click)=\\\"request(result)\\\">\\n                            <i *ngIf=\\\"result.requestProcessing\\\" class=\\\"fa fa-circle-o-notch fa-spin fa-fw\\\"></i> <i *ngIf=\\\"!result.requestProcessing && !result.processed\\\" class=\\\"fa fa-plus\\\"></i>\\n                            <i *ngIf=\\\"result.processed && !result.requestProcessing\\\" class=\\\"fa fa-check\\\"></i>{{ 'Common.Request' | translate }}</button>\\n                    </ng-template>\\n                        </div>\\n\\n                    <br/>\\n                    <div *ngIf=\\\"result.available\\\">\\n                        <a *ngIf=\\\"result.plexUrl\\\" style=\\\"text-align: right\\\" class=\\\"btn btn-sm btn-success-outline\\\" href=\\\"{{result.plexUrl}}\\\" target=\\\"_blank\\\"><i class=\\\"fa fa-eye\\\"></i> View On Plex</a>\\n                    </div>\\n                    <div class=\\\"dropdown\\\" *ngIf=\\\"result.available && issueCategories && issuesEnabled\\\">\\n                        <button class=\\\"btn btn-sm btn-primary-outline dropdown-toggle\\\" type=\\\"button\\\" data-toggle=\\\"dropdown\\\" aria-haspopup=\\\"true\\\" aria-expanded=\\\"true\\\">\\n                            <i class=\\\"fa fa-plus\\\"></i> Report Issue\\n                            <span class=\\\"caret\\\"></span>\\n                        </button>\\n                        <ul class=\\\"dropdown-menu\\\" aria-labelledby=\\\"dropdownMenu1\\\">\\n                            <li *ngFor=\\\"let cat of issueCategories\\\"><a [routerLink]=\\\"\\\" (click)=\\\"reportIssue(cat, result)\\\">{{cat.value}}</a></li>\\n                        </ul>\\n                    </div>\\n\\n                </div>\\n\\n            </div>\\n            <br/>\\n            <br/>\\n        </div>\\n\\n    </div>\\n</div>\\n\\n\\n<issue-report [movie]=\\\"true\\\" [visible]=\\\"issuesBarVisible\\\" (visibleChange)=\\\"issuesBarVisible = $event;\\\" [title]=\\\"issueRequestTitle\\\"\\n[issueCategory]=\\\"issueCategorySelected\\\" [id]=\\\"issueRequestId\\\" [providerId]=\\\"issueProviderId\\\"></issue-report>\\n\";\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./ClientApp/app/search/moviesearch.component.html\n// module id = 285\n// module chunks = 2","import { Component, OnInit } from \"@angular/core\";\nimport \"rxjs/add/operator/debounceTime\";\nimport \"rxjs/add/operator/distinctUntilChanged\";\nimport \"rxjs/add/operator/map\";\nimport { Subject } from \"rxjs/Subject\";\n\nimport { AuthService } from \"../auth/auth.service\";\nimport { NotificationService, RequestService, SearchService } from \"../services\";\n\nimport { IRequestEngineResult, ISearchMovieResult, ISearchMovieResultContainer } from \"../interfaces\";\n\n@Component({\n    selector: \"movie-search-grid\",\n    template: require('./moviesearchgrid.component.html'),\n})\nexport class MovieSearchGridComponent implements OnInit {\n\n    public searchText: string;\n    public searchChanged: Subject<string> = new Subject<string>();\n    public movieResults: ISearchMovieResult[];\n    public movieResultGrid: ISearchMovieResultContainer[] = [];\n    public result: IRequestEngineResult;\n    public searchApplied = false;\n        \n    constructor(private searchService: SearchService, private requestService: RequestService,\n                private notificationService: NotificationService, private authService: AuthService) {\n\n        this.searchChanged\n            .debounceTime(600) // Wait Xms afterthe last event before emitting last event\n            .distinctUntilChanged() // only emit if value is different from previous value\n            .subscribe(x => {\n                this.searchText = x as string;\n                if (this.searchText === \"\") {\n                    this.clearResults();\n                    return;\n                }\n                this.searchService.searchMovie(this.searchText)\n                    .subscribe(x => {\n                        this.movieResults = x;\n                        this.searchApplied = true;\n                        // Now let's load some exta info including IMDBId\n                        // This way the search is fast at displaying results.\n                        this.getExtaInfo();\n                    });\n            });\n    }\n\n    public ngOnInit() {\n        this.searchText = \"\";\n        this.movieResults = [];\n        this.result = {\n            message: \"\",\n            result: false,\n            errorMessage: \"\",\n        };\n    }\n\n    public search(text: any) {\n        this.searchChanged.next(text.target.value);\n    }\n\n    public request(searchResult: ISearchMovieResult) {\n        searchResult.requested = true;\n        searchResult.requestProcessing = true;\n        if (this.authService.hasRole(\"admin\") || this.authService.hasRole(\"AutoApproveMovie\")) {\n            searchResult.approved = true;\n        }\n\n        try {\n            this.requestService.requestMovie({ theMovieDbId : searchResult.id})\n                .subscribe(x => {\n                    this.result = x;\n\n                    if (this.result.result) {\n                        this.notificationService.success(\n                            `Request for ${searchResult.title} has been added successfully`);\n                        searchResult.processed = true;\n                    } else {\n                        if (this.result.errorMessage && this.result.message) {\n                            this.notificationService.warning(\"Request Added\", `${this.result.message} - ${this.result.errorMessage}`);\n                        } else {\n                            this.notificationService.warning(\"Request Added\", this.result.message ? this.result.message : this.result.errorMessage);\n                        }\n                        searchResult.requested = false;\n                        searchResult.approved = false;\n                        searchResult.processed = false;\n                        searchResult.requestProcessing = false;\n                    }\n                });\n        } catch (e) {\n\n            searchResult.processed = false;\n            searchResult.requestProcessing = false;\n            this.notificationService.error(e);\n        }\n    }\n\n    public popularMovies() {\n        this.clearResults();\n        this.searchService.popularMovies()\n            .subscribe(x => {\n                this.movieResults = x;\n                this.processGrid(x);\n                this.getExtaInfo();\n            });\n    }\n    public nowPlayingMovies() {\n        this.clearResults();\n        this.searchService.nowPlayingMovies()\n            .subscribe(x => {\n                this.movieResults = x;\n                this.getExtaInfo();\n            });\n    }\n    public topRatedMovies() {\n        this.clearResults();\n        this.searchService.topRatedMovies()\n            .subscribe(x => {\n                this.movieResults = x;\n                this.getExtaInfo();\n            });\n    }\n    public upcomingMovies() {\n        this.clearResults();\n        this.searchService.upcomingMovies()\n            .subscribe(x => {\n                this.movieResults = x;\n                this.getExtaInfo();\n            });\n    }\n\n   private getExtaInfo() {\n        this.movieResults.forEach((val) => {\n            this.searchService.getMovieInformation(val.id)\n                .subscribe(m => this.updateItem(val, m));\n        });\n    }\n\n    private updateItem(key: ISearchMovieResult, updated: ISearchMovieResult) {\n        const index = this.movieResults.indexOf(key, 0);\n        if (index > -1) {\n            this.movieResults[index] = updated;\n        }\n    }\n\n    private clearResults() {\n        this.movieResults = [];\n        this.searchApplied = false;\n    }\n    \n    private processGrid(movies: ISearchMovieResult[]) {\n        let container = <ISearchMovieResultContainer>{ movies: [] };\n        movies.forEach((movie, i) => {\n            i++;\n            if((i % 4) === 0) {\n                container.movies.push(movie);  \n                this.movieResultGrid.push(container);\n                container = <ISearchMovieResultContainer>{ movies: [] };\n            } else {\n                \n                container.movies.push(movie);                \n            }\n        });\n        this.movieResultGrid.push(container);\n    }\n\n}\n\n\n\n// WEBPACK FOOTER //\n// ./node_modules/angular2-template-loader!./node_modules/angular-router-loader/src!./ClientApp/app/search/moviesearchgrid.component.ts","module.exports = \"<!-- Movie tab -->\\n<div role=\\\"tabpanel\\\" class=\\\"tab-pane active\\\" id=\\\"MoviesTab\\\">\\n    <div class=\\\"input-group\\\">\\n        <input id=\\\"search\\\" type=\\\"text\\\" class=\\\"form-control form-control-custom form-control-search form-control-withbuttons\\\" (keyup)=\\\"search($event)\\\">\\n        <div class=\\\"input-group-addon right-radius\\\">\\n            <div class=\\\"btn-group\\\">\\n                <a href=\\\"#\\\" class=\\\"btn btn-sm btn-primary-outline dropdown-toggle\\\" data-toggle=\\\"dropdown\\\" aria-expanded=\\\"false\\\">\\n                    Suggestions\\n                    <i class=\\\"fa fa-chevron-down\\\"></i>\\n                </a>\\n                <ul class=\\\"dropdown-menu\\\">\\n                    <li>\\n                        <a (click)=\\\"popularMovies()\\\">Popular Movies</a>\\n                    </li>\\n                    <li>\\n                        <a (click)=\\\"upcomingMovies()\\\">Upcoming Movies</a>\\n                    </li>\\n                    <li>\\n                        <a (click)=\\\"topRatedMovies()\\\">Top Rated Movies</a>\\n                    </li>\\n                    <li>\\n                        <a (click)=\\\"nowPlayingMovies()\\\">Now Playing Movies</a>\\n                    </li>\\n                </ul>\\n            </div>\\n            <i id=\\\"movieSearchButton\\\" class=\\\"fa fa-search\\\"></i>\\n        </div>\\n    </div>\\n    <br />\\n    <br />\\n    <!-- Movie content -->\\n    <div id=\\\"movieList\\\">\\n        <div *ngIf=\\\"searchApplied && movieResults?.length <= 0\\\" class='no-search-results'>\\n            <i class='fa fa-film no-search-results-icon'></i>\\n            <div class='no-search-results-text'>Sorry, we didn't find any results!</div>\\n        </div>\\n\\n        <!--NEW-->\\n        <div *ngFor=\\\"let grid of movieResultGrid; let i = index\\\">\\n            <div class=\\\"row\\\">\\n                <div *ngFor=\\\"let r of grid.movies\\\">\\n                    <div class=\\\"col-md-3\\\">\\n\\n                        <img *ngIf=\\\"r.posterPath\\\" class=\\\"img-responsive poster\\\" src=\\\"https://image.tmdb.org/t/p/w150/{{r.posterPath}}\\\"\\n                            alt=\\\"poster\\\">\\n\\n                    </div>\\n                </div>\\n            </div>\\n        </div>\\n        <!--END NEW-->\\n\\n        <br/>\\n        <br/>\\n        <br/>\\n\\n        <hr/>\\n        <div *ngFor=\\\"let result of movieResults\\\">\\n            <div class=\\\"row\\\">\\n                <div id=\\\"imgDiv\\\" class=\\\"col-sm-2\\\">\\n\\n\\n                    <img *ngIf=\\\"result.posterPath\\\" class=\\\"img-responsive poster\\\" src=\\\"https://image.tmdb.org/t/p/w150/{{result.posterPath}}\\\"\\n                        alt=\\\"poster\\\">\\n\\n                </div>\\n                <div class=\\\"col-sm-8\\\">\\n                    <div>\\n                        <a href=\\\"https://www.themoviedb.org/movie/{{result.id}}/\\\" target=\\\"_blank\\\">\\n                            <h4>{{result.title}} ({{result.releaseDate | date: 'yyyy'}})</h4>\\n                        </a>\\n\\n                        <span *ngIf=\\\"result.releaseDate\\\" class=\\\"label label-info\\\" target=\\\"_blank\\\">Release Date: {{result.releaseDate | date: 'dd/MM/yyyy'}}</span>\\n\\n                        <a *ngIf=\\\"result.homepage\\\" href=\\\"{{result.homepage}}\\\" id=\\\"homepageLabel\\\" target=\\\"_blank\\\">\\n                            <span class=\\\"label label-info\\\">HomePage</span>\\n                        </a>\\n\\n                        <a *ngIf=\\\"result.trailer\\\" href=\\\"{{result.trailer}}\\\" id=\\\"trailerLabel\\\" target=\\\"_blank\\\">\\n                            <span class=\\\"label label-info\\\">Trailer</span>\\n                        </a>\\n                        <span *ngIf=\\\"result.quality\\\" class=\\\"label label-success\\\" id=\\\"qualityLabel\\\">{{result.quality}}p</span>\\n\\n                        <ng-template [ngIf]=\\\"result.available\\\">\\n                            <span class=\\\"label label-success\\\"  id=\\\"availableLabel\\\">Available</span>\\n                        </ng-template>\\n                        <ng-template [ngIf]=\\\"result.approved && !result.available\\\">\\n                            <span class=\\\"label label-info\\\" id=\\\"processingRequestLabel\\\">Processing Request</span>\\n                        </ng-template>\\n                        <ng-template [ngIf]=\\\"result.requested && !result.approved && !result.available\\\">\\n                            <span class=\\\"label label-warning\\\" id=\\\"pendingApprovalLabel\\\">Pending Approval</span>\\n                        </ng-template>\\n                        <ng-template [ngIf]=\\\"!result.requested && !result.available && !result.approved\\\">\\n                            <span class=\\\"label label-danger\\\" id=\\\"notRequetsedLabel\\\">Not Requested</span>\\n                        </ng-template>\\n\\n\\n\\n\\n                        <br/>\\n                        <br/>\\n                    </div>\\n                    <p style=\\\"font-size: 0.9rem !important\\\">{{result.overview}}</p>\\n                </div>\\n\\n\\n                <div class=\\\"col-sm-2\\\">\\n\\n                    <div *ngIf=\\\"result.available\\\">\\n                        <button style=\\\"text-align: right\\\" class=\\\"btn btn-success-outline disabled\\\" disabled>\\n                            <i class=\\\"fa fa-check\\\"></i> Available</button>\\n\\n                        <div *ngIf=\\\"result.plexUrl\\\">\\n                            <br/>\\n                            <br/>\\n                            <a style=\\\"text-align: right\\\" class=\\\"btn btn-sm btn-primary-outline\\\" href=\\\"{{result.plexUrl}}\\\" target=\\\"_blank\\\">\\n                                <i class=\\\"fa fa-eye\\\"></i> View In Plex</a>\\n\\n                        </div>\\n                    </div>\\n                    <div *ngIf=\\\"!result.available\\\">\\n                        <div *ngIf=\\\"result.requested || result.approved; then requestedBtn else notRequestedBtn\\\"></div>\\n                        <ng-template #requestedBtn>\\n                            <button style=\\\"text-align: right\\\" class=\\\"btn btn-primary-outline disabled\\\" [disabled]>\\n                                <i class=\\\"fa fa-check\\\"></i> Requested</button>\\n                        </ng-template>\\n                        <ng-template #notRequestedBtn>\\n                            <button id=\\\"{{result.id}}\\\" style=\\\"text-align: right\\\" class=\\\"btn btn-primary-outline\\\" (click)=\\\"request(result)\\\">\\n                                <i *ngIf=\\\"result.requestProcessing\\\" class=\\\"fa fa-circle-o-notch fa-spin fa-fw\\\"></i>\\n                                <i *ngIf=\\\"!result.requestProcessing && !result.processed\\\" class=\\\"fa fa-plus\\\"></i>\\n                                <i *ngIf=\\\"result.processed && !result.requestProcessing\\\" class=\\\"fa fa-check\\\"></i>Request</button>\\n                        </ng-template>\\n                    </div>\\n\\n                    <br/>\\n                    <div *ngIf=\\\"result.available\\\">\\n                        <a *ngIf=\\\"result.plexUrl\\\" style=\\\"text-align: right\\\" class=\\\"btn btn-sm btn-success-outline\\\" href=\\\"{{result.plexUrl}}\\\" target=\\\"_blank\\\">\\n                            <i class=\\\"fa fa-eye\\\"></i> View On Plex</a>\\n\\n                    </div>\\n\\n                </div>\\n\\n            </div>\\n            <hr/>\\n        </div>\\n\\n    </div>\\n</div>\";\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./ClientApp/app/search/moviesearchgrid.component.html\n// module id = 287\n// module chunks = 2","import { Component, OnInit } from \"@angular/core\";\n\nimport { IIssueCategory } from \"./../interfaces\";\nimport { IssuesService, SettingsService } from \"./../services\";\n\n@Component({\n    template: require('./search.component.html'),\n})\nexport class SearchComponent implements OnInit  {\n    public showTv: boolean;\n    public showMovie: boolean;\n    public issueCategories: IIssueCategory[];\n    public issuesEnabled = false;\n\n    constructor(private issuesService: IssuesService,\n                private settingsService: SettingsService) {\n\n    }\n\n    public ngOnInit() {\n        this.showMovie = true;\n        this.showTv = false;\n        this.issuesService.getCategories().subscribe(x => this.issueCategories = x);\n        this.settingsService.getIssueSettings().subscribe(x => this.issuesEnabled = x.enabled);\n    }\n\n    public selectMovieTab() {\n        this.showMovie = true;\n        this.showTv = false;\n    }\n\n    public selectTvTab() {\n        this.showMovie = false;\n        this.showTv = true;\n    }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./node_modules/angular2-template-loader!./node_modules/angular-router-loader/src!./ClientApp/app/search/search.component.ts","module.exports = \"<h1 [translate]=\\\"'Search.Title'\\\"></h1>\\n<h4 [translate]=\\\"'Search.Paragraph'\\\"></h4>\\n<br />\\n<!-- Nav tabs -->\\n\\n\\n<ul id=\\\"nav-tabs\\\" class=\\\"nav nav-tabs\\\" role=\\\"tablist\\\">\\n\\n    <li role=\\\"presentation\\\" class=\\\"active\\\">\\n        <a id=\\\"movieTabButton\\\" href=\\\"#MoviesTab\\\" aria-controls=\\\"home\\\" role=\\\"tab\\\" data-toggle=\\\"tab\\\" (click)=\\\"selectMovieTab()\\\"><i class=\\\"fa fa-film\\\"></i>  {{ 'Search.MoviesTab' | translate }}</a>\\n    </li>\\n    \\n    <li role=\\\"presentation\\\">\\n        <a id=\\\"tvTabButton\\\" href=\\\"#TvShowTab\\\" aria-controls=\\\"profile\\\" role=\\\"tab\\\" data-toggle=\\\"tab\\\" (click)=\\\"selectTvTab()\\\"><i class=\\\"fa fa-television\\\"></i> {{ 'Search.TvTab' | translate }}</a>\\n    </li>\\n</ul>\\n\\n<!-- Tab panes -->\\n<div class=\\\"tab-content\\\">\\n\\n    <div [hidden]=\\\"!showMovie\\\">\\n        <movie-search [issueCategories]=\\\"issueCategories\\\" [issuesEnabled]=\\\"issuesEnabled\\\"></movie-search>\\n    </div>\\n\\n    <div [hidden]=\\\"!showTv\\\">\\n        <tv-search [issueCategories]=\\\"issueCategories\\\" [issuesEnabled]=\\\"issuesEnabled\\\"></tv-search>\\n    </div>\\n</div>\\n\\n\\n\";\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./ClientApp/app/search/search.component.html\n// module id = 289\n// module chunks = 2","import { Component, Input, OnInit} from \"@angular/core\";\nimport \"rxjs/add/operator/takeUntil\";\n\nimport { NotificationService } from \"../services\";\nimport { RequestService } from \"../services\";\nimport { SearchService } from \"../services\";\n\nimport { INewSeasonRequests, IRequestEngineResult } from \"../interfaces\";\nimport { IEpisodesRequests } from \"../interfaces\";\nimport { ISearchTvResult } from \"../interfaces\";\n\n@Component({\n    selector: \"seriesinformation\",\n    template: require('./seriesinformation.component.html'),\n    styles: [require('./seriesinformation.component.scss')],\n})\nexport class SeriesInformationComponent implements OnInit {\n\n    public result: IRequestEngineResult;\n    public series: ISearchTvResult;\n    public requestedEpisodes: IEpisodesRequests[] = [];\n\n    @Input() private seriesId: number;\n\n    constructor(private searchService: SearchService, private requestService: RequestService, private notificationService: NotificationService) { }\n\n    public ngOnInit() {\n        this.searchService.getShowInformation(this.seriesId)\n            .subscribe(x => {\n                this.series = x;\n            });\n    }\n\n    public submitRequests() {\n        // Make sure something has been selected\n        const selected = this.series.seasonRequests.some((season) => {\n            return  season.episodes.some((ep) => {\n                return ep.selected;\n            });\n        });\n\n        if(!selected) {\n            this.notificationService.error(\"You need to select some episodes!\");\n            return;\n        }\n\n        this.series.requested = true;\n\n        this.requestService.requestTv(this.series)\n            .subscribe(x => {\n                this.result = x as IRequestEngineResult;\n                if (this.result.result) {\n                    this.notificationService.success(\n                        `Request for ${this.series.title} has been added successfully`);\n\n                    this.series.seasonRequests.forEach((season) => {\n                        season.episodes.forEach((ep) => {\n                            ep.selected = false;\n                        });\n                    });\n\n                } else {\n                    this.notificationService.warning(\"Request Added\", this.result.errorMessage ? this.result.errorMessage : this.result.message);\n                }\n            });\n    }\n\n    public addRequest(episode: IEpisodesRequests) {\n        episode.requested = true;\n        episode.selected = true;\n    }\n\n    public removeRequest(episode: IEpisodesRequests) {\n        episode.requested = false;\n        episode.selected = false;\n    }\n\n    public addAllEpisodes(season: INewSeasonRequests) {\n        season.episodes.forEach((ep) => this.addRequest(ep));\n    }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./node_modules/angular2-template-loader!./node_modules/angular-router-loader/src!./ClientApp/app/search/seriesinformation.component.ts","module.exports = \"<style>\\n    #bannerimage {\\n        width: 758px;\\n        height: 140px;\\n        background-color: black;\\n        background-position: center;\\n        padding-bottom:30px;\\n    }\\n</style>\\n<div *ngIf=\\\"series\\\">\\n    <button class=\\\"btn btn-sm btn-success pull-right\\\" (click)=\\\"submitRequests()\\\" title=\\\"Go to top\\\">{{ 'Search.TvShows.SubmitRequest' | translate }}</button>\\n    \\n    <ngb-tabset>\\n             \\n        <div *ngFor=\\\"let season of series.seasonRequests\\\">\\n            <ngb-tab [id]=\\\"season.seasonNumber\\\" [title]=\\\"season.seasonNumber\\\">\\n                <ng-template ngbTabContent>\\n                    <h2 [translate]=\\\"'Requests.SeasonNumberHeading'\\\" [translateParams]=\\\"{seasonNumber: season.seasonNumber}\\\">Season: {{season.seasonNumber}}</h2>\\n                    \\n                    <button (click)=\\\"addAllEpisodes(season)\\\" class=\\\"btn btn-sm btn-primary-outline\\\" [translate]=\\\"'Search.TvShows.SelectAllInSeason'\\\" [translateParams]=\\\"{seasonNumber: season.seasonNumber}\\\">Select All in Season {{season.seasonNumber}}</button>\\n                    <table class=\\\"table table-striped table-hover table-responsive table-condensed\\\">\\n                        <thead>\\n                        <tr>\\n                            <th>\\n                                <a>\\n                                    #\\n                                </a>\\n                            </th>\\n                            <th>\\n                                <a>\\n                                    Title\\n                                </a>\\n                            </th>\\n                            <th>\\n                                <a>\\n                                    Air Date\\n                                </a>\\n                            </th>\\n                            <th>\\n                                <a>\\n                                    Status\\n                                </a>\\n                            </th>\\n                        </tr>\\n                        </thead>\\n                        <tbody>\\n                        <tr *ngFor=\\\"let ep of season.episodes\\\">\\n                            <td>\\n                                {{ep.episodeNumber}}\\n                            </td>\\n                            <td>\\n                                {{ep.title}}\\n                            </td>\\n                            <td>\\n                                {{ep.airDate | date: 'dd/MM/yyyy' }}\\n                            </td>\\n                            <td>\\n                                <ng-template [ngIf]=\\\"ep.available\\\"><span class=\\\"label label-success\\\" id=\\\"availableLabel\\\">Available</span></ng-template>\\n                                <ng-template [ngIf]=\\\"ep.approved && !ep.available \\\"><span class=\\\"label label-info\\\" id=\\\"processingRequestLabel\\\">Processing Request</span></ng-template>\\n                                <ng-template [ngIf]=\\\"ep.selected\\\"><span class=\\\"label label-info\\\" id=\\\"selectedLabel\\\">Selected</span></ng-template>\\n                                <ng-template [ngIf]=\\\"ep.requested && !ep.approved && !ep.available && !ep.selected\\\"><span class=\\\"label label-warning\\\" id=\\\"pendingApprovalLabel\\\">Pending Approval</span></ng-template>\\n                                <ng-template [ngIf]=\\\"!ep.requested && !ep.available && !ep.approved\\\"><span class=\\\"label label-danger\\\" id=\\\"notRequetsedLabel\\\">Not Requested</span></ng-template>\\n                            </td>\\n\\n                            <td>\\n                                <button *ngIf=\\\"!ep.selected\\\" (click)=\\\"addRequest(ep)\\\" [disabled]=\\\"ep.available || ep.requested || ep.approved\\\" class=\\\"btn btn-sm btn-primary-outline\\\">Select</button>\\n                                <button *ngIf=\\\"ep.selected\\\" (click)=\\\"removeRequest(ep)\\\" class=\\\"btn btn-sm btn-primary-outline\\\">Unselect</button>\\n                            </td>\\n                        </tr>\\n                        </tbody>\\n                    </table>\\n                </ng-template>\\n            </ngb-tab>\\n        </div>\\n    </ngb-tabset>\\n    \\n</div>\\n\";\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./ClientApp/app/search/seriesinformation.component.html\n// module id = 291\n// module chunks = 2","\n        var result = require(\"!!../../../node_modules/css-loader/index.js?-url&minimize!../../../node_modules/sass-loader/lib/loader.js!./seriesinformation.component.scss\");\n\n        if (typeof result === \"string\") {\n            module.exports = result;\n        } else {\n            module.exports = result.toString();\n        }\n    \n\n\n//////////////////\n// WEBPACK FOOTER\n// ./ClientApp/app/search/seriesinformation.component.scss\n// module id = 292\n// module chunks = 2","exports = module.exports = require(\"../../../node_modules/css-loader/lib/css-base.js\")(false);\n// imports\n\n\n// module\nexports.push([module.id, \"#requestFloatingBtn{position:fixed;bottom:20px;right:30px;z-index:99;cursor:pointer;padding:15px;border-radius:10px}#requestFloatingBtn:hover{background-color:#555}\", \"\"]);\n\n// exports\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/css-loader?-url&minimize!./node_modules/sass-loader/lib/loader.js!./ClientApp/app/search/seriesinformation.component.scss\n// module id = 293\n// module chunks = 2","import { Component, Input, OnInit } from \"@angular/core\";\nimport { DomSanitizer } from \"@angular/platform-browser\";\nimport { Subject } from \"rxjs/Subject\";\n\nimport { AuthService } from \"../auth/auth.service\";\nimport { ImageService, NotificationService, RequestService, SearchService} from \"../services\";\n\nimport { TreeNode } from \"primeng/primeng\";\nimport { IRequestEngineResult } from \"../interfaces\";\nimport { IIssueCategory, ISearchTvResult } from \"../interfaces\";\n\n@Component({\n    selector: \"tv-search\",\n    template: require('./tvsearch.component.html'),\n    styles: [require('./../requests/tvrequests.component.scss')],\n})\nexport class TvSearchComponent implements OnInit {\n\n    public searchText: string;\n    public searchChanged = new Subject<string>();\n    public tvResults: TreeNode[];\n    public result: IRequestEngineResult;\n    public searchApplied = false;\n\n    @Input() public issueCategories: IIssueCategory[];\n    @Input() public issuesEnabled: boolean;\n    public issuesBarVisible = false;\n    public issueRequestTitle: string;\n    public issueRequestId: number;\n    public issueProviderId: string;\n    public issueCategorySelected: IIssueCategory;\n\n    constructor(private searchService: SearchService, private requestService: RequestService,\n                private notificationService: NotificationService, private authService: AuthService,\n                private imageService: ImageService, private sanitizer: DomSanitizer) {\n\n        this.searchChanged\n            .debounceTime(600) // Wait Xms after the last event before emitting last event\n            .distinctUntilChanged() // only emit if value is different from previous value\n            .subscribe(x => {\n                this.searchText = x as string;\n                if (this.searchText === \"\") {\n                    this.clearResults();\n                    return;\n                }\n                this.searchService.searchTvTreeNode(this.searchText)\n                    .subscribe(x => {\n                        this.tvResults = x;\n                        this.searchApplied = true;\n                        this.getExtraInfo();\n                    });\n            });\n    }\n    public openClosestTab(el: any) {\n        el.preventDefault();\n        const rowclass = \"undefined ng-star-inserted\";\n        el = el.toElement || el.relatedTarget || el.target;\n        while (el.className !== rowclass) {\n            // Increment the loop to the parent node until we find the row we need\n            el = el.parentNode;\n        }\n        // At this point, the while loop has stopped and `el` represents the element that has\n        // the class you specified\n\n        // Then we loop through the children to find the caret which we want to click\n        const caretright = \"fa-caret-right\";\n        const caretdown = \"fa-caret-down\";\n        for (const value of el.children) {\n            // the caret from the ui has 2 class selectors depending on if expanded or not\n            // we search for both since we want to still toggle the clicking\n            if (value.className.includes(caretright) || value.className.includes(caretdown)) {\n                // Then we tell JS to click the element even though we hid it from the UI\n                value.click();\n                //Break from loop since we no longer need to continue looking\n                break;\n            }\n        }\n    }\n\n    public ngOnInit() {\n        this.searchText = \"\";\n        this.tvResults = [];\n        this.result = {\n            message: \"\",\n            result: false,\n            errorMessage:\"\",\n        };\n    }\n\n    public search(text: any) {\n        this.searchChanged.next(text.target.value);\n    }\n\n    public popularShows() {\n        this.clearResults();\n        this.searchService.popularTv()\n            .subscribe(x => {\n                this.tvResults = x;\n                this.getExtraInfo();\n            });\n    }\n\n    public trendingShows() {\n        this.clearResults();\n        this.searchService.trendingTv()\n            .subscribe(x => {\n                this.tvResults = x;\n                this.getExtraInfo();\n            });\n    }\n\n    public mostWatchedShows() {\n        this.clearResults();\n        this.searchService.mostWatchedTv()\n            .subscribe(x => {\n                this.tvResults = x;\n                this.getExtraInfo();\n            });\n    }\n\n    public anticipatedShows() {\n        this.clearResults();\n        this.searchService.anticipatedTv()\n            .subscribe(x => {\n                this.tvResults = x;\n                this.getExtraInfo();\n            });\n    }\n\n    public getExtraInfo() {\n        this.tvResults.forEach((val, index) => {\n\n            this.imageService.getTvBanner(val.data.id).subscribe(x => {\n                \n                val.data.background = this.sanitizer.\n                bypassSecurityTrustStyle\n                (\"url(\" + x + \")\");\n            });\n            this.searchService.getShowInformationTreeNode(val.data.id)\n                .subscribe(x => {\n                    if (x.data) {\n                        this.updateItem(val, x);\n                    } else {\n                        const index = this.tvResults.indexOf(val, 0);\n                        if (index > -1) {\n                            this.tvResults.splice(index, 1);\n                        }\n                    }\n                });\n        });\n    }\n\n    public request(searchResult: ISearchTvResult) {\n        searchResult.requested = true;\n        if (this.authService.hasRole(\"admin\") || this.authService.hasRole(\"AutoApproveMovie\")) {\n            searchResult.approved = true;\n        }\n        this.requestService.requestTv(searchResult)\n            .subscribe(x => {\n                this.result = x;\n                if (this.result.result) {\n                    this.notificationService.success(\n                        `Request for ${searchResult.title} has been added successfully`);\n                } else {\n                    if (this.result.errorMessage && this.result.message) {\n                        this.notificationService.warning(\"Request Added\", `${this.result.message} - ${this.result.errorMessage}`);\n                    } else {\n                        this.notificationService.warning(\"Request Added\", this.result.message ? this.result.message : this.result.errorMessage);\n                    }\n                }\n            });\n    }\n\n    public allSeasons(searchResult: ISearchTvResult, event: any) {\n        event.preventDefault();\n        searchResult.requestAll = true;\n        this.request(searchResult);\n    }\n\n    public firstSeason(searchResult: ISearchTvResult, event: any) {\n        event.preventDefault();\n        searchResult.firstSeason = true;\n        this.request(searchResult);\n    }\n\n    public latestSeason(searchResult: ISearchTvResult, event: any) {\n        event.preventDefault();\n        searchResult.latestSeason = true;\n        this.request(searchResult);\n    }\n\n    public reportIssue(catId: IIssueCategory, req: ISearchTvResult) {\n        this.issueRequestId = req.id;\n        this.issueRequestTitle = req.title;\n        this.issueCategorySelected = catId;\n        this.issuesBarVisible = true;\n        this.issueProviderId = req.id.toString();\n    }\n\n    private updateItem(key: TreeNode, updated: TreeNode) {\n        const index = this.tvResults.indexOf(key, 0);\n        if (index > -1) {\n            // Update certain properties, otherwise we will loose some data\n            this.tvResults[index].data.banner = updated.data.banner;\n            this.tvResults[index].data.imdbId = updated.data.imdbId;\n            this.tvResults[index].data.seasonRequests = updated.data.seasonRequests;\n            this.tvResults[index].data.seriesId = updated.data.seriesId;\n            this.tvResults[index].data.fullyAvailable = updated.data.fullyAvailable;\n            this.tvResults[index].data.backdrop = updated.data.backdrop;\n        }\n    }\n\n    private clearResults() {\n        this.tvResults = [];\n        this.searchApplied = false;\n    }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./node_modules/angular2-template-loader!./node_modules/angular-router-loader/src!./ClientApp/app/search/tvsearch.component.ts","module.exports = \"<!-- Movie tab -->\\n<div role=\\\"tabpanel\\\" class=\\\"tab-pane\\\" id=\\\"TvShowTab\\\">\\n    <div class=\\\"input-group\\\">\\n        <input id=\\\"search\\\" type=\\\"text\\\" class=\\\"form-control form-control-custom form-control-search form-control-withbuttons\\\" (keyup)=\\\"search($event)\\\">\\n        <div class=\\\"input-group-addon right-radius\\\">\\n            <div class=\\\"btn-group\\\">\\n                <a href=\\\"#\\\" class=\\\"btn btn-sm btn-primary-outline dropdown-toggle\\\" data-toggle=\\\"dropdown\\\" aria-expanded=\\\"false\\\">\\n                    {{ 'Search.Suggestions' | translate }} \\n                    <i class=\\\"fa fa-chevron-down\\\"></i>\\n                </a>\\n                <ul class=\\\"dropdown-menu\\\">\\n                    <li>\\n                        <a (click)=\\\"popularShows()\\\">{{ 'Search.TvShows.Popular' | translate }} </a>\\n                    </li>\\n                    <li>\\n                        <a (click)=\\\"trendingShows()\\\">{{ 'Search.TvShows.Trending' | translate }}</a>\\n                    </li>\\n                    <li>\\n                        <a (click)=\\\"mostWatchedShows()\\\">{{ 'Search.TvShows.MostWatched' | translate }}</a>\\n                    </li>\\n                    <li>\\n                        <a (click)=\\\"anticipatedShows()\\\">{{ 'Search.TvShows.MostAnticipated' | translate }}</a>\\n                    </li>\\n                </ul>\\n            </div>\\n            <i id=\\\"tvSearchButton\\\" class=\\\"fa fa-search\\\"></i>\\n        </div>\\n    </div>\\n    <br />\\n    <br />\\n    <!-- Movie content -->\\n    <div id=\\\"actorMovieList\\\">\\n    </div>\\n\\n\\n    <br />\\n    <br />\\n    <!-- TV content -->\\n    <div id=\\\"tvList\\\">\\n\\n        <div *ngIf=\\\"searchApplied && tvResults?.length <= 0\\\" class='no-search-results'>\\n            <i class='fa fa-film no-search-results-icon'></i>\\n            <div class='no-search-results-text'>{{ 'Search.NoResults' | translate }}</div>\\n        </div>\\n        <p-treeTable [value]=\\\"tvResults\\\">\\n            <p-column>\\n                <ng-template let-col let-node=\\\"rowData\\\" pTemplate=\\\"header\\\">\\n                    {{ 'Search.TvShows.Results' | translate }}\\n                </ng-template>\\n                <ng-template let-col let-node=\\\"rowData\\\" pTemplate=\\\"body\\\">\\n                    <!--This is the section that holds the parent level search results set-->\\n                    <div *ngIf=\\\"!node.leaf\\\">\\n                        <div class=\\\"row\\\" >\\n                            \\n                <div class=\\\"myBg backdrop\\\" [style.background-image]=\\\"node?.data?.background\\\"></div>\\n                <div class=\\\"tint\\\" style=\\\"background-image: linear-gradient(to bottom, rgba(0,0,0,0.6) 0%,rgba(0,0,0,0.6) 100%);\\\"></div>\\n                            <div class=\\\"col-sm-2 small-padding\\\">\\n\\n                                <img *ngIf=\\\"node?.data?.banner\\\" class=\\\"img-responsive poster\\\" width=\\\"150\\\" [src]=\\\"node.data.banner\\\" alt=\\\"poster\\\">\\n\\n                            </div>\\n                            <div class=\\\"col-sm-8 small-padding\\\">\\n                                <div>\\n\\n                                    <a href=\\\"http://www.imdb.com/title/{{node.data.imdbId}}/\\\" target=\\\"_blank\\\">\\n                                        <h4>{{node.data.title}} ({{node.data.firstAired | date: 'yyyy'}})</h4>\\n\\n                                    </a>\\n                                    <span class=\\\"tags\\\">\\n                                            <a *ngIf=\\\"node.data.homepage\\\" id=\\\"homepageLabel\\\" href=\\\"{{node.data.homepage}}\\\" target=\\\"_blank\\\"><span class=\\\"label label-info\\\" >{{ 'Search.Movies.HomePage' | translate }}</span></a>\\n  \\n                                            <a *ngIf=\\\"node.data.trailer\\\"  id=\\\"trailerLabel\\\" href=\\\"{{node.data.trailer}}\\\" target=\\\"_blank\\\"><span class=\\\"label label-info\\\">{{ 'Search.Movies.Trailer' | translate }}</span></a>\\n\\n                                    <span *ngIf=\\\"node.data.status\\\" class=\\\"label label-primary\\\" id=\\\"statusLabel\\\" target=\\\"_blank\\\">{{node.data.status}}</span>\\n\\n\\n                                    <span *ngIf=\\\"node.data.firstAired\\\" class=\\\"label label-info\\\" target=\\\"_blank\\\" id=\\\"airDateLabel\\\">{{ 'Search.TvShows.AirDate' | translate }} {{node.data.firstAired | date: 'dd/MM/yyyy'}}</span>\\n\\n                                    <span *ngIf=\\\"node.data.network\\\" class=\\\"label label-info\\\" id=\\\"networkLabel\\\" target=\\\"_blank\\\">{{node.data.network}}</span>\\n\\n                    \\n                                        <span *ngIf=\\\"node.data.available\\\" class=\\\"label label-success\\\" id=\\\"availableLabel\\\">{{ 'Common.Available' | translate }}</span>\\n                                    \\n                                        <span *ngIf=\\\"node.data.partlyAvailable\\\" class=\\\"label label-warning\\\" id=\\\"partiallyAvailableLabel\\\">{{ 'Common.PartlyAvailable' | translate }}</span>\\n                                   \\n\\n                                 \\n                                </span>\\n\\n                                    <br />\\n                                    <br />\\n                                </div>\\n                                <p class=\\\"tv-overview\\\">{{node.data.overview}}</p>\\n                            </div>\\n\\n\\n                            <div class=\\\"col-sm-2 small-padding\\\">\\n                                <div *ngIf=\\\"!node.data.fullyAvailable\\\" class=\\\"dropdown\\\">\\n                                    <button class=\\\"btn btn-primary-outline dropdown-toggle\\\" type=\\\"button\\\" data-toggle=\\\"dropdown\\\" aria-haspopup=\\\"true\\\" aria-expanded=\\\"true\\\">\\n                                        <i class=\\\"fa fa-plus\\\"></i> {{ 'Common.Request' | translate }}\\n                                        <span class=\\\"caret\\\"></span>\\n                                    </button>\\n                                    <ul class=\\\"dropdown-menu\\\" aria-labelledby=\\\"dropdownMenu1\\\">\\n                                        <li>\\n                                            <a href=\\\"#\\\" (click)=\\\"allSeasons(node.data, $event)\\\">{{ 'Search.TvShows.AllSeasons' | translate }}</a>\\n                                        </li>\\n                                        <li>\\n                                            <a href=\\\"#\\\" (click)=\\\"firstSeason(node.data, $event)\\\">{{ 'Search.TvShows.FirstSeason' | translate }}</a>\\n                                        </li>\\n                                        <li>\\n                                            <a href=\\\"#\\\" (click)=\\\"latestSeason(node.data, $event)\\\">{{ 'Search.TvShows.LatestSeason' | translate }}</a>\\n                                        </li>\\n                                        <li>\\n                                            <a href=\\\"#\\\" (click)=\\\"openClosestTab($event)\\\">{{ 'Search.TvShows.Select' | translate }}</a>\\n                                        </li>\\n                                    </ul>\\n                                </div>\\n\\n                                <div *ngIf=\\\"node.data.fullyAvailable\\\">\\n                                    <button style=\\\"text-align: right\\\" class=\\\"btn btn-success-outline disabled\\\" disabled>\\n                                        <i class=\\\"fa fa-check\\\"></i> {{ 'Common.Available' | translate }}</button>\\n                                </div>\\n                                <br />\\n                                <div *ngIf=\\\"node.data.plexUrl && node.data.available\\\">\\n                                    <a  style=\\\"text-align: right\\\" class=\\\"btn btn-sm btn-success-outline\\\" href=\\\"{{node.data.plexUrl}}\\\"\\n                                        target=\\\"_blank\\\">\\n                                        <i class=\\\"fa fa-eye\\\"></i> {{ 'Search.ViewOnPlex' | translate }}</a>\\n  </div>\\n                                <div class=\\\"dropdown\\\" *ngIf=\\\"issueCategories && issuesEnabled\\\">\\n                                    <button class=\\\"btn btn-sm btn-primary-outline dropdown-toggle\\\" type=\\\"button\\\" data-toggle=\\\"dropdown\\\" aria-haspopup=\\\"true\\\"\\n                                        aria-expanded=\\\"true\\\">\\n                                        <i class=\\\"fa fa-plus\\\"></i> {{ 'Requests.ReportIssue' | translate }}\\n                                        <span class=\\\"caret\\\"></span>\\n                                    </button>\\n                                    <ul class=\\\"dropdown-menu\\\" aria-labelledby=\\\"dropdownMenu1\\\">\\n                                        <li *ngFor=\\\"let cat of issueCategories\\\">\\n                                            <a [routerLink]=\\\"\\\" (click)=\\\"reportIssue(cat, node.data)\\\">{{cat.value}}</a>\\n                                        </li>\\n                                    </ul>\\n                                </div>\\n                                <div *ngIf=\\\"!node.data.available\\\">\\n                                    <br/>\\n                                    <br/>\\n                                </div>\\n\\n                            </div>\\n\\n                        </div>\\n                    </div>\\n                    <!--This is the section that holds the child seasons if they want to specify specific episodes-->\\n                    <div *ngIf=\\\"node.leaf\\\">\\n                        <seriesinformation [seriesId]=\\\"node.data.id\\\"></seriesinformation>\\n                    </div>\\n\\n                    <br/>\\n                    <br/>\\n                </ng-template>\\n            </p-column>\\n        </p-treeTable>\\n    </div>\\n</div>\\n\\n\\n<issue-report [movie]=\\\"false\\\" [visible]=\\\"issuesBarVisible\\\" (visibleChange)=\\\"issuesBarVisible = $event;\\\" [title]=\\\"issueRequestTitle\\\"\\n    [issueCategory]=\\\"issueCategorySelected\\\" [id]=\\\"issueRequestId\\\" [providerId]=\\\"issueProviderId\\\"></issue-report>\";\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./ClientApp/app/search/tvsearch.component.html\n// module id = 295\n// module chunks = 2"],"sourceRoot":""}