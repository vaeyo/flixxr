webpackJsonp([0],Array(167).concat([function(e,t,n){"use strict";var o=this&&this.__decorate||function(e,t,n,o){var i,r=arguments.length,s=r<3?t:null===o?o=Object.getOwnPropertyDescriptor(t,n):o;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)s=Reflect.decorate(e,t,n,o);else for(var a=e.length-1;a>=0;a--)(i=e[a])&&(s=(r<3?i(s):r>3?i(t,n,s):i(t,n))||s);return r>3&&s&&Object.defineProperty(t,n,s),s};Object.defineProperty(t,"__esModule",{value:!0});var i=n(2),r=n(0),s=n(7),a=n(10),l=n(92),c=n(196),d=n(93),u=n(15),f=n(3),m=n(182),p=n(197),v=n(199),b=n(201),h=n(203),g=n(205),y=n(207),S=n(209),k=n(211),P=n(213),C=n(215),w=n(217),x=n(219),T=n(221),N=n(223),R=n(225),A=n(227),I=n(229),q=n(231),O=n(233),E=n(235),j=n(237),U=n(239),_=n(241),M=n(243),L=n(245),D=n(247),F=n(249),K=n(89),V=[{path:"Ombi",component:O.OmbiComponent,canActivate:[d.AuthGuard]},{path:"About",component:p.AboutComponent,canActivate:[d.AuthGuard]},{path:"Plex",component:E.PlexComponent,canActivate:[d.AuthGuard]},{path:"Emby",component:y.EmbyComponent,canActivate:[d.AuthGuard]},{path:"Sonarr",component:_.SonarrComponent,canActivate:[d.AuthGuard]},{path:"Radarr",component:j.RadarrComponent,canActivate:[d.AuthGuard]},{path:"LandingPage",component:P.LandingPageComponent,canActivate:[d.AuthGuard]},{path:"Customization",component:h.CustomizationComponent,canActivate:[d.AuthGuard]},{path:"Email",component:w.EmailNotificationComponent,canActivate:[d.AuthGuard]},{path:"Discord",component:C.DiscordComponent,canActivate:[d.AuthGuard]},{path:"Slack",component:I.SlackComponent,canActivate:[d.AuthGuard]},{path:"Pushover",component:A.PushoverComponent,canActivate:[d.AuthGuard]},{path:"Pushbullet",component:R.PushbulletComponent,canActivate:[d.AuthGuard]},{path:"Mattermost",component:x.MattermostComponent,canActivate:[d.AuthGuard]},{path:"UserManagement",component:L.UserManagementComponent,canActivate:[d.AuthGuard]},{path:"Update",component:M.UpdateComponent,canActivate:[d.AuthGuard]},{path:"CouchPotato",component:b.CouchPotatoComponent,canActivate:[d.AuthGuard]},{path:"DogNzb",component:g.DogNzbComponent,canActivate:[d.AuthGuard]},{path:"Telegram",component:q.TelegramComponent,canActivate:[d.AuthGuard]},{path:"Jobs",component:k.JobsComponent,canActivate:[d.AuthGuard]},{path:"SickRage",component:U.SickRageComponent,canActivate:[d.AuthGuard]},{path:"Issues",component:S.IssuesComponent,canActivate:[d.AuthGuard]},{path:"Authentication",component:v.AuthenticationComponent,canActivate:[d.AuthGuard]},{path:"Mobile",component:T.MobileComponent,canActivate:[d.AuthGuard]}],B=function(){function e(){}return e=o([r.NgModule({imports:[i.CommonModule,s.FormsModule,s.ReactiveFormsModule,a.RouterModule.forChild(V),K.MenuModule,K.InputSwitchModule,K.InputTextModule,l.NgbModule,K.TooltipModule,l.NgbAccordionModule,K.AutoCompleteModule,K.CalendarModule,c.ClipboardModule,m.PipeModule,K.RadioButtonModule],declarations:[F.SettingsMenuComponent,O.OmbiComponent,E.PlexComponent,y.EmbyComponent,k.JobsComponent,P.LandingPageComponent,h.CustomizationComponent,C.DiscordComponent,_.SonarrComponent,I.SlackComponent,j.RadarrComponent,w.EmailNotificationComponent,N.NotificationTemplate,A.PushoverComponent,x.MattermostComponent,R.PushbulletComponent,L.UserManagementComponent,M.UpdateComponent,p.AboutComponent,D.WikiComponent,b.CouchPotatoComponent,g.DogNzbComponent,U.SickRageComponent,q.TelegramComponent,S.IssuesComponent,v.AuthenticationComponent,T.MobileComponent],exports:[a.RouterModule],providers:[f.SonarrService,u.AuthService,f.RadarrService,d.AuthGuard,f.ValidationService,f.TesterService,f.JobService,f.CouchPotatoService,f.IssuesService,f.PlexService,f.EmbyService,f.MobileService]})],e)}();t.SettingsModule=B},,,,,function(e,t,n){"use strict";function o(e){for(var n in e)t.hasOwnProperty(n)||(t[n]=e[n])}Object.defineProperty(t,"__esModule",{value:!0}),o(n(173)),o(n(174)),o(n(175)),o(n(176))},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),function(e){e[e.Email=0]="Email",e[e.Discord=1]="Discord",e[e.Pushbullet=2]="Pushbullet",e[e.Pushover=3]="Pushover",e[e.Telegram=4]="Telegram"}(t.NotificationAgent||(t.NotificationAgent={})),function(e){e[e.NewRequest=0]="NewRequest",e[e.Issue=1]="Issue",e[e.RequestAvailable=2]="RequestAvailable",e[e.RequestApproved=3]="RequestApproved",e[e.AdminNote=4]="AdminNote",e[e.Test=5]="Test",e[e.RequestDeclined=6]="RequestDeclined",e[e.ItemAddedToFaultQueue=7]="ItemAddedToFaultQueue",e[e.WelcomeEmail=8]="WelcomeEmail",e[e.IssueResolved=9]="IssueResolved"}(t.NotificationType||(t.NotificationType={}))},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),function(e){e[e.movie=1]="movie",e[e.tvShow=2]="tvShow"}(t.RequestType||(t.RequestType={})),function(e){e[e.None=0]="None",e[e.Available=1]="Available",e[e.NotAvailable=2]="NotAvailable",e[e.Approved=3]="Approved",e[e.Processing=4]="Processing",e[e.PendingApproval=5]="PendingApproval"}(t.FilterType||(t.FilterType={}))},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),function(e){e[e.LocalUser=1]="LocalUser",e[e.PlexUser=2]="PlexUser",e[e.EmbyUser=3]="EmbyUser"}(t.UserType||(t.UserType={}))},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),function(e){e[e.Pending=0]="Pending",e[e.InProgress=1]="InProgress",e[e.Resolved=2]="Resolved"}(t.IssueStatus||(t.IssueStatus={}))},,,,,,function(e,t,n){"use strict";var o=this&&this.__decorate||function(e,t,n,o){var i,r=arguments.length,s=r<3?t:null===o?o=Object.getOwnPropertyDescriptor(t,n):o;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)s=Reflect.decorate(e,t,n,o);else for(var a=e.length-1;a>=0;a--)(i=e[a])&&(s=(r<3?i(s):r>3?i(t,n,s):i(t,n))||s);return r>3&&s&&Object.defineProperty(t,n,s),s};Object.defineProperty(t,"__esModule",{value:!0});var i=n(0),r=n(183),s=function(){function e(){}return t=e,e.forRoot=function(){return{ngModule:t,providers:[]}},e=t=o([i.NgModule({imports:[],declarations:[r.HumanizePipe],exports:[r.HumanizePipe]})],e);var t}();t.PipeModule=s},function(e,t,n){"use strict";var o=this&&this.__decorate||function(e,t,n,o){var i,r=arguments.length,s=r<3?t:null===o?o=Object.getOwnPropertyDescriptor(t,n):o;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)s=Reflect.decorate(e,t,n,o);else for(var a=e.length-1;a>=0;a--)(i=e[a])&&(s=(r<3?i(s):r>3?i(t,n,s):i(t,n))||s);return r>3&&s&&Object.defineProperty(t,n,s),s};Object.defineProperty(t,"__esModule",{value:!0});var i=n(0),r=function(){function e(){}return e.prototype.transform=function(e){return"string"!=typeof e?e:e=(e=e.split(/(?=[A-Z])/).join(" "))[0].toUpperCase()+e.slice(1)},e=o([i.Pipe({name:"humanize"})],e)}();t.HumanizePipe=r},,function(e,t,n){e.exports=n(1)(920)},,,,,,,,,,,function(e,t,n){e.exports=n(1)(967)},function(e,t,n){"use strict";var o=this&&this.__decorate||function(e,t,n,o){var i,r=arguments.length,s=r<3?t:null===o?o=Object.getOwnPropertyDescriptor(t,n):o;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)s=Reflect.decorate(e,t,n,o);else for(var a=e.length-1;a>=0;a--)(i=e[a])&&(s=(r<3?i(s):r>3?i(t,n,s):i(t,n))||s);return r>3&&s&&Object.defineProperty(t,n,s),s},i=this&&this.__metadata||function(e,t){if("object"==typeof Reflect&&"function"==typeof Reflect.metadata)return Reflect.metadata(e,t)};Object.defineProperty(t,"__esModule",{value:!0});var r=n(0),s=n(3),a=function(){function e(e,t){this.settingsService=e,this.jobService=t}return e.prototype.ngOnInit=function(){var e=this;this.settingsService.about().subscribe(function(t){return e.about=t}),this.jobService.getCachedUpdate().subscribe(function(t){!0===t&&(e.newUpdate=!0)})},e=o([r.Component({template:n(198)}),i("design:paramtypes",[s.SettingsService,s.JobService])],e)}();t.AboutComponent=a},function(e,t){e.exports='\n<settings-menu></settings-menu>\n<div *ngIf="about">\n    <fieldset>\n        <legend>About</legend>\n        <form>\n            <div class="col-md-8">\n                <table class="table table-striped table-hover table-responsive table-condensed">\n                    <thead>\n                    </thead>\n                    <tbody>\n                        <tr>\n                            <td>\n                                <span>Version</span>\n                            </td>\n                            <td>\n                                <span>{{about.version}} <a [routerLink]="[\'/Settings/Update\']" *ngIf="newUpdate" style="color:#df691a"><b>(New Update Available)</b></a></span>\n                            </td>\n                        </tr>\n                        <tr>\n                            <td>\n                                <span>Branch</span>\n                            </td>\n                            <td>\n                                <span>{{about.branch}}</span>\n                            </td>\n                        </tr>\n                        <tr>\n                            <td>\n                                <span>Github</span>\n                            </td>\n                            <td>\n                                <a href="https://github.com/tidusjar/Ombi" target="_blank">https://github.com/tidusjar/Ombi</a>\n                            </td>\n                        </tr>\n                        <tr>\n                            <td>\n                                <span>Discord</span>\n                            </td>\n                            <td>\n                                <a href="https://discord.gg/KxYZ64w" target="_blank">https://discord.gg/KxYZ64w</a>\n                            </td>\n                        </tr>\n\n                        <tr>\n                            <td>\n                                <span>Reddit</span>\n                            </td>\n                            <td>\n                                <a href="https://www.reddit.com/r/Ombi/" target="_blank">https://www.reddit.com/r/Ombi/</a>\n                            </td>\n                        </tr>\n                        <tr>\n                            <td>\n                                <span>OS Architecture</span>\n                            </td>\n                            <td>\n                                <span>{{about.osArchitecture}}</span>\n                            </td>\n                        </tr>\n                        <tr>\n                            <td>\n                                <span>OS Description</span>\n                            </td>\n                            <td>\n                                <span>{{about.osDescription}}</span>\n                            </td>\n                        </tr>\n                        <tr>\n                            <td>\n                                <span>Process Architecture</span>\n                            </td>\n                            <td>\n                                <span>{{about.processArchitecture}}</span>\n                            </td>\n                        </tr>\n                        <tr>\n                            <td>\n                                <span>Application Base Path</span>\n                            </td>\n                            <td>\n                                <span>{{about.applicationBasePath}}</span>\n                            </td>\n                        </tr>\n                    </tbody>\n                </table>\n            </div>\n        </form>\n    </fieldset>\n</div>\n'},function(e,t,n){"use strict";var o=this&&this.__decorate||function(e,t,n,o){var i,r=arguments.length,s=r<3?t:null===o?o=Object.getOwnPropertyDescriptor(t,n):o;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)s=Reflect.decorate(e,t,n,o);else for(var a=e.length-1;a>=0;a--)(i=e[a])&&(s=(r<3?i(s):r>3?i(t,n,s):i(t,n))||s);return r>3&&s&&Object.defineProperty(t,n,s),s},i=this&&this.__metadata||function(e,t){if("object"==typeof Reflect&&"function"==typeof Reflect.metadata)return Reflect.metadata(e,t)};Object.defineProperty(t,"__esModule",{value:!0});var r=n(0),s=n(7),a=n(3),l=n(3),c=function(){function e(e,t,n){this.settingsService=e,this.notificationService=t,this.fb=n}return e.prototype.ngOnInit=function(){var e=this;this.settingsService.getAuthentication().subscribe(function(t){e.form=e.fb.group({allowNoPassword:[t.allowNoPassword],requiredDigit:[t.requiredDigit],requiredLength:[t.requiredLength],requiredLowercase:[t.requiredLowercase],requireNonAlphanumeric:[t.requireNonAlphanumeric],requireUppercase:[t.requireUppercase]})})},e.prototype.onSubmit=function(e){var t=this;e.invalid?this.notificationService.error("Please check your entered values"):this.settingsService.saveAuthentication(e.value).subscribe(function(e){e?t.notificationService.success("Successfully saved Authentication settings"):t.notificationService.success("There was an error when saving the Authentication settings")})},e=o([r.Component({template:n(200)}),i("design:paramtypes",[l.SettingsService,a.NotificationService,s.FormBuilder])],e)}();t.AuthenticationComponent=c},function(e,t){e.exports='<settings-menu></settings-menu>\n\n<wiki [url]="\'https://github.com/tidusjar/Ombi/wiki/Authentication-Settings\'"></wiki>\n<fieldset *ngIf="form">\n    <legend>Authentication</legend>\n    <form novalidate [formGroup]="form" (ngSubmit)="onSubmit(form)">\n\n        <div class="col-md-6">\n\n            <div class="form-group">\n                <div class="checkbox">\n                    <input type="checkbox" id="allowNoPassword" name="allowNoPassword" formControlName="allowNoPassword">\n                    <label for="allowNoPassword" tooltipPosition="top" pTooltip="Allow users to login with out a password">Allow users to login without a password</label>\n                </div>\n            </div>\n\n            \x3c!-- <hr/>\n            <div class="form-group">\n                <div class="checkbox">\n                    <input type="checkbox" id="requiredDigit" name="requiredDigit" formControlName="requiredDigit">\n                    <label for="requiredDigit">Require a digit in the password</label>\n                </div>\n            </div>\n\n            <div class="form-group">\n                <label for="requiredLength" class="control-label">Required password length</label>\n                <div>\n                    <input type="text" class="form-control form-control-custom " id="requiredLength" name="requiredLength" formControlName="requiredLength">\n                </div>\n            </div>\n\n            <div class="form-group">\n                <div class="checkbox">\n                    <input type="checkbox" id="requiredLowercase" name="requiredLowercase" formControlName="requiredLowercase">\n                    <label for="requiredLowercase">Require a lowercase character in the password</label>\n                </div>\n            </div>\n\n            <div class="form-group">\n                <div class="checkbox">\n                    <input type="checkbox" id="requireNonAlphanumeric" name="requireNonAlphanumeric" formControlName="requireNonAlphanumeric">\n                    <label for="requireNonAlphanumeric">Require a NonAlphanumeric character in the password</label>\n                </div>\n            </div>\n            \n            <div class="form-group">\n                <div class="checkbox">\n                    <input type="checkbox" id="requireUppercase" name="requireUppercase" formControlName="requireUppercase">\n                    <label for="requireUppercase">Require a uppercase character in the password</label>\n                </div>\n            </div> --\x3e\n\n            <div class="form-group">\n                <div>\n                    <button [disabled]="form.invalid" type="submit" id="save" class="btn btn-primary-outline">Submit</button>\n                </div>\n            </div>\n        </div>\n    </form>\n</fieldset>'},function(e,t,n){"use strict";var o=this&&this.__decorate||function(e,t,n,o){var i,r=arguments.length,s=r<3?t:null===o?o=Object.getOwnPropertyDescriptor(t,n):o;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)s=Reflect.decorate(e,t,n,o);else for(var a=e.length-1;a>=0;a--)(i=e[a])&&(s=(r<3?i(s):r>3?i(t,n,s):i(t,n))||s);return r>3&&s&&Object.defineProperty(t,n,s),s},i=this&&this.__metadata||function(e,t){if("object"==typeof Reflect&&"function"==typeof Reflect.metadata)return Reflect.metadata(e,t)};Object.defineProperty(t,"__esModule",{value:!0});var r=n(0),s=n(7),a=n(3),l=function(){function e(e,t,n,o,i){this.settingsService=e,this.fb=t,this.notificationService=n,this.couchPotatoService=o,this.testerService=i}return e.prototype.ngOnInit=function(){var e=this;this.settingsService.getCouchPotatoSettings().subscribe(function(t){e.form=e.fb.group({enabled:[t.enabled],username:[t.username],password:[t.password],apiKey:[t.apiKey,s.Validators.required],ip:[t.ip,s.Validators.required],port:[t.port,s.Validators.required],ssl:[t.ssl],subDir:[t.subDir],defaultProfileId:[t.defaultProfileId]}),t.defaultProfileId&&e.getProfiles(e.form)})},e.prototype.getProfiles=function(e){var t=this;this.profilesRunning=!0,this.couchPotatoService.getProfiles(e.value).subscribe(function(e){t.profiles=e,t.profilesRunning=!1})},e.prototype.onSubmit=function(e){var t=this;if(e.invalid)this.notificationService.error("Please check your entered values");else{var n=e.value;this.settingsService.saveCouchPotatoSettings(n).subscribe(function(e){e?t.notificationService.success("Successfully saved the CouchPotato settings"):t.notificationService.success("There was an error when saving the CouchPotato settings")})}},e.prototype.test=function(e){var t=this;if(e.invalid)this.notificationService.error("Please check your entered values");else{var n=e.value;this.testerService.couchPotatoTest(n).subscribe(function(e){!0===e?t.notificationService.success("Successfully connected to CouchPotato!"):t.notificationService.error("We could not connect to CouchPotato!")})}},e.prototype.requestToken=function(e){var t=this;this.couchPotatoService.getApiKey(e.value).subscribe(function(e){!0===e.success?(t.form.controls.apiKey.setValue(e.api_key),t.notificationService.success("Successfully grabbed the Api Key")):t.notificationService.error("Could not get the Api Key")})},e=o([r.Component({template:n(202)}),i("design:paramtypes",[a.SettingsService,s.FormBuilder,a.NotificationService,a.CouchPotatoService,a.TesterService])],e)}();t.CouchPotatoComponent=l},function(e,t){e.exports='<settings-menu>\n</settings-menu>\n<div *ngIf="form">\n    <fieldset>\n        <legend>CouchPotato Settings</legend>\n        <form novalidate [formGroup]="form" (ngSubmit)="onSubmit(form)" style="padding-top:5%;">\n            <div class="col-md-6">\n                <div class="form-group">\n                    <div class="checkbox">\n                        <input type="checkbox" id="enable" formControlName="enabled" ng-checked="form.enabled">\n                        <label for="enable">Enable</label>\n                    </div>\n                </div>\n\n\n                <div class="form-group">\n                    <label for="Ip" class="control-label">Hostname or IP</label>\n                    <div class="">\n                        <input type="text" class="form-control form-control-custom" [ngClass]="{\'form-error\': form.get(\'ip\').hasError(\'required\')}"\n                            id="Ip" name="Ip" placeholder="localhost" formControlName="ip">\n                        <small *ngIf="form.get(\'ip\').hasError(\'required\')" class="error-text">The IP/Hostname is required</small>\n                    </div>\n                </div>\n\n                <div class="form-group">\n                    <label for="portNumber" class="control-label">Port</label>\n                    <input type="text" class="form-control form-control-custom" [ngClass]="{\'form-error\': form.get(\'port\').hasError(\'required\')}" formControlName="port" id="portNumber" name="Port" placeholder="Port Number">\n\n                    <small *ngIf="form.get(\'port\').hasError(\'required\')" class="error-text">The Port is required</small>\n                </div>\n\n\n                <div class="form-group">\n                    <label for="ApiKey" class="control-label">API Key</label>\n                 \n                        <input type="text" class="form-control form-control-custom" [ngClass]="{\'form-error\': form.get(\'apiKey\').hasError(\'required\')}" id="ApiKey" name="ApiKey" formControlName="apiKey">\n\n                        <small *ngIf="form.get(\'apiKey\').hasError(\'required\')" class="error-text">The API Key is required</small>\n                </div>\n                <div class="form-group">\n                    <div class="checkbox">\n\n                        <input type="checkbox" id="Ssl" name="Ssl" formControlName="ssl"><label for="Ssl">SSL</label>\n\n                    </div>\n                </div>\n                <div class="form-group">\n                    <label for="SubDir" class="control-label">Base Url</label>\n                    <div>\n                        <input type="text" class="form-control form-control-custom" formControlName="subDir" id="SubDir" name="SubDir">\n                    </div>\n                </div>\n            </div>\n            <div class="col-md-6">\n                <div class="form-group">\n                    <label for="username" class="control-label">Username</label>\n                    <input type="text" class="form-control form-control-custom " formControlName="username" name="username">\n                </div>\n                <div class="form-group">\n                    <label for="password" class="control-label">Password</label>\n                    <input type="password" class="form-control form-control-custom " formControlName="password" name="password">\n                </div>\n                <div class="form-group">\n                    <button type="button" class="btn btn-primary-outline" (click)="requestToken(form)">Request Api Key <i class="fa fa-key"></i></button>\n                </div>\n\n\n                <div class="form-group">\n                    <div>\n                        <button type="submit" (click)="getProfiles(form)" class="btn btn-primary-outline">Get Quality Profiles <span *ngIf="profilesRunning" class="fa fa-spinner fa-spin"> </span></button>\n                    </div>\n                </div>\n                <div class="form-group">\n                    <label for="select" class="control-label">Quality Profiles</label>\n                    <div id="profiles">\n                        <select formControlName="defaultProfileId" class="form-control form-control-custom" id="select">\n                            <option *ngFor="let profile of profiles?.list" value="{{profile._id}}">{{profile.label}}</option>\n                        </select>\n                    </div>\n                </div>\n\n\n\n\n                <div class="form-group">\n                    <div>\n                        <button [disabled]="form.invalid" (click)="test(form)" class="btn btn-primary-outline">Test Connectivity <span id="spinner"></span></button>\n                    </div>\n                </div>\n\n\n                <div class="form-group">\n                    <div>\n                        <button type="submit" [disabled]="form.invalid" class="btn btn-primary-outline ">Submit</button>\n                    </div>\n                </div>\n            </div>\n        </form>\n    </fieldset>\n</div>'},function(e,t,n){"use strict";var o=this&&this.__decorate||function(e,t,n,o){var i,r=arguments.length,s=r<3?t:null===o?o=Object.getOwnPropertyDescriptor(t,n):o;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)s=Reflect.decorate(e,t,n,o);else for(var a=e.length-1;a>=0;a--)(i=e[a])&&(s=(r<3?i(s):r>3?i(t,n,s):i(t,n))||s);return r>3&&s&&Object.defineProperty(t,n,s),s},i=this&&this.__metadata||function(e,t){if("object"==typeof Reflect&&"function"==typeof Reflect.metadata)return Reflect.metadata(e,t)};Object.defineProperty(t,"__esModule",{value:!0});var r=n(0),s=n(3),a=n(3),l=function(){function e(e,t){this.settingsService=e,this.notificationService=t}return e.prototype.ngOnInit=function(){var e=this;this.settingsService.getCustomization().subscribe(function(t){e.settings=t,e.settingsService.getThemes().subscribe(function(n){e.themes=n;var o=e.themes.filter(function(t){return t.fullName===e.settings.presetThemeName})[0];if(o){var i=e.themes.indexOf(o,0);i>-1&&e.themes.splice(i,1)}t.hasPresetTheme?(e.themes.unshift({displayName:t.presetThemeDisplayName,fullName:t.presetThemeName,url:o.url,version:t.presetThemeVersion}),e.themes.unshift({displayName:"None",fullName:"None",url:"",version:""})):e.themes.unshift({displayName:"Please Select",fullName:"-1",url:"-1",version:""})})})},e.prototype.save=function(){var e=this;this.settingsService.saveCustomization(this.settings).subscribe(function(t){t?e.notificationService.success("Successfully saved Ombi settings"):e.notificationService.success("There was an error when saving the Ombi settings")})},e.prototype.dropDownChange=function(e){var t=this,n=e.target.value,o=this.themes.filter(function(e){return e.fullName===n})[0];if(o.fullName!==this.settings.presetThemeName){if("None"===o.fullName||"-1"===o.fullName)return this.settings.presetThemeName="",void(this.settings.presetThemeContent="");this.settings.presetThemeName=n,this.settingsService.getThemeContent(o.url).subscribe(function(e){t.settings.presetThemeContent=e})}},e=o([r.Component({template:n(204)}),i("design:paramtypes",[a.SettingsService,s.NotificationService])],e)}();t.CustomizationComponent=l},function(e,t){e.exports='<settings-menu></settings-menu>\n<wiki [url]="\'https://github.com/tidusjar/Ombi/wiki/Customization-Settings\'"></wiki>\n\n<fieldset *ngIf="settings">\n    <legend>Customization</legend>\n    <div class="col-md-5">\n        <div class="form-group">\n            <label for="applicationName" class="control-label">Application Name</label>\n            <div>\n                <input type="text" [(ngModel)]="settings.applicationName" class="form-control form-control-custom " id="applicationName"\n                    name="applicationName" placeholder="Ombi" value="{{settings.applicationName}}">\n            </div>\n        </div>\n\n        <div class="form-group">\n            <label for="applicationurl" class="control-label">Application URL</label>\n            <div>\n                <input type="text" [(ngModel)]="settings.applicationUrl" class="form-control form-control-custom " id="applicationurl" name="applicationurl"\n                    placeholder="http://ombi.io/" value="{{settings.applicationUrl}}">\n            </div>\n        </div>\n\n        <div class="form-group">\n            <label for="logo" class="control-label">Custom Logo</label>\n            <div>\n                <input type="text" [(ngModel)]="settings.logo" class="form-control form-control-custom " id="logo" name="logo" value="{{settings.logo}}"\n                    tooltipPosition="top" pTooltip="Use a URL e.g. www.google.com/logo.png">\n            </div>\n        </div>\n        <div *ngIf="settings.logo" class="form-group">\n            <label for="logo" class="control-label">Logo Preview:</label>\n            <div>\n                <img [src]="settings.logo" style="width: 300px" />\n            </div>\n        </div>\n\n\n        <div class="form-group">\n            <label for="customLink" class="control-label">Custom CSS Link</label>\n            <div>\n                <input type="text" [(ngModel)]="settings.customCssLink" class="form-control form-control-custom " name="customLink" value="{{settings.customCssLink}}"\n                    tooltipPosition="top" pTooltip="A link to a CSS file, you can use this to use your own styles for Ombi">\n            </div>\n        </div>\n\n        <div class="form-group">\n            <div class="checkbox">\n                <input type="checkbox" id="enableCustomDonations" name="enableCustomDonations" [(ngModel)]="settings.enableCustomDonations">\n                <label for="enableCustomDonations" tooltipPosition="top" pTooltip="Enable to show a custom donation link in the navigation bar">Enable custom donation link</label>\n            </div>\n        </div>\n\n        <div class="form-group">\n            <label for="customDonation" class="control-label">Custom Donation URL</label>\n            <div>\n                <input [disabled]="!settings.enableCustomDonations" type="text" [(ngModel)]="settings.customDonationUrl" class="form-control form-control-custom " name="customDonation" value="{{settings.customDonationUrl}}"\n                    tooltipPosition="top" pTooltip="A link to a Paypal address, or your custom donation url.">\n            </div>\n        </div>\n\n        <div class="form-group">\n            <label for="customDonationMessage" class="control-label">Donation Button Message</label>\n            <div>\n                <input [disabled]="!settings.enableCustomDonations" type="text" [(ngModel)]="settings.customDonationMessage" class="form-control form-control-custom " name="customDonationMessage" value="{{settings.customDonationMessage}}"\n                    tooltipPosition="top" pTooltip="Set a custom message to be displayed in the navigation bar.">\n            </div>\n        </div>\n\n\n\n        <div class="form-group">\n            <div>\n                <button (click)="save()" type="submit" id="save" class="btn btn-primary-outline">Submit</button>\n            </div>\n        </div>\n\n    </div>\n    <div class="col-md-7">\n        <div *ngIf="themes">\n            <div class="form-group">\n                <label for="presetTheme" class="control-label">Preset Themes</label>\n                <div id="presetTheme">\n                    <select class="form-control form-control-custom" (change)="dropDownChange($event)">\n                        <option *ngFor="let theme of themes" value="{{theme.fullName}}" [selected]="settings.presetThemeName === theme.fullName">{{theme.displayName}} {{theme.version}}</option>\n                    </select>\n                </div>\n            </div>\n            <div class="form-group" *ngIf="settings.presetThemeContent">\n                <textarea rows="25" type="text" class="form-control-custom form-control " id="themeContent" name="themeContent" [(ngModel)]="settings.presetThemeContent"> {{settings.presetThemeContent}} </textarea>\n            </div>\n            <small>Preset themes are powered by\n                <a href="https://github.com/leram84/layer.Cake" target="_blank">layer#Cake</a>.\n            </small>\n        </div>\n    </div>\n\n\n\n\n</fieldset>'},function(e,t,n){"use strict";var o=this&&this.__decorate||function(e,t,n,o){var i,r=arguments.length,s=r<3?t:null===o?o=Object.getOwnPropertyDescriptor(t,n):o;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)s=Reflect.decorate(e,t,n,o);else for(var a=e.length-1;a>=0;a--)(i=e[a])&&(s=(r<3?i(s):r>3?i(t,n,s):i(t,n))||s);return r>3&&s&&Object.defineProperty(t,n,s),s},i=this&&this.__metadata||function(e,t){if("object"==typeof Reflect&&"function"==typeof Reflect.metadata)return Reflect.metadata(e,t)};Object.defineProperty(t,"__esModule",{value:!0});var r=n(0),s=n(7),a=n(3),l=function(){function e(e,t,n){this.settingsService=e,this.fb=t,this.notificationService=n}return e.prototype.ngOnInit=function(){var e=this;this.settingsService.getDogNzbSettings().subscribe(function(t){e.form=e.fb.group({enabled:[t.enabled],apiKey:[t.apiKey,s.Validators.required],movies:[t.movies],tvShows:[t.tvShows]})})},e.prototype.onSubmit=function(e){var t=this;if(e.invalid)this.notificationService.error("Please check your entered values");else{var n=e.value;this.settingsService.saveDogNzbSettings(n).subscribe(function(e){e?t.notificationService.success("Successfully saved the DogNzb settings"):t.notificationService.success("There was an error when saving the DogNzb settings")})}},e=o([r.Component({template:n(206)}),i("design:paramtypes",[a.SettingsService,s.FormBuilder,a.NotificationService])],e)}();t.DogNzbComponent=l},function(e,t){e.exports='<settings-menu>\n</settings-menu>\n\n<wiki [url]="\'https://github.com/tidusjar/Ombi/wiki/DogNzb-Settings\'"></wiki>\n<div *ngIf="form">\n    <fieldset>\n        <legend>DogNzb Settings</legend>\n        <form novalidate [formGroup]="form" (ngSubmit)="onSubmit(form)" style="padding-top:5%;">\n            <div class="col-md-6">\n                <div class="form-group">\n                    <div class="checkbox">\n                        <input type="checkbox" id="enable" formControlName="enabled" ng-checked="form.enabled">\n                        <label for="enable">Enable</label>\n                    </div>\n                </div>\n\n\n               \n                <div class="form-group">\n                    <label for="ApiKey" class="control-label">API Key</label>\n                 \n                        <input type="text" class="form-control form-control-custom" [ngClass]="{\'form-error\': form.get(\'apiKey\').hasError(\'required\')}" id="ApiKey" name="ApiKey" formControlName="apiKey">\n\n                        <small *ngIf="form.get(\'apiKey\').hasError(\'required\')" class="error-text">The API Key is required</small>\n                </div>\n                \n\n\n\n                <div class="form-group">\n                    <div>\n                        <button type="submit" [disabled]="form.invalid" class="btn btn-primary-outline ">Submit</button>\n                    </div>\n                </div>\n            </div>\n            <div class="col-md-6">\n                <div class="form-group">\n                    <div class="checkbox">\n                        <input type="checkbox" id="movies" formControlName="movies" ng-checked="form.movies">\n                        <label for="movies">Enable for Movies</label>\n                    </div>\n                </div>\n\n                <div class="form-group">\n                    <div class="checkbox">\n                        <input type="checkbox" id="tvShows" formControlName="tvShows" ng-checked="form.tvShows">\n                        <label for="tvShows">Enable for Tv Shows</label>\n                    </div>\n                </div>\n\n            </div>\n        </form>\n    </fieldset>\n</div>'},function(e,t,n){"use strict";var o=this&&this.__decorate||function(e,t,n,o){var i,r=arguments.length,s=r<3?t:null===o?o=Object.getOwnPropertyDescriptor(t,n):o;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)s=Reflect.decorate(e,t,n,o);else for(var a=e.length-1;a>=0;a--)(i=e[a])&&(s=(r<3?i(s):r>3?i(t,n,s):i(t,n))||s);return r>3&&s&&Object.defineProperty(t,n,s),s},i=this&&this.__metadata||function(e,t){if("object"==typeof Reflect&&"function"==typeof Reflect.metadata)return Reflect.metadata(e,t)};Object.defineProperty(t,"__esModule",{value:!0});var r=n(0),s=n(3),a=function(){function e(e,t,n,o){this.settingsService=e,this.notificationService=t,this.testerService=n,this.jobService=o}return e.prototype.ngOnInit=function(){var e=this;this.settingsService.getEmby().subscribe(function(t){return e.settings=t})},e.prototype.addTab=function(){null==this.settings.servers&&(this.settings.servers=[]),this.settings.servers.push({name:"New*",id:Math.floor(1e5*Math.random()+1),apiKey:"",administratorId:"",enableEpisodeSearching:!1,ip:"",port:0,ssl:!1,subDir:""})},e.prototype.test=function(e){var t=this;this.testerService.embyTest(e).subscribe(function(n){!0===n?t.notificationService.success("Successfully connected to the Emby server "+e.name+"!"):t.notificationService.error("We could not connect to the Emby server  "+e.name+"!")})},e.prototype.removeServer=function(e){var t=this.settings.servers.indexOf(e,0);t>-1&&this.settings.servers.splice(t,1)},e.prototype.save=function(){var e=this;this.settingsService.saveEmby(this.settings).subscribe(function(t){t?e.notificationService.success("Successfully saved Emby settings"):e.notificationService.success("There was an error when saving the Emby settings")})},e.prototype.runCacher=function(){var e=this;this.jobService.runEmbyCacher().subscribe(function(t){t&&e.notificationService.success("Triggered the Emby Content Cacher")})},e=o([r.Component({template:n(208)}),i("design:paramtypes",[s.SettingsService,s.NotificationService,s.TesterService,s.JobService])],e)}();t.EmbyComponent=a},function(e,t){e.exports='\n<settings-menu></settings-menu>\n<div *ngIf="settings">\n    <fieldset>\n        <legend>\n            Emby Configuration\n        </legend>\n\n        <div class="row">\n            <div class="form-group col-md-3">\n                <div class="checkbox">\n                    <input type="checkbox" id="enable" [(ngModel)]="settings.enable" [checked]="settings.enable">\n                    <label for="enable">Enable</label>\n                </div>\n            </div>\n            <div class="col-md-2 col-md-push-7">\n                <button type="button" (click)="addTab()" class="btn btn-success-outline">Add Server</button>\n            </div>\n        </div>\n\n        <ngb-tabset>\n            <div *ngFor="let server of settings.servers">\n                <ngb-tab [id]="server.id" [title]="server.name">\n                    <ng-template ngbTabContent>\n                        <br />\n                        <br />\n                        <div class="col-md-2" style="float: right;">\n                            <button type="button" (click)="removeServer(server)" class="btn btn-danger-outline">Remove Server</button>\n                        </div>\n                        <br />\n                        <br />\n                        <div class="col-md-6">\n                            <div class="form-group">\n                                <label for="name" class="control-label">Server name</label>\n                                <div>\n                                    <input type="text" class="form-control form-control-custom " id="name" name="name" placeholder="Server" [(ngModel)]="server.name" value="{{server.name}}">\n                                </div>\n                            </div>\n                            <div class="form-group">\n                                <label for="Ip" class="control-label">Hostname or IP</label>\n                                <div>\n                                    <input type="text" class="form-control form-control-custom " id="Ip" name="Ip" placeholder="localhost" [(ngModel)]="server.ip" value="{{server.ip}}">\n                                </div>\n                            </div>\n\n                            <div class="form-group">\n                                <label for="portNumber" class="control-label">Port</label>\n                                <div>\n                                    <input type="text" [(ngModel)]="server.port" class="form-control form-control-custom " id="portNumber" name="Port" placeholder="Port Number" value="{{server.port}}">\n                                </div>\n                            </div>\n\n                            <div class="form-group">\n                                <div class="checkbox">\n                                    <input type="checkbox" id="ssl" [(ngModel)]="server.ssl" ng-checked="server.ssl">\n                                    <label for="ssl">SSL</label>\n                                </div>\n                            </div>\n\n                            <div class="form-group">\n                                <label for="authToken" class="control-label">Emby Api Key</label>\n                                <div class="">\n                                    <input type="text" class="form-control-custom form-control" id="authToken" [(ngModel)]="server.apiKey" placeholder="Emby Api Key" value="{{server.apiKey}}">\n                                </div>\n                            </div>\n                            <div class="form-group">\n                                <div>\n                                    <button id="testEmby" type="button" (click)="test(server)" class="btn btn-primary-outline">Test Connectivity <div id="spinner"></div></button>\n                                </div>\n                            </div>\n                        </div>\n                    </ng-template>\n                </ngb-tab>\n            </div>\n        </ngb-tabset>\n        <div class="col-md-1">\n            <div class="form-group">\n                <div>\n                    <button (click)="save()" type="submit" id="save" class="btn btn-primary-outline">Submit</button>\n                </div>\n            </div>\n        </div>\n        <div class="col-md-1">\n            <div class="form-group">\n                <div>\n                    <button (click)="runCacher()" type="button" id="save" class="btn btn-primary-outline">Manually Run Cacher</button>\n                </div>\n            </div>\n        </div>\n    </fieldset>\n</div>'},function(e,t,n){"use strict";var o=this&&this.__decorate||function(e,t,n,o){var i,r=arguments.length,s=r<3?t:null===o?o=Object.getOwnPropertyDescriptor(t,n):o;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)s=Reflect.decorate(e,t,n,o);else for(var a=e.length-1;a>=0;a--)(i=e[a])&&(s=(r<3?i(s):r>3?i(t,n,s):i(t,n))||s);return r>3&&s&&Object.defineProperty(t,n,s),s},i=this&&this.__metadata||function(e,t){if("object"==typeof Reflect&&"function"==typeof Reflect.metadata)return Reflect.metadata(e,t)};Object.defineProperty(t,"__esModule",{value:!0});var r=n(0),s=n(7),a=n(3),l=function(){function e(e,t,n,o){this.issuesService=e,this.settingsService=t,this.fb=n,this.notificationService=o,this.categoryToAdd={id:0,value:""}}return e.prototype.ngOnInit=function(){var e=this;this.settingsService.getIssueSettings().subscribe(function(t){e.form=e.fb.group({enabled:[t.enabled],enableInProgress:[t.enableInProgress]})}),this.getCategories()},e.prototype.addCategory=function(){var e=this;this.issuesService.createCategory(this.categoryToAdd).subscribe(function(t){t&&(e.getCategories(),e.categoryToAdd.value="")})},e.prototype.deleteCategory=function(e){var t=this;this.issuesService.deleteCategory(e).subscribe(function(e){e&&t.getCategories()})},e.prototype.onSubmit=function(e){var t=this;if(e.invalid)this.notificationService.error("Please check your entered values");else{var n=e.value;this.settingsService.saveIssueSettings(n).subscribe(function(e){e?t.notificationService.success("Successfully saved the Issue settings"):t.notificationService.success("There was an error when saving the Issue settings")})}},e.prototype.getCategories=function(){var e=this;this.issuesService.getCategories().subscribe(function(t){e.categories=t})},e=o([r.Component({template:n(210)}),i("design:paramtypes",[a.IssuesService,a.SettingsService,s.FormBuilder,a.NotificationService])],e)}();t.IssuesComponent=l},function(e,t){e.exports='<settings-menu></settings-menu>\n<wiki [url]="\'https://github.com/tidusjar/Ombi/wiki/Issue-Settings\'"></wiki>\n\n<fieldset>\n    <legend>Issues</legend>\n    <form *ngIf="form" novalidate [formGroup]="form" (ngSubmit)="onSubmit(form)" style="padding-top:5%;">\n        <div class="col-md-6">\n            <div class="form-group">\n                <div class="checkbox">\n                    <input type="checkbox" id="enable" formControlName="enabled" ng-checked="form.enabled">\n                    <label for="enable">Enable</label>\n                </div>\n            </div>\n            <div class="form-group">\n                <div class="checkbox">\n                    <input type="checkbox" id="enableInProgress" formControlName="enableInProgress" ng-checked="form.enableInProgress">\n                    <label for="enableInProgress">Enable In Progress State</label>\n                </div>\n            </div>\n\n            <div class="form-group">\n                <div>\n                    <button type="submit" [disabled]="form.invalid" class="btn btn-primary-outline ">Submit</button>\n                </div>\n            </div>\n        </div>\n\n    </form>\n\n\n\n\n\n    <div class="col-md-6">\n        <div *ngIf="categories">\n            <div class="form-group row">\n                <div class="col-md-12">\n                    <label for="categoryToAdd" class="control-label">Add Category</label>\n                </div>\n                <div class="col-md-9">\n                    <input type="text" [(ngModel)]="categoryToAdd.value" class="form-control form-control-custom " id="categoryToAdd" name="categoryToAdd"\n                        value="{{categoryToAdd.value}}">\n                </div>\n                <div class="col-md-3">\n                    <button class="btn btn-primary-outline" (click)="addCategory()">Add</button>\n                </div>\n            </div>\n\n            <div class="row">\n                <div *ngFor="let cat of categories">\n                    <div class="col-md-9">\n                        {{cat.value}}\n                    </div>\n                    <div class="col-md-3">\n                        <button class="btn btn-sm btn-danger-outline" (click)="deleteCategory(cat.id)">Delete</button>\n                    </div>\n                </div>\n            </div>\n        </div>\n    </div>\n</fieldset>'},function(e,t,n){"use strict";var o=this&&this.__decorate||function(e,t,n,o){var i,r=arguments.length,s=r<3?t:null===o?o=Object.getOwnPropertyDescriptor(t,n):o;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)s=Reflect.decorate(e,t,n,o);else for(var a=e.length-1;a>=0;a--)(i=e[a])&&(s=(r<3?i(s):r>3?i(t,n,s):i(t,n))||s);return r>3&&s&&Object.defineProperty(t,n,s),s},i=this&&this.__metadata||function(e,t){if("object"==typeof Reflect&&"function"==typeof Reflect.metadata)return Reflect.metadata(e,t)};Object.defineProperty(t,"__esModule",{value:!0});var r=n(0),s=n(7),a=n(3),l=function(){function e(e,t,n){this.settingsService=e,this.fb=t,this.notificationService=n}return e.prototype.ngOnInit=function(){var e=this;this.settingsService.getJobSettings().subscribe(function(t){e.form=e.fb.group({automaticUpdater:[t.automaticUpdater,s.Validators.required],couchPotatoSync:[t.couchPotatoSync,s.Validators.required],embyContentSync:[t.embyContentSync,s.Validators.required],plexContentSync:[t.plexContentSync,s.Validators.required],userImporter:[t.userImporter,s.Validators.required],sonarrSync:[t.radarrSync,s.Validators.required],radarrSync:[t.sonarrSync,s.Validators.required],sickRageSync:[t.sickRageSync,s.Validators.required]})})},e.prototype.onSubmit=function(e){var t=this;if(e.invalid)this.notificationService.error("Please check your entered values");else{var n=e.value;this.settingsService.saveJobSettings(n).subscribe(function(e){e?t.notificationService.success("Successfully saved the job settings"):t.notificationService.success("There was an error when saving the job settings")})}},e=o([r.Component({template:n(212)}),i("design:paramtypes",[a.SettingsService,s.FormBuilder,a.NotificationService])],e)}();t.JobsComponent=l},function(e,t){e.exports='<settings-menu>\n</settings-menu>\n\n<wiki [url]="\'https://github.com/tidusjar/Ombi/wiki/Job-Settings\'"></wiki>\n<div *ngIf="form">\n    <fieldset>\n        <legend>Job Settings</legend>\n        <form novalidate [formGroup]="form" (ngSubmit)="onSubmit(form)" style="padding-top:5%;">\n            <div class="col-md-6">\n                <small>Changes to any of the below requires you to restart Ombi.</small>\n                <div class="form-group">\n                    <label for="sonarrSync" class="control-label">Sonarr Sync</label>              \n                        <input type="text" class="form-control form-control-custom" [ngClass]="{\'form-error\': form.get(\'sonarrSync\').hasError(\'required\')}" id="sonarrSync" name="sonarrSync" formControlName="sonarrSync">\n                        <small *ngIf="form.get(\'sonarrSync\').hasError(\'required\')" class="error-text">The Sonarr Sync is required</small>\n                </div>\n                <div class="form-group">\n                    <label for="sickRageSync" class="control-label">SickRage Sync</label>              \n                        <input type="text" class="form-control form-control-custom" [ngClass]="{\'form-error\': form.get(\'sonarrSync\').hasError(\'required\')}" id="sickRageSync" name="sickRageSync" formControlName="sickRageSync">\n                        <small *ngIf="form.get(\'sickRageSync\').hasError(\'required\')" class="error-text">The SickRage Sync is required</small>\n                </div>\n\n                <div class="form-group">\n                    <label for="radarrSync" class="control-label">Radarr Sync</label>              \n                        <input type="text" class="form-control form-control-custom" [ngClass]="{\'form-error\': form.get(\'radarrSync\').hasError(\'required\')}" id="radarrSync" name="radarrSync" formControlName="radarrSync">\n                        <small *ngIf="form.get(\'radarrSync\').hasError(\'required\')" class="error-text">The Radarr Sync is required</small>\n                </div>\n\n                <div class="form-group">\n                    <label for="couchPotatoSync" class="control-label">CouchPotato Sync</label>              \n                        <input type="text" class="form-control form-control-custom" [ngClass]="{\'form-error\': form.get(\'radarrSync\').hasError(\'required\')}" id="couchPotatoSync" name="couchPotatoSync" formControlName="couchPotatoSync">\n                        <small *ngIf="form.get(\'couchPotatoSync\').hasError(\'required\')" class="error-text">The CouchPotato Sync is required</small>\n                </div>\n                \n                <div class="form-group">\n                    <label for="automaticUpdater" class="control-label">Automatic Update</label>              \n                        <input type="text" class="form-control form-control-custom" [ngClass]="{\'form-error\': form.get(\'automaticUpdater\').hasError(\'required\')}" id="automaticUpdater" name="automaticUpdater" formControlName="automaticUpdater">\n                        <small *ngIf="form.get(\'automaticUpdater\').hasError(\'required\')" class="error-text">The Automatic Update is required</small>\n                </div>\n\n\n\n                <div class="form-group">\n                    <div>\n                        <button type="submit" [disabled]="form.invalid" class="btn btn-primary-outline">Submit</button>\n                    </div>\n                </div>\n            </div>\n            <div class="col-md-6">\n                <div class="form-group">\n                    <label for="plexContentSync" class="control-label">Plex Sync</label>              \n                        <input type="text" class="form-control form-control-custom" [ngClass]="{\'form-error\': form.get(\'plexContentSync\').hasError(\'required\')}" id="plexContentSync" name="plexContentSync" formControlName="plexContentSync">\n                        <small *ngIf="form.get(\'plexContentSync\').hasError(\'required\')" class="error-text">The Plex Sync is required</small>\n                </div>\n\n                <div class="form-group">\n                    <label for="embyContentSync" class="control-label">Emby Sync</label>              \n                        <input type="text" class="form-control form-control-custom" [ngClass]="{\'form-error\': form.get(\'embyContentSync\').hasError(\'required\')}" id="embyContentSync" name="embyContentSync" formControlName="embyContentSync">\n                        <small *ngIf="form.get(\'embyContentSync\').hasError(\'required\')" class="error-text">The Emby Sync is required</small>\n                </div>\n\n                <div class="form-group">\n                    <label for="userImporter" class="control-label">User Importer</label>              \n                        <input type="text" class="form-control form-control-custom" [ngClass]="{\'form-error\': form.get(\'userImporter\').hasError(\'required\')}" id="userImporter" name="userImporter" formControlName="userImporter">\n                        <small *ngIf="form.get(\'userImporter\').hasError(\'required\')" class="error-text">The User Importer is required</small>\n                </div>\n\n            </div>\n        </form>\n    </fieldset>\n</div>'},function(e,t,n){"use strict";var o=this&&this.__decorate||function(e,t,n,o){var i,r=arguments.length,s=r<3?t:null===o?o=Object.getOwnPropertyDescriptor(t,n):o;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)s=Reflect.decorate(e,t,n,o);else for(var a=e.length-1;a>=0;a--)(i=e[a])&&(s=(r<3?i(s):r>3?i(t,n,s):i(t,n))||s);return r>3&&s&&Object.defineProperty(t,n,s),s},i=this&&this.__metadata||function(e,t){if("object"==typeof Reflect&&"function"==typeof Reflect.metadata)return Reflect.metadata(e,t)};Object.defineProperty(t,"__esModule",{value:!0});var r=n(0),s=n(3),a=n(3),l=function(){function e(e,t){this.settingsService=e,this.notificationService=t}return e.prototype.ngOnInit=function(){var e=this;this.settingsService.getLandingPage().subscribe(function(t){e.settings=t})},e.prototype.save=function(){var e=this;this.settingsService.saveLandingPage(this.settings).subscribe(function(t){t?e.notificationService.success("Successfully saved the Landing Page settings"):e.notificationService.success("There was an error when saving the Landing Page settings")})},e=o([r.Component({template:n(214)}),i("design:paramtypes",[a.SettingsService,s.NotificationService])],e)}();t.LandingPageComponent=l},function(e,t){e.exports='\n<settings-menu></settings-menu>\n\n<wiki [url]="\'https://github.com/tidusjar/Ombi/wiki/Landing-Page-Settings\'"></wiki>\n<div *ngIf="settings">\n    <fieldset>\n        <legend>Landing Page Configuration</legend>\n\n\n        <div class="form-group">\n            <div class="checkbox">\n                <input type="checkbox" id="enable" name="enable" [(ngModel)]="settings.enabled" ng-checked="settings.enabled">\n                <label for="enable">Enable</label>\n            </div>\n        </div>\n\n        <p class="form-group">Notice Message</p>\n        <div class="form-group">\n            <div>\n                <textarea rows="4" type="text" class="form-control-custom form-control " id="NoticeMessage" name="NoticeMessage" placeholder="e.g. The server will be down for maintenance (HTML is allowed)" [(ngModel)]="settings.noticeText">{{settings.noticeText}}</textarea>\n            </div>\n        </div>\n\n        <p class="form-group">Notice Preview:</p>\n        <div class="form-group">\n            <div [innerHTML]="settings.noticeText"></div>\n        </div>\n\n\n        \x3c!--<div class="form-group">\n            <div class="checkbox">\n                <input type="checkbox" id="enable" name="enable" [(ngModel)]="settings.timeLimit" ng-checked="settings.timeLimit">\n                <label for="enable">Only show the notification message between the below times</label>\n            </div>\n        </div>--\x3e\n\n\n\n\n        \x3c!--<p class="form-group">Start Time</p>\n        <div class="form-group">\n            <p-calendar [(ngModel)]="settings.startDateTime" [showTime]="true"></p-calendar>\n        </div>\n        <p class="form-group">End Time</p>\n        <div class="form-group">\n            <p-calendar [(ngModel)]="settings.endDateTime" [showTime]="true"></p-calendar>\n        </div>--\x3e\n\n\n\n        <div class="form-group">\n            <div>\n                <button (click)="save()" type="submit" id="save" class="btn btn-primary-outline">Submit</button>\n            </div>\n        </div>\n    </fieldset>\n</div>\n'},function(e,t,n){"use strict";var o=this&&this.__decorate||function(e,t,n,o){var i,r=arguments.length,s=r<3?t:null===o?o=Object.getOwnPropertyDescriptor(t,n):o;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)s=Reflect.decorate(e,t,n,o);else for(var a=e.length-1;a>=0;a--)(i=e[a])&&(s=(r<3?i(s):r>3?i(t,n,s):i(t,n))||s);return r>3&&s&&Object.defineProperty(t,n,s),s},i=this&&this.__metadata||function(e,t){if("object"==typeof Reflect&&"function"==typeof Reflect.metadata)return Reflect.metadata(e,t)};Object.defineProperty(t,"__esModule",{value:!0});var r=n(0),s=n(7),a=n(172),l=n(3),c=n(3),d=n(3),u=function(){function e(e,t,n,o){this.settingsService=e,this.notificationService=t,this.fb=n,this.testerService=o,this.NotificationType=a.NotificationType}return e.prototype.ngOnInit=function(){var e=this;this.settingsService.getDiscordNotificationSettings().subscribe(function(t){e.templates=t.notificationTemplates,e.form=e.fb.group({enabled:[t.enabled],username:[t.username],webhookUrl:[t.webhookUrl,[s.Validators.required]]})})},e.prototype.onSubmit=function(e){var t=this;if(e.invalid)this.notificationService.error("Please check your entered values");else{var n=e.value;n.notificationTemplates=this.templates,this.settingsService.saveDiscordNotificationSettings(n).subscribe(function(e){e?t.notificationService.success("Successfully saved the Discord settings"):t.notificationService.success("There was an error when saving the Discord settings")})}},e.prototype.test=function(e){var t=this;e.invalid?this.notificationService.error("Please check your entered values"):this.testerService.discordTest(e.value).subscribe(function(e){e?t.notificationService.success("Successfully sent a Discord message, please check the discord channel"):t.notificationService.error("There was an error when sending the Discord message. Please check your settings")})},e=o([r.Component({template:n(216)}),i("design:paramtypes",[d.SettingsService,c.NotificationService,s.FormBuilder,l.TesterService])],e)}();t.DiscordComponent=u},function(e,t){e.exports='\n<settings-menu></settings-menu>\n<div *ngIf="form">\n    <fieldset>\n        <legend>Discord Notifications</legend>\n        <div class="col-md-6">\n            <form novalidate [formGroup]="form" (ngSubmit)="onSubmit(form)">\n\n                <div class="form-group">\n                    <div class="checkbox">\n                        <input type="checkbox" id="enable" formControlName="enabled">\n                        <label for="enable">Enabled</label>\n                    </div>\n                </div>\n\n\n                <div class="form-group">\n                    <label for="webhookUrl" class="control-label">Webhook Url</label>\n                        <input type="text" class="form-control form-control-custom " id="webhookUrl" name="webhookUrl" formControlName="webhookUrl"  [ngClass]="{\'form-error\': form.get(\'webhookUrl\').hasError(\'required\')}">\n                        <small *ngIf="form.get(\'webhookUrl\').hasError(\'required\')" class="error-text">The Webhook Url is required</small>\n                </div>\n\n                <div class="form-group">\n                    <label for="username" class="control-label">Username</label>\n                    <div>\n                        <input type="text" class="form-control form-control-custom " id="username" name="username" formControlName="username" pTooltip="Optional, this will override the username you used for the Webhook">\n                    </div>\n                </div>\n\n               \n\n                <div class="form-group">\n                    <div>\n                        <button [disabled]="form.invalid" type="button" (click)="test(form)" class="btn btn-primary-outline">\n                            Test\n                            <div id="spinner"></div>\n                        </button>\n                    </div>\n                </div>\n\n\n\n                <div class="form-group">\n                    <div>\n                        <button [disabled]="form.invalid" type="submit" id="save" class="btn btn-primary-outline">Submit</button>\n                    </div>\n                </div>\n            </form>\n        </div>\n\n\n        <div class="col-md-6">\n            <notification-templates [templates]="templates" [showSubject]="false"></notification-templates>\n        </div>\n    </fieldset>\n</div>'},function(e,t,n){"use strict";var o=this&&this.__decorate||function(e,t,n,o){var i,r=arguments.length,s=r<3?t:null===o?o=Object.getOwnPropertyDescriptor(t,n):o;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)s=Reflect.decorate(e,t,n,o);else for(var a=e.length-1;a>=0;a--)(i=e[a])&&(s=(r<3?i(s):r>3?i(t,n,s):i(t,n))||s);return r>3&&s&&Object.defineProperty(t,n,s),s},i=this&&this.__metadata||function(e,t){if("object"==typeof Reflect&&"function"==typeof Reflect.metadata)return Reflect.metadata(e,t)};Object.defineProperty(t,"__esModule",{value:!0});var r=n(0),s=n(7),a=n(172),l=n(3),c=n(3),d=n(3),u=n(3),f=function(){function e(e,t,n,o,i){this.settingsService=e,this.notificationService=t,this.fb=n,this.validationService=o,this.testerService=i,this.NotificationType=a.NotificationType}return e.prototype.ngOnInit=function(){var e=this;this.settingsService.getEmailNotificationSettings().subscribe(function(t){e.templates=t.notificationTemplates,e.emailForm=e.fb.group({enabled:[t.enabled],authentication:[t.authentication],host:[t.host,[s.Validators.required]],password:[t.password],port:[t.port,[s.Validators.required]],senderAddress:[t.senderAddress,[s.Validators.required,s.Validators.email]],senderName:[t.senderName],username:[t.username],adminEmail:[t.adminEmail,[s.Validators.required,s.Validators.email]],disableTLS:[t.disableTLS],disableCertificateChecking:[t.disableCertificateChecking]}),t.authentication&&(e.validationService.enableValidation(e.emailForm,"username"),e.validationService.enableValidation(e.emailForm,"password")),e.subscribeToAuthChanges()})},e.prototype.onSubmit=function(e){var t=this;if(e.invalid)this.notificationService.error("Please check your entered values");else{var n=e.value;n.notificationTemplates=this.templates,this.settingsService.saveEmailNotificationSettings(n).subscribe(function(e){e?t.notificationService.success("Successfully saved Email settings"):t.notificationService.success("There was an error when saving the Email settings")})}},e.prototype.test=function(e){var t=this;e.invalid?this.notificationService.error("Please check your entered values"):this.testerService.emailTest(e.value).subscribe(function(e){!0===e?t.notificationService.success("Successfully sent an email message, please check your inbox"):t.notificationService.error("There was an error when sending the Email message, please check your settings.")})},e.prototype.subscribeToAuthChanges=function(){var e=this;this.emailForm.controls.authentication.valueChanges.subscribe(function(t){t?(e.validationService.enableValidation(e.emailForm,"username"),e.validationService.enableValidation(e.emailForm,"password")):(e.validationService.disableValidation(e.emailForm,"username"),e.validationService.disableValidation(e.emailForm,"password"))})},e=o([r.Component({template:n(218)}),i("design:paramtypes",[u.SettingsService,d.NotificationService,s.FormBuilder,c.ValidationService,l.TesterService])],e)}();t.EmailNotificationComponent=f},function(e,t){e.exports='\n<settings-menu></settings-menu>\n<div *ngIf="emailForm">\n    <fieldset>\n        <legend>Email Notifications</legend>\n        <div class="col-md-6">\n            <form novalidate [formGroup]="emailForm" (ngSubmit)="onSubmit(emailForm)">\n\n                <div class="form-group">\n                    <div class="checkbox">\n                        <input type="checkbox" id="enable" formControlName="enabled">\n                        <label for="enable">Enabled</label>\n                    </div>\n                </div>\n\n                <div class="form-group">\n                    <div class="checkbox">\n                        <input type="checkbox" id="Authentication" formControlName="authentication"><label for="Authentication">Enable SMTP Authentication</label>\n                    </div>\n                </div>\n\n                <div class="form-group">\n                    <div class="checkbox">\n                            <input type="checkbox" id="disableTLS" formControlName="disableTLS"><label for="disableTLS">Disable TLS/SSL</label>\n                    </div>\n                </div>\n\n                <div class="form-group">\n                    <div class="checkbox">\n                        <input type="checkbox" id="disableCertificateChecking" formControlName="disableCertificateChecking"><label for="disableCertificateChecking">Disable Certificate Checking</label>\n                    </div>\n                </div>\n                <div class="form-group">\n                    <label for="host" class="control-label">SMTP Host</label>\n                  \n                        <input type="text" class="form-control form-control-custom " id="host" name="host" placeholder="localhost" formControlName="host"  [ngClass]="{\'form-error\': emailForm.get(\'host\').hasError(\'required\')}">\n                        <small *ngIf="emailForm.get(\'host\').hasError(\'required\')" class="error-text">The Host is required</small>\n                </div>\n\n                <div class="form-group">\n                    <label for="portNumber" class="control-label">SMTP Port</label>\n                    <div>\n                        <input type="text" class="form-control form-control-custom " [ngClass]="{\'form-error\': emailForm.get(\'port\').hasError(\'required\')}" id="portNumber" name="Port" placeholder="Port Number" formControlName="port">\n                        <small *ngIf="emailForm.get(\'port\').hasError(\'required\')" class="error-text">The Port is required</small>\n                    </div>\n                </div>\n\n                <div class="form-group">\n                    <label style="padding-left: 0"  for="senderAddress" class="control-label col-md-12">Email Sender</label>\n                    <div style="padding-left: 0" class="col-md-6">\n                        <input type="text" class="form-control form-control-custom " id="senderAddress" [ngClass]="{\'form-error\': emailForm.get(\'senderAddress\').hasError(\'required\'), \'form-error\': emailForm.get(\'senderAddress\').hasError(\'incorrectMailFormat\')}" name="senderAddress" formControlName="senderAddress" tooltipPosition="top" placeholder="Sender Address" pTooltip="The email address that the emails will be sent from">\n                        <small *ngIf="emailForm.get(\'senderAddress\').hasError(\'required\')" class="error-text">The Email Sender Address is required</small>\n                        <small *ngIf="emailForm.get(\'senderAddress\').hasError(\'email\') && !emailForm.get(\'senderAddress\').hasError(\'required\')" class="error-text">The Email Sender Address needs to be a valid email address</small>\n                    </div>\n                    <div style="padding-left: 0" class="col-md-6">\n                        <input type="text" class="form-control form-control-custom " id="senderName" name="senderName" formControlName="senderName" tooltipPosition="top" placeholder="Sender Name" pTooltip="The \'Friendly\' name that will appear in the \'FROM:\' part of the email">\n                    </div>\n                    <br/>\n                    <br/>\n                    <br/>\n                </div>\n\n                <div class="form-group">\n                    <label for="adminEmail" class="control-label">Admin Email</label>\n                        <input type="text" class="form-control form-control-custom" [ngClass]="{\'form-error\': emailForm.get(\'adminEmail\').hasError(\'required\'), \'form-error\': emailForm.get(\'adminEmail\').hasError(\'email\')}"  id="adminEmail" name="adminEmail" formControlName="adminEmail" tooltipPosition="top" pTooltip="The administrator email will be used to send emails for admin only notifications (e.g. New Requests that require approvals)">\n                        <small *ngIf="emailForm.get(\'adminEmail\').hasError(\'required\')" class="error-text">The Admin Email Address is required</small>\n                        <small *ngIf="emailForm.get(\'adminEmail\').hasError(\'email\')  && !emailForm.get(\'adminEmail\').hasError(\'required\')" class="error-text">The Admin Email needs to be a valid email address</small>\n\n                </div>\n\n\n                <div class="form-group" *ngIf="emailForm.controls[\'username\'].validator">\n                    <label for="username" class="control-label">Username</label>\n                    \n                        <input type="text" class="form-control form-control-custom" [ngClass]="{\'form-error\': emailForm.get(\'username\').hasError(\'required\')}" id="username" name="username" formControlName="username" pTooltip="The username if authentication is enabled" tooltipPosition="top">\n                        <small *ngIf="emailForm.get(\'username\').hasError(\'required\')" class="error-text">The Username is required</small>\n                        \n                </div>\n\n                <div class="form-group" *ngIf="emailForm.get(\'password\').validator">\n                    <label for="password" class="control-label">Password</label>\n                    \n                        <input type="password" class="form-control form-control-custom"  [ngClass]="{\'form-error\': emailForm.get(\'password\').hasError(\'required\')}" id="password" name="password" formControlName="password" pTooltip="The password if authentication is enabled" tooltipPosition="top">\n                        <small *ngIf="emailForm.get(\'password\').hasError(\'required\')" class="error-text">The Password is required</small>\n                </div>\n\n                <div class="form-group">\n                    <div>\n                        <button [disabled]="emailForm.invalid" type="submit" id="save" class="btn btn-primary-outline">Submit</button>\n                        <button [disabled]="emailForm.invalid" type="submit" (click)="test(emailForm)" class="btn btn-primary-outline">\n                            Test\n                            <div id="spinner"></div>\n                        </button>\n\n                    </div>\n                </div>\n            </form>\n        </div>\n\n\n        <div class="col-md-6">\n            <notification-templates [templates]="templates"></notification-templates>\n        </div>\n    </fieldset>\n</div>'},function(e,t,n){"use strict";var o=this&&this.__decorate||function(e,t,n,o){var i,r=arguments.length,s=r<3?t:null===o?o=Object.getOwnPropertyDescriptor(t,n):o;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)s=Reflect.decorate(e,t,n,o);else for(var a=e.length-1;a>=0;a--)(i=e[a])&&(s=(r<3?i(s):r>3?i(t,n,s):i(t,n))||s);return r>3&&s&&Object.defineProperty(t,n,s),s},i=this&&this.__metadata||function(e,t){if("object"==typeof Reflect&&"function"==typeof Reflect.metadata)return Reflect.metadata(e,t)};Object.defineProperty(t,"__esModule",{value:!0});var r=n(0),s=n(7),a=n(172),l=n(3),c=n(3),d=n(3),u=function(){function e(e,t,n,o){this.settingsService=e,this.notificationService=t,this.fb=n,this.testerService=o,this.NotificationType=a.NotificationType}return e.prototype.ngOnInit=function(){var e=this;this.settingsService.getMattermostNotificationSettings().subscribe(function(t){e.templates=t.notificationTemplates,e.form=e.fb.group({enabled:[t.enabled],username:[t.username],webhookUrl:[t.webhookUrl,[s.Validators.required]],channel:[t.channel],iconUrl:[t.iconUrl]})})},e.prototype.onSubmit=function(e){var t=this;if(e.invalid)this.notificationService.error("Please check your entered values");else{var n=e.value;n.notificationTemplates=this.templates,this.settingsService.saveMattermostNotificationSettings(n).subscribe(function(e){e?t.notificationService.success("Successfully saved the Mattermost settings"):t.notificationService.success("There was an error when saving the Mattermost settings")})}},e.prototype.test=function(e){var t=this;e.invalid?this.notificationService.error("Please check your entered values"):this.testerService.mattermostTest(e.value).subscribe(function(e){e?t.notificationService.success("Successfully sent a Mattermost message, please check the discord channel"):t.notificationService.error("There was an error when sending the Mattermost message. Please check your settings")})},e=o([r.Component({template:n(220)}),i("design:paramtypes",[d.SettingsService,c.NotificationService,s.FormBuilder,l.TesterService])],e)}();t.MattermostComponent=u},function(e,t){e.exports='\n<settings-menu></settings-menu>\n<div *ngIf="form">\n    <fieldset>\n        <legend>Mattermost Notifications</legend>\n        <div class="col-md-6">\n            <form novalidate [formGroup]="form" (ngSubmit)="onSubmit(form)">\n\n                <div class="form-group">\n                    <div class="checkbox">\n                        <input type="checkbox" id="enable" formControlName="enabled">\n                        <label for="enable">Enabled</label>\n                    </div>\n                </div>\n\n                <div class="form-group">\n                    <small class="control-label"> Mattermost > Integrations > Incoming Webhook > Add Incoming Webhook. You will then have a Webhook</small>\n                    <label for="webhookUrl" class="control-label">Incoming Webhook Url</label>\n                    \n                        <input type="text" class="form-control form-control-custom " id="webhookUrl" name="webhookUrl" formControlName="webhookUrl" [ngClass]="{\'form-error\': form.get(\'webhookUrl\').hasError(\'required\')}">\n                        <small *ngIf="form.get(\'webhookUrl\').hasError(\'required\')" class="error-text">The Webhook Url is required</small>\n                </div>\n\n\n                <div class="form-group">\n                    <label for="channel" class="control-label">Channel Override</label>\n                    <div>\n                        <input type="text" class="form-control form-control-custom " id="channel" name="channel" formControlName="channel" pTooltip="Optional, you can override the default channel">\n                    </div>\n                </div>\n\n                <div class="form-group">\n                    <label for="username" class="control-label">Username Override</label>\n                    <div>\n                        <input type="text" class="form-control form-control-custom " id="username" name="username" formControlName="username" pTooltip="Optional, this will override the username you used for the Webhook">\n                    </div>\n                </div>\n\n                <div class="form-group">\n                    <label for="iconUrl" class="control-label">Icon Override</label>\n                    <div>\n                        <input type="text" class="form-control form-control-custom " id="iconUrl" name="iconUrl" formControlName="iconUrl" pTooltip="Optional, this will override the icon you use for the Webhook">\n                    </div>\n                </div>\n\n\n\n                <div class="form-group">\n                    <div>\n                        <button [disabled]="form.invalid" type="button" (click)="test(form)" class="btn btn-primary-outline">\n                            Test\n                            <div id="spinner"></div>\n                        </button>\n                    </div>\n                </div>\n\n\n\n                <div class="form-group">\n                    <div>\n                        <button [disabled]="form.invalid" type="submit" id="save" class="btn btn-primary-outline">Submit</button>\n                    </div>\n                </div>\n            </form>\n        </div>\n\n\n        <div class="col-md-6">\n            <notification-templates [templates]="templates" [showSubject]="false"></notification-templates>\n        </div>\n    </fieldset>\n</div>'},function(e,t,n){"use strict";var o=this&&this.__decorate||function(e,t,n,o){var i,r=arguments.length,s=r<3?t:null===o?o=Object.getOwnPropertyDescriptor(t,n):o;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)s=Reflect.decorate(e,t,n,o);else for(var a=e.length-1;a>=0;a--)(i=e[a])&&(s=(r<3?i(s):r>3?i(t,n,s):i(t,n))||s);return r>3&&s&&Object.defineProperty(t,n,s),s},i=this&&this.__metadata||function(e,t){if("object"==typeof Reflect&&"function"==typeof Reflect.metadata)return Reflect.metadata(e,t)};Object.defineProperty(t,"__esModule",{value:!0});var r=n(0),s=n(7),a=n(172),l=n(3),c=n(3),d=n(3),u=function(){function e(e,t,n,o,i){this.settingsService=e,this.notificationService=t,this.fb=n,this.testerService=o,this.mobileService=i,this.NotificationType=a.NotificationType}return e.prototype.ngOnInit=function(){var e=this;this.settingsService.getMobileNotificationSettings().subscribe(function(t){e.templates=t.notificationTemplates,e.form=e.fb.group({})}),this.mobileService.getUserDeviceList().subscribe(function(t){return e.userList=t})},e.prototype.onSubmit=function(e){var t=this;if(e.invalid)this.notificationService.error("Please check your entered values");else{var n=e.value;n.notificationTemplates=this.templates,this.settingsService.saveMobileNotificationSettings(n).subscribe(function(e){e?t.notificationService.success("Successfully saved the Mobile settings"):t.notificationService.success("There was an error when saving the Mobile settings")})}},e.prototype.test=function(e){var t=this;e.invalid?this.notificationService.error("Please check your entered values"):this.testerService.discordTest(e.value).subscribe(function(e){e?t.notificationService.success("Successfully sent a Mobile message, please check the admin mobile device"):t.notificationService.error("There was an error when sending the Mobile message. Please check your settings")})},e=o([r.Component({template:n(222)}),i("design:paramtypes",[d.SettingsService,c.NotificationService,s.FormBuilder,l.TesterService,d.MobileService])],e)}();t.MobileComponent=u},function(e,t){e.exports='<settings-menu>\n</settings-menu>\n<div *ngIf="form">\n    <fieldset>\n        <legend>Mobile Notifications</legend>\n        <div class="col-md-6">\n            <form novalidate [formGroup]="form" (ngSubmit)="onSubmit(form)">\n                <div class="row">\n                    <div *ngIf="userList" class="col-md-8">\n                        <table class="table table-striped table-hover table-responsive table-condensed">\n                            <thead>\n                                <tr>\n                                    <th>\n                                        <a>Username/Alias</a>\n                                    </th>\n                                    <th>\n                                        <a>Mobile Devices Registered</a>\n                                    </th>\n\n                                </tr>\n                            </thead>\n                            <tbody>\n                                <tr *ngFor="let user of userList">\n                                    <td>\n                                        {{user.username}}\n                                    </td>\n                                    <td>\n                                        {{user.devices}}\n                                    </td>\n\n                            </tbody>\n                        </table>\n                    </div>\n                </div>\n\n                <div class="row">\n                    <div class="form-group">\n                        <div>\n                            <button [disabled]="form.invalid" type="button" (click)="test(form)" class="btn btn-primary-outline">\n                                Test\n                                <div id="spinner"></div>\n                            </button>\n                        </div>\n                    </div>\n\n\n\n                    <div class="form-group">\n                        <div>\n                            <button [disabled]="form.invalid" type="submit" id="save" class="btn btn-primary-outline">Submit</button>\n                        </div>\n                    </div>\n                </div>\n            </form>\n        </div>\n\n\n        <div class="col-md-6">\n            <notification-templates [templates]="templates" [showSubject]="false"></notification-templates>\n        </div>\n    </fieldset>\n</div>'},function(e,t,n){"use strict";var o=this&&this.__decorate||function(e,t,n,o){var i,r=arguments.length,s=r<3?t:null===o?o=Object.getOwnPropertyDescriptor(t,n):o;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)s=Reflect.decorate(e,t,n,o);else for(var a=e.length-1;a>=0;a--)(i=e[a])&&(s=(r<3?i(s):r>3?i(t,n,s):i(t,n))||s);return r>3&&s&&Object.defineProperty(t,n,s),s},i=this&&this.__metadata||function(e,t){if("object"==typeof Reflect&&"function"==typeof Reflect.metadata)return Reflect.metadata(e,t)};Object.defineProperty(t,"__esModule",{value:!0});var r=n(0),s=n(172),a=function(){function e(){this.showSubject=!0,this.NotificationType=s.NotificationType}return o([r.Input(),i("design:type",Array)],e.prototype,"templates",void 0),o([r.Input(),i("design:type",Object)],e.prototype,"showSubject",void 0),e=o([r.Component({selector:"notification-templates",template:n(224)})],e)}();t.NotificationTemplate=a},function(e,t){e.exports='\n<wiki [url]="\'https://github.com/tidusjar/Ombi/wiki/Notification-Template-Variables\'" [text]="\'Notification Variables\'"></wiki>\n<br><br>\n\n\n<ngb-accordion [closeOthers]="true" activeIds="0-header">\n    <ngb-panel *ngFor="let template of templates" id="{{template.notificationType}}" title="{{NotificationType[template.notificationType] | humanize}}">\n        <ng-template ngbPanelContent>\n            <div class="panel panel-default">\n                <div class="panel-body">\n                    \n                    <div class="form-group">\n                        <div class="checkbox">\n                            <input type="checkbox" id="enabled" [(ngModel)]="template.enabled" ng-checked="template.enabled"><label for="enabled">Enable</label>\n                        </div>\n                    </div>\n                    \n                    <div class="form-group" *ngIf="showSubject">\n                        <label class="control-label">Subject</label>\n                        <div>\n                            <input type="text" class="form-control form-control-custom" [(ngModel)]="template.subject" value="{{template.subject}}">\n                        </div>\n                    </div>\n\n                    <div class="form-group">\n                        <label class="control-label">Message</label>\n                        <div>\n                            <textarea type="text" class="form-control form-control-custom" [(ngModel)]="template.message" value="{{template.message}}"></textarea>\n                        </div>\n                    </div>\n                </div>\n            </div>\n\n        </ng-template>\n    </ngb-panel>\n</ngb-accordion>\n'},function(e,t,n){"use strict";var o=this&&this.__decorate||function(e,t,n,o){var i,r=arguments.length,s=r<3?t:null===o?o=Object.getOwnPropertyDescriptor(t,n):o;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)s=Reflect.decorate(e,t,n,o);else for(var a=e.length-1;a>=0;a--)(i=e[a])&&(s=(r<3?i(s):r>3?i(t,n,s):i(t,n))||s);return r>3&&s&&Object.defineProperty(t,n,s),s},i=this&&this.__metadata||function(e,t){if("object"==typeof Reflect&&"function"==typeof Reflect.metadata)return Reflect.metadata(e,t)};Object.defineProperty(t,"__esModule",{value:!0});var r=n(0),s=n(7),a=n(172),l=n(3),c=n(3),d=n(3),u=function(){function e(e,t,n,o){this.settingsService=e,this.notificationService=t,this.fb=n,this.testerService=o,this.NotificationType=a.NotificationType}return e.prototype.ngOnInit=function(){var e=this;this.settingsService.getPushbulletNotificationSettings().subscribe(function(t){e.templates=t.notificationTemplates,e.form=e.fb.group({enabled:[t.enabled],channelTag:[t.channelTag],accessToken:[t.accessToken,[s.Validators.required]]})})},e.prototype.onSubmit=function(e){var t=this;if(e.invalid)this.notificationService.error("Please check your entered values");else{var n=e.value;n.notificationTemplates=this.templates,this.settingsService.savePushbulletNotificationSettings(n).subscribe(function(e){e?t.notificationService.success("Successfully saved the Pushbullet settings"):t.notificationService.success("There was an error when saving the Pushbullet settings")})}},e.prototype.test=function(e){var t=this;e.invalid?this.notificationService.error("Please check your entered values"):this.testerService.pushbulletTest(e.value).subscribe(function(e){e?t.notificationService.success("Successfully sent a Pushbullet message"):t.notificationService.error("There was an error when sending the Pushbullet message. Please check your settings")})},e=o([r.Component({template:n(226)}),i("design:paramtypes",[d.SettingsService,c.NotificationService,s.FormBuilder,l.TesterService])],e)}();t.PushbulletComponent=u},function(e,t){e.exports='\n<settings-menu></settings-menu>\n<div *ngIf="form">\n    <fieldset>\n        <legend>Pushbullet Notifications</legend>\n        <div class="col-md-6">\n            <form novalidate [formGroup]="form" (ngSubmit)="onSubmit(form)">\n\n                <div class="form-group">\n                    <div class="checkbox">\n                        <input type="checkbox" id="enable" formControlName="enabled">\n                        <label for="enable">Enabled</label>\n                    </div>\n                </div>\n\n                <small>You can find this here: <a href="https://www.pushbullet.com/#settings/account" target="_blank">https://www.pushbullet.com/#settings/account </a></small>\n                <div class="form-group">\n                    <label for="accessToken" class="control-label">Access Token</label>\n              \n                        <input type="text" class="form-control form-control-custom " id="accessToken" name="accessToken" formControlName="accessToken" [ngClass]="{\'form-error\': form.get(\'accessToken\').hasError(\'required\')}">\n                        <small *ngIf="form.get(\'accessToken\').hasError(\'required\')" class="error-text">The Access Token is required</small>\n                </div>\n\n                <div class="form-group">\n                    <label for="channelTag" class="control-label">Channel Tag</label>\n                    <div>\n                        <input type="text" class="form-control form-control-custom " id="channelTag" name="channelTag" formControlName="channelTag" pTooltip="Optional, this is if you want to send a message to everyone subscribed to a channel">\n                    </div>\n                </div>\n\n               \n\n                <div class="form-group">\n                    <div>\n                        <button [disabled]="form.invalid" type="button" (click)="test(form)" class="btn btn-primary-outline">\n                            Test\n                            <div id="spinner"></div>\n                        </button>\n                    </div>\n                </div>\n\n\n\n                <div class="form-group">\n                    <div>\n                        <button [disabled]="form.invalid" type="submit" id="save" class="btn btn-primary-outline">Submit</button>\n                    </div>\n                </div>\n            </form>\n        </div>\n\n\n        <div class="col-md-6">\n            <notification-templates [templates]="templates" [showSubject]="false"></notification-templates>\n        </div>\n    </fieldset>\n</div>'},function(e,t,n){"use strict";var o=this&&this.__decorate||function(e,t,n,o){var i,r=arguments.length,s=r<3?t:null===o?o=Object.getOwnPropertyDescriptor(t,n):o;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)s=Reflect.decorate(e,t,n,o);else for(var a=e.length-1;a>=0;a--)(i=e[a])&&(s=(r<3?i(s):r>3?i(t,n,s):i(t,n))||s);return r>3&&s&&Object.defineProperty(t,n,s),s},i=this&&this.__metadata||function(e,t){if("object"==typeof Reflect&&"function"==typeof Reflect.metadata)return Reflect.metadata(e,t)};Object.defineProperty(t,"__esModule",{value:!0});var r=n(0),s=n(7),a=n(172),l=n(3),c=n(3),d=n(3),u=function(){function e(e,t,n,o){this.settingsService=e,this.notificationService=t,this.fb=n,this.testerService=o,this.NotificationType=a.NotificationType}return e.prototype.ngOnInit=function(){var e=this;this.settingsService.getPushoverNotificationSettings().subscribe(function(t){e.templates=t.notificationTemplates,e.form=e.fb.group({enabled:[t.enabled],userToken:[t.userToken],accessToken:[t.accessToken,[s.Validators.required]]})})},e.prototype.onSubmit=function(e){var t=this;if(e.invalid)this.notificationService.error("Please check your entered values");else{var n=e.value;n.notificationTemplates=this.templates,this.settingsService.savePushoverNotificationSettings(n).subscribe(function(e){e?t.notificationService.success("Successfully saved the Pushover settings"):t.notificationService.success("There was an error when saving the Pushover settings")})}},e.prototype.test=function(e){var t=this;e.invalid?this.notificationService.error("Please check your entered values"):this.testerService.pushoverTest(e.value).subscribe(function(e){e?t.notificationService.success("Successfully sent a Pushover message"):t.notificationService.error("There was an error when sending the Pushover message. Please check your settings")})},e=o([r.Component({template:n(228)}),i("design:paramtypes",[d.SettingsService,c.NotificationService,s.FormBuilder,l.TesterService])],e)}();t.PushoverComponent=u},function(e,t){e.exports='\n<settings-menu></settings-menu>\n<div *ngIf="form">\n    <fieldset>\n        <legend>Pushover Notifications</legend>\n        <div class="col-md-6">\n            <form novalidate [formGroup]="form" (ngSubmit)="onSubmit(form)">\n\n                <div class="form-group">\n                    <div class="checkbox">\n                        <input type="checkbox" id="enable" formControlName="enabled">\n                        <label for="enable">Enabled</label>\n                    </div>\n                </div>\n\n      \n                <div class="form-group">\n                    <label for="accessToken" class="control-label">Access Token</label>\n                   \n                        <input type="text" class="form-control form-control-custom " id="accessToken" name="accessToken" [ngClass]="{\'form-error\': form.get(\'accessToken\').hasError(\'required\')}" formControlName="accessToken" pTooltip="Enter your API Key from Pushover.">\n                    <small *ngIf="form.get(\'accessToken\').hasError(\'required\')" class="error-text">The Access Token is required</small>\n                </div>\n\n                <div class="form-group">\n                    <label for="userToken" class="control-label">User Token</label>\n                    <div>\n                        <input type="text" class="form-control form-control-custom " id="userToken" name="userToken" formControlName="userToken" pTooltip="Your user or group key from Pushover.">\n                    </div>\n                </div>\n\n               \n\n                <div class="form-group">\n                    <div>\n                        <button [disabled]="form.invalid" type="button" (click)="test(form)" class="btn btn-primary-outline">\n                            Test\n                            <div id="spinner"></div>\n                        </button>\n                    </div>\n                </div>\n\n\n\n                <div class="form-group">\n                    <div>\n                        <button [disabled]="form.invalid" type="submit" id="save" class="btn btn-primary-outline">Submit</button>\n                    </div>\n                </div>\n            </form>\n        </div>\n\n\n        <div class="col-md-6">\n            <notification-templates [templates]="templates" [showSubject]="false"></notification-templates>\n        </div>\n    </fieldset>\n</div>'},function(e,t,n){"use strict";var o=this&&this.__decorate||function(e,t,n,o){var i,r=arguments.length,s=r<3?t:null===o?o=Object.getOwnPropertyDescriptor(t,n):o;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)s=Reflect.decorate(e,t,n,o);else for(var a=e.length-1;a>=0;a--)(i=e[a])&&(s=(r<3?i(s):r>3?i(t,n,s):i(t,n))||s);return r>3&&s&&Object.defineProperty(t,n,s),s},i=this&&this.__metadata||function(e,t){if("object"==typeof Reflect&&"function"==typeof Reflect.metadata)return Reflect.metadata(e,t)};Object.defineProperty(t,"__esModule",{value:!0});var r=n(0),s=n(7),a=n(172),l=n(3),c=n(3),d=n(3),u=function(){function e(e,t,n,o){this.settingsService=e,this.notificationService=t,this.fb=n,this.testerService=o,this.NotificationType=a.NotificationType}return e.prototype.ngOnInit=function(){var e=this;this.settingsService.getSlackNotificationSettings().subscribe(function(t){e.templates=t.notificationTemplates,e.form=e.fb.group({enabled:[t.enabled],username:[t.username],webhookUrl:[t.webhookUrl,[s.Validators.required]],iconEmoji:[t.iconEmoji],iconUrl:[t.iconUrl],channel:[t.channel]})})},e.prototype.onSubmit=function(e){var t=this;if(e.invalid)this.notificationService.error("Please check your entered values");else{var n=e.value;n.iconEmoji&&n.iconUrl?this.notificationService.error("You cannot have a Emoji icon and a URL icon"):(n.notificationTemplates=this.templates,this.settingsService.saveSlackNotificationSettings(n).subscribe(function(e){e?t.notificationService.success("Successfully saved the Slack settings"):t.notificationService.success("There was an error when saving the Slack settings")}))}},e.prototype.test=function(e){var t=this;if(e.invalid)this.notificationService.error("Please check your entered values");else{var n=e.value;n.iconEmoji&&n.iconUrl?this.notificationService.error("You cannot have a Emoji icon and a URL icon"):this.testerService.slackTest(n).subscribe(function(e){e?t.notificationService.success("Successfully sent a Slack message, please check the slack channel"):t.notificationService.error("There was an error when sending the Slack message. Please check your settings")})}},e=o([r.Component({template:n(230)}),i("design:paramtypes",[d.SettingsService,c.NotificationService,s.FormBuilder,l.TesterService])],e)}();t.SlackComponent=u},function(e,t){e.exports='\n<settings-menu></settings-menu>\n<div *ngIf="form">\n    <fieldset>\n        <legend>Slack Notifications</legend>\n        <div class="col-md-6">\n            <form novalidate [formGroup]="form" (ngSubmit)="onSubmit(form)">\n\n                <div class="form-group">\n                   \n                    <div class="checkbox">\n                        <input type="checkbox" id="enable" formControlName="enabled">\n                        <label for="enable">Enabled</label>\n                    </div>\n                </div>\n\n \n                <div class="form-group">\n                    \n                    <label for="webhookUrl" class="control-label">Webhook Url</label>\n                    <div>\n                        \n                        <small class="control-label"> Click <a target="_blank" href="https://my.slack.com/services/new/incoming-webhook/">Here</a> and follow the guide. You will then have a Webhook Url</small>\n                        <input type="text" class="form-control form-control-custom " id="webhookUrl" name="webhookUrl" formControlName="webhookUrl"  [ngClass]="{\'form-error\': form.get(\'webhookUrl\').hasError(\'required\')}">\n                        <small *ngIf="form.get(\'webhookUrl\').hasError(\'required\')" class="error-text">The Webhook Url is required</small>\n                    </div>\n                </div>\n\n                <div class="form-group">\n                    <label for="username" class="control-label">Username Override</label>\n                    <div>\n                        <input type="text" class="form-control form-control-custom " id="username" name="username" formControlName="username" pTooltip="Optional, this will override the username you used for the Webhook. Default is Ombi">\n                    </div>\n                </div>\n                <div class="form-group">\n                    <label for="channel" class="control-label">Channel Override</label>\n                    <div>\n                        <input type="text" class="form-control form-control-custom " id="channel" name="channel" formControlName="channel" pTooltip="Optional, this will override the channel you used for the Webhook">\n                    </div>\n                </div>\n\n                <div class="form-group">\n                    <label for="iconEmoji" class="control-label">Emoji Icon Override</label>\n                    <div>\n                        <input type="text" class="form-control form-control-custom " id="iconEmoji" name="iconEmoji" formControlName="iconEmoji" pTooltip="Optional, this will override the Icon you used for the Webhook">\n                    </div>\n                </div>\n                <div class="form-group">\n                    <label for="iconUrl" class="control-label">Url Icon Override</label>\n                    <div>\n                        <input type="text" class="form-control form-control-custom " id="iconUrl" name="iconUrl" formControlName="iconUrl" pTooltip="Optional, this will override the Icon you used for the Webhook">\n                    </div>\n                </div>\n                \n                <small>You can find more details about the Slack API <a target="_blank" href="https://api.slack.com/custom-integrations/incoming-webhooks">Here</a></small>\n               \n\n                <div class="form-group">\n                    <div>\n                        <button [disabled]="form.invalid" type="button" (click)="test(form)" class="btn btn-primary-outline">\n                            Test\n                            <div id="spinner"></div>\n                        </button>\n                    </div>\n                </div>\n\n\n\n                <div class="form-group">\n                    <div>\n                        <button [disabled]="form.invalid" type="submit" id="save" class="btn btn-primary-outline">Submit</button>\n                    </div>\n                </div>\n            </form>\n        </div>\n\n\n        <div class="col-md-6">\n            <notification-templates [templates]="templates" [showSubject]="false"></notification-templates>\n        </div>\n    </fieldset>\n</div>'},function(e,t,n){"use strict";var o=this&&this.__decorate||function(e,t,n,o){var i,r=arguments.length,s=r<3?t:null===o?o=Object.getOwnPropertyDescriptor(t,n):o;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)s=Reflect.decorate(e,t,n,o);else for(var a=e.length-1;a>=0;a--)(i=e[a])&&(s=(r<3?i(s):r>3?i(t,n,s):i(t,n))||s);return r>3&&s&&Object.defineProperty(t,n,s),s},i=this&&this.__metadata||function(e,t){if("object"==typeof Reflect&&"function"==typeof Reflect.metadata)return Reflect.metadata(e,t)};Object.defineProperty(t,"__esModule",{value:!0});var r=n(0),s=n(7),a=n(172),l=n(3),c=n(3),d=n(3),u=function(){function e(e,t,n,o){this.settingsService=e,this.notificationService=t,this.fb=n,this.testerService=o,this.NotificationType=a.NotificationType}return e.prototype.ngOnInit=function(){var e=this;this.settingsService.getTelegramNotificationSettings().subscribe(function(t){e.templates=t.notificationTemplates,e.form=e.fb.group({enabled:[t.enabled],botApi:[t.botApi,[s.Validators.required]],chatId:[t.chatId,[s.Validators.required]],parseMode:[t.parseMode,[s.Validators.required]]})})},e.prototype.onSubmit=function(e){var t=this;if(e.invalid)this.notificationService.error("Please check your entered values");else{var n=e.value;n.notificationTemplates=this.templates,this.settingsService.saveTelegramNotificationSettings(n).subscribe(function(e){e?t.notificationService.success("Successfully saved the Telegram settings"):t.notificationService.success("There was an error when saving the Telegram settings")})}},e.prototype.test=function(e){var t=this;e.invalid?this.notificationService.error("Please check your entered values"):this.testerService.telegramTest(e.value).subscribe(function(e){e?t.notificationService.success("Successfully sent a Telegram message, please check the Telegram channel"):t.notificationService.error("There was an error when sending the Telegram message. Please check your settings")})},e=o([r.Component({template:n(232)}),i("design:paramtypes",[d.SettingsService,c.NotificationService,s.FormBuilder,l.TesterService])],e)}();t.TelegramComponent=u},function(e,t){e.exports='<settings-menu>\n</settings-menu>\n<div *ngIf="form">\n    <fieldset>\n        <legend>Telegram Notifications</legend>\n        <div class="col-md-6">\n            <form novalidate [formGroup]="form" (ngSubmit)="onSubmit(form)">\n\n                <div class="form-group">\n                    <div class="checkbox">\n                        <input type="checkbox" id="enable" formControlName="enabled">\n                        <label for="enable">Enabled</label>\n                    </div>\n                </div>\n\n\n                <div class="form-group">\n                    <label for="botApi" class="control-label">Bot API</label>\n                    <input type="text" class="form-control form-control-custom " id="botApi" name="botApi" formControlName="botApi" [ngClass]="{\'form-error\': form.get(\'botApi\').hasError(\'required\')}">\n                    <small *ngIf="form.get(\'botApi\').hasError(\'required\')" class="error-text">The Bot API is required</small>\n                    <small>You need a bot for Telegram notifications, You can find out how to create a bot\n                        <a href="https://core.telegram.org/bots#6-botfather">here</a>.</small>\n\n                </div>\n\n\n                <div class="form-group">\n                    <label for="chatId" class="control-label">Chat Id</label>\n                    <input type="text" class="form-control form-control-custom " id="chatId" name="chatId" formControlName="chatId" [ngClass]="{\'form-error\': form.get(\'chatId\').hasError(\'required\')}">\n                    <small *ngIf="form.get(\'chatId\').hasError(\'required\')" class="error-text">The Chat Id is required</small>\n                    <small>This is the Chat ID from Telegram. You can get the Chat Id from\n                        <a href="https://telegram.me/get_id_bot">here</a>. This also supports Group Chat Id\'s.</small>\n                </div>\n\n                <div class="form-group">\n                    <p-radioButton name="parseMode" value="markdown" formControlName="parseMode" label="Markdown Formatting"></p-radioButton>\n                </div>\n                <div class="form-group">\n                    <p-radioButton name="parseMode" value="html" formControlName="parseMode" label="Html Formatting"></p-radioButton>\n                </div>\n                <small>Select a formatting option for the messages, you can view the supported formatting <a href="https://core.telegram.org/bots/api#formatting-options">here</a>.</small>\n\n\n                <div class="form-group">\n                    <div>\n                        <button [disabled]="form.invalid" type="button" (click)="test(form)" class="btn btn-primary-outline">\n                            Test\n                            <div id="spinner"></div>\n                        </button>\n                    </div>\n                </div>\n\n                <div class="form-group">\n                    <div>\n                        <button [disabled]="form.invalid" type="submit" id="save" class="btn btn-primary-outline">Submit</button>\n                    </div>\n                </div>\n            </form>\n        </div>\n\n\n        <div class="col-md-6">\n            <notification-templates [templates]="templates" [showSubject]="false"></notification-templates>\n        </div>\n    </fieldset>\n</div>'},function(e,t,n){"use strict";var o=this&&this.__decorate||function(e,t,n,o){var i,r=arguments.length,s=r<3?t:null===o?o=Object.getOwnPropertyDescriptor(t,n):o;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)s=Reflect.decorate(e,t,n,o);else for(var a=e.length-1;a>=0;a--)(i=e[a])&&(s=(r<3?i(s):r>3?i(t,n,s):i(t,n))||s);return r>3&&s&&Object.defineProperty(t,n,s),s},i=this&&this.__metadata||function(e,t){if("object"==typeof Reflect&&"function"==typeof Reflect.metadata)return Reflect.metadata(e,t)};Object.defineProperty(t,"__esModule",{value:!0});var r=n(0),s=n(7),a=n(3),l=n(3),c=function(){function e(e,t,n){this.settingsService=e,this.notificationService=t,this.fb=n}return e.prototype.ngOnInit=function(){var e=this;this.settingsService.getOmbi().subscribe(function(t){e.form=e.fb.group({collectAnalyticData:[t.collectAnalyticData],apiKey:[t.apiKey],ignoreCertificateErrors:[t.ignoreCertificateErrors],baseUrl:[t.baseUrl],doNotSendNotificationsForAutoApprove:[t.doNotSendNotificationsForAutoApprove]})})},e.prototype.refreshApiKey=function(){var e=this;this.settingsService.resetOmbiApi().subscribe(function(t){e.form.controls.apiKey.patchValue(t)})},e.prototype.onSubmit=function(e){var t=this;if(e.invalid)this.notificationService.error("Please check your entered values");else{var n=e.value;n.baseUrl.length>0&&!n.baseUrl.startsWith("/")?this.notificationService.error("Please ensure your base url starts with a '/'"):this.settingsService.saveOmbi(e.value).subscribe(function(e){e?t.notificationService.success("Successfully saved Ombi settings"):t.notificationService.success("There was an error when saving the Ombi settings")})}},e.prototype.successfullyCopied=function(){this.notificationService.success("Copied the Api Key to the clipboard!")},e=o([r.Component({template:n(234)}),i("design:paramtypes",[l.SettingsService,a.NotificationService,s.FormBuilder])],e)}();t.OmbiComponent=c},function(e,t){e.exports='<settings-menu></settings-menu>\n\n<wiki [url]="\'https://github.com/tidusjar/Ombi/wiki/Ombi-Settings\'"></wiki>\n<fieldset *ngIf="form">\n    <legend>Ombi Configuration</legend>\n    <form novalidate [formGroup]="form" (ngSubmit)="onSubmit(form)">\n\n        \x3c!--<div class="form-group">\n            <label for="portNumber" class="control-label">Port</label>\n            <div>\n                <input type="text" class="form-control form-control-custom " id="portNumber" name="Port" placeholder="Port Number" formControlName="port" pTooltip="You will have to restart after changing the port.">\n            </div>\n        </div>--\x3e\n\n        \x3c!--<div *ngIf="form.invalid && form.dirty" class="alert alert-danger">\n            <div>The External URL is incorrect</div>\n        </div>\n        <div class="form-group">\n            <label for="externalUrl" class="control-label">External Url</label>\n            <div>\n                <input type="text" class="form-control form-control-custom " id="externalUrl" name="externalUrl" placeholder="http://ombi.io/" formControlName="externalUrl" tooltipPosition="top" pTooltip="This will be the link that will be in any emails/notifications sent to the users.">\n            </div>\n        </div>--\x3e\n        <div class="col-md-6">\n       \n        <div class="form-group">\n            <label for="baseUrl" class="control-label">Base Url</label>\n            <div>\n                <input type="text" class="form-control form-control-custom" id="baseUrl" name="baseUrl" formControlName="baseUrl">\n            </div>\n        </div>\n\n        <div class="form-group">\n            <label for="ApiKey" class="control-label">Api Key</label>\n            <div class="input-group">\n                <input type="text" class="form-control form-control-custom" id="ApiKey" name="ApiKey" formControlName="apiKey" readonly="readonly" #apiKey>\n\n                <div class="input-group-addon">\n                    <div (click)="refreshApiKey()" id="refreshKey" class="fa fa-refresh" title="Reset API Key" pTooltip="This will invalidate the old API key" ></div>\n                </div>\n\n                <div class="input-group-addon">\n                    <div ngxClipboard [ngxClipboard]="apiKey" class="fa fa-clipboard" (cbOnSuccess)="successfullyCopied()"></div>\n                </div>\n            </div>\n        </div>\n        <br/>\n\n        <div class="form-group">\n            <div class="checkbox">\n                <input type="checkbox" id="doNotSendNotificationsForAutoApprove" name="doNotSendNotificationsForAutoApprove" formControlName="doNotSendNotificationsForAutoApprove">\n                <label for="doNotSendNotificationsForAutoApprove">Do not send Notifications if a User has the Auto Approve permission</label>\n            </div>\n        </div>\n\n        <div class="form-group">\n            <div class="checkbox">\n                <input type="checkbox" id="ignoreCertificateErrors" name="ignoreCertificateErrors" formControlName="ignoreCertificateErrors">\n                <label for="ignoreCertificateErrors" tooltipPosition="top" pTooltip="Enable if you are having connectivity problems over SSL">Ignore any certificate errors</label>\n            </div>\n        </div>\n\n        <div class="form-group">\n            <div class="checkbox">\n                <input type="checkbox" id="CollectAnalyticData" name="CollectAnalyticData" formControlName="collectAnalyticData">\n                <label for="CollectAnalyticData">Allow us to collect anonymous analytical data e.g. browser used</label>\n            </div>\n        </div>\n\n        <div class="form-group">\n            <div>\n                <button [disabled]="form.invalid" type="submit" id="save" class="btn btn-primary-outline">Submit</button>\n            </div>\n        </div>\n        </div>\n    </form>\n</fieldset>\n'},function(e,t,n){"use strict";var o=this&&this.__decorate||function(e,t,n,o){var i,r=arguments.length,s=r<3?t:null===o?o=Object.getOwnPropertyDescriptor(t,n):o;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)s=Reflect.decorate(e,t,n,o);else for(var a=e.length-1;a>=0;a--)(i=e[a])&&(s=(r<3?i(s):r>3?i(t,n,s):i(t,n))||s);return r>3&&s&&Object.defineProperty(t,n,s),s},i=this&&this.__metadata||function(e,t){if("object"==typeof Reflect&&"function"==typeof Reflect.metadata)return Reflect.metadata(e,t)};Object.defineProperty(t,"__esModule",{value:!0});var r=n(0);n(185);var s=n(90),a=n(3),l=function(){function e(e,t,n,o,i){this.settingsService=e,this.notificationService=t,this.plexService=n,this.testerService=o,this.jobService=i,this.serversButton=!1,this.advanced=!1,this.subscriptions=new s.Subject}return e.prototype.ngOnInit=function(){var e=this;this.settingsService.getPlex().subscribe(function(t){e.settings=t})},e.prototype.requestServers=function(e){var t=this;this.plexService.getServers(this.username,this.password).takeUntil(this.subscriptions).subscribe(function(e){e.success?(t.loadedServers=e,t.serversButton=!0,t.notificationService.success("Found the servers! Please select one!")):t.notificationService.warning("Error When Requesting Plex Servers","Please make sure your username and password are correct")})},e.prototype.selectServer=function(e,t){t.ip=e.localAddresses.split(",")[0],t.name=e.name,t.machineIdentifier=e.machineIdentifier,t.plexAuthToken=e.accessToken,t.port=parseInt(e.port),t.ssl="http"!==e.scheme,this.notificationService.success("Selected "+t.name+"!")},e.prototype.testPlex=function(e){var t=this;this.testerService.plexTest(e).subscribe(function(n){!0===n?t.notificationService.success("Successfully connected to the Plex server "+e.name+"!"):t.notificationService.error("We could not connect to the Plex server  "+e.name+"!")})},e.prototype.addTab=function(){null==this.settings.servers&&(this.settings.servers=[]),this.settings.servers.push({name:"New*",id:Math.floor(1e5*Math.random()+1)})},e.prototype.removeServer=function(e){var t=this.settings.servers.indexOf(e,0);t>-1&&this.settings.servers.splice(t,1)},e.prototype.loadLibraries=function(e){var t=this;null!=e.ip?this.plexService.getLibraries(e).subscribe(function(n){e.plexSelectedLibraries=[],n.successful?n.data.mediaContainer.directory.forEach(function(t){var n={key:t.key,title:t.title,enabled:!1};e.plexSelectedLibraries.push(n)}):t.notificationService.error(n.message)},function(e){t.notificationService.error(e)}):this.notificationService.error("Plex is not yet configured correctly")},e.prototype.save=function(){var e=this,t=this.settings.servers.filter(function(e){return""!==e.name});this.settings.servers=t,this.settingsService.savePlex(this.settings).subscribe(function(t){t?e.notificationService.success("Successfully saved Plex settings"):e.notificationService.success("There was an error when saving the Plex settings")})},e.prototype.runCacher=function(){var e=this;this.jobService.runPlexCacher().subscribe(function(t){t&&e.notificationService.success("Triggered the Plex Content Cacher")})},e.prototype.ngOnDestroy=function(){this.subscriptions.next(),this.subscriptions.complete()},e=o([r.Component({template:n(236)}),i("design:paramtypes",[a.SettingsService,a.NotificationService,a.PlexService,a.TesterService,a.JobService])],e)}();t.PlexComponent=l},function(e,t){e.exports='<settings-menu></settings-menu>\n<div class="row">\n    <div class="col-md-2 col-md-push-10">\n        <span style="vertical-align: top;">Advanced</span>\n        <p-inputSwitch id="customInputSwitch" [(ngModel)]="advanced"></p-inputSwitch>\n    </div>\n</div>\n<div *ngIf="settings">\n    <fieldset>\n        <legend>Plex Configuration</legend>\n\n        <div class="row">\n\n            <div class="form-group col-md-3">\n                <div class="checkbox">\n                    <input type="checkbox" id="enable" [(ngModel)]="settings.enable" [checked]="settings.enable">\n                    <label for="enable">Enable</label>\n                </div>\n            </div>\n            <div class="col-md-2 col-md-push-7">\n                <button type="button" (click)="addTab()" class="btn btn-success-outline">Add Server</button>\n            </div>\n        </div>\n\n        <ngb-tabset>\n\n            <div *ngFor="let server of settings.servers">\n                <ngb-tab [id]="server.id" [title]="server.name">\n                    <ng-template ngbTabContent>\n                        <br />\n                        <br />\n                        <div class="col-md-2 " style="float: right;">\n                            <button type="button" (click)="removeServer(server)" class="btn btn-danger-outline">Remove Server</button>\n                        </div>\n                        <br />\n                        <br />\n\n                        <div class="col-md-6">\n                            \x3c!-- Main Content --\x3e\n                            <div class="form-group">\n                                <label for="name" class="control-label">Server name</label>\n                                <div>\n                                    <input type="text" class="form-control form-control-custom " id="name" name="name" placeholder="Server" [(ngModel)]="server.name"\n                                        value="{{server.name}}">\n                                </div>\n                            </div>\n\n                            <div class="form-group">\n                                <label for="Ip" class="control-label">Hostname or IP</label>\n                                <div>\n                                    <input type="text" class="form-control form-control-custom " id="Ip" name="Ip" placeholder="localhost" [(ngModel)]="server.ip"\n                                        value="{{server.ip}}">\n                                </div>\n                            </div>\n\n                            <div class="form-group">\n                                <label for="portNumber" class="control-label">Port</label>\n                                <div>\n                                    <input type="text" [(ngModel)]="server.port" class="form-control form-control-custom " id="portNumber" name="Port" placeholder="Port Number"\n                                        value="{{server.port}}">\n                                </div>\n                            </div>\n\n                            <div class="form-group">\n                                <div class="checkbox">\n                                    <input type="checkbox" id="ssl" [(ngModel)]="server.ssl" [checked]="server.ssl">\n                                    <label for="ssl">SSL</label>\n                                </div>\n                            </div>\n\n\n                            <div class="form-group">\n                                <label for="authToken" class="control-label">Plex Authorization Token</label>\n                                <div class="">\n                                    <input type="text" class="form-control-custom form-control" id="authToken" [(ngModel)]="server.plexAuthToken" placeholder="Plex Auth Token"\n                                        value="{{server.plexAuthToken}}">\n                                </div>\n                            </div>\n\n                            <div class="form-group">\n                                <label for="MachineIdentifier" class="control-label">Machine Identifier</label>\n                                <div class="">\n                                    <input type="text" class="form-control-custom form-control" id="MachineIdentifier" name="MachineIdentifier" [(ngModel)]="server.machineIdentifier"\n                                        value="{{server.machineIdentifier}}">\n                                </div>\n                            </div>\n                        </div>\n\n                        <div class="col-md-6">\n                            <div class="form-group">\n                                <label for="username" class="control-label">Username and Password</label>\n                                <div>\n                                    <input type="text" class="form-control form-control-custom" id="username" [(ngModel)]="username" placeholder="username">\n                                </div>\n                                <br />\n                                <div>\n                                    <input type="password" class="form-control form-control-custom" id="password" [(ngModel)]="password" placeholder="Password">\n                                </div>\n                            </div>\n\n                            <div class="form-group">\n                                <div>\n                                    <button id="requestToken" (click)="requestServers(server)" class="btn btn-primary-outline">Load Servers\n                                        <i class="fa fa-key"></i>\n                                    </button>\n                                </div>\n                            </div>\n                            <br />\n                            <br />\n                            <div class="form-group" *ngIf="loadedServers">\n                                <label for="username" class="control-label">Please select the server</label>\n                                <br />\n                                <div class="btn-group">\n                                    <div class="btn-group">\n                                        <a [attr.disabled]="!serversButton ? true : null" href="#" class="btn btn-info-outline dropdown-toggle" data-toggle="dropdown"\n                                            aria-expanded="false">\n                                            Servers\n                                            <span class="caret"></span>\n                                        </a>\n\n                                        <ul *ngIf="loadedServers" class="dropdown-menu">\n                                            <li *ngFor="let s of loadedServers.servers.server">\n                                                <a (click)="selectServer(s,server)">{{s.name}}</a>\n                                            </li>\n                                        </ul>\n                                    </div>\n                                </div>\n                            </div>\n                            <hr/>\n                            <label>Please select the libraries you want Ombi to look in for content</label>\n                            <br />\n                            <small>Note: if nothing is selected, we will monitor all libraries</small>\n                            <div class="form-group">\n                                <div>\n                                    <button (click)="loadLibraries(server)" class="btn btn-primary-outline">Load Libraries\n                                        <i class="fa fa-film"></i>\n                                    </button>\n                                </div>\n                            </div>\n                            <div *ngIf="server.plexSelectedLibraries">\n                                <div *ngFor="let lib of server.plexSelectedLibraries">\n                                    <div class="form-group">\n                                        <div class="checkbox">\n                                            <input type="checkbox" id="{{lib.title}}" [(ngModel)]="lib.enabled" [checked]="lib.enabled">\n                                            <label for="{{lib.title}}">{{lib.title}}</label>\n                                        </div>\n                                    </div>\n                                </div>\n                            </div>\n\n                            <div class="form-group" *ngIf="advanced">\n                                <label for="episodeBatchSize" class="control-label">Episode Batch Size</label>\n                                <div>\n                                    <input type="number" class="form-control-custom form-small form-control" id="episodeBatchSize" name="episodeBatchSize" [(ngModel)]="server.episodeBatchSize"\n                                        value="{{server.episodeBatchSize}}" tooltipPosition="top" pTooltip="This is used when we cache the episodes, we cache in batches of 50 by default, you can configure how many we do at a time here">\n                                </div>\n                            </div>\n\n                            <div class="form-group">\n                                <div>\n                                    <button id="testPlex" type="button" (click)="testPlex(server)" class="btn btn-primary-outline">\n                                        Test Connectivity\n                                        <div id="spinner"></div>\n                                    </button>\n                                </div>\n                            </div>\n\n                        </div>\n\n                    </ng-template>\n                </ngb-tab>\n            </div>\n        </ngb-tabset>\n        <div class="col-md-1">\n                <div class="form-group">\n                    <div>\n                        <button (click)="save()" type="submit" id="save" class="btn btn-primary-outline">Submit</button>\n                    </div>\n                </div>\n            </div>\n            <div class="col-md-1">\n                    <div class="form-group">\n                        <div>\n                            <button (click)="runCacher()" type="button" id="save" class="btn btn-primary-outline">Manually Run Cacher</button>\n                        </div>\n                    </div>\n                </div>\n    </fieldset>\n</div>\n'},function(e,t,n){"use strict";var o=this&&this.__decorate||function(e,t,n,o){var i,r=arguments.length,s=r<3?t:null===o?o=Object.getOwnPropertyDescriptor(t,n):o;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)s=Reflect.decorate(e,t,n,o);else for(var a=e.length-1;a>=0;a--)(i=e[a])&&(s=(r<3?i(s):r>3?i(t,n,s):i(t,n))||s);return r>3&&s&&Object.defineProperty(t,n,s),s},i=this&&this.__metadata||function(e,t){if("object"==typeof Reflect&&"function"==typeof Reflect.metadata)return Reflect.metadata(e,t)};Object.defineProperty(t,"__esModule",{value:!0});var r=n(0),s=n(7),a=n(3),l=n(3),c=n(3),d=n(3),u=function(){function e(e,t,n,o,i){this.settingsService=e,this.radarrService=t,this.notificationService=n,this.fb=o,this.testerService=i,this.advanced=!1}return e.prototype.ngOnInit=function(){var e=this;this.settingsService.getRadarr().subscribe(function(t){e.form=e.fb.group({enabled:[t.enabled],apiKey:[t.apiKey,[s.Validators.required]],defaultQualityProfile:[t.defaultQualityProfile,[s.Validators.required]],defaultRootPath:[t.defaultRootPath,[s.Validators.required]],ssl:[t.ssl],subDir:[t.subDir],ip:[t.ip,[s.Validators.required]],port:[t.port,[s.Validators.required]],addOnly:[t.addOnly],minimumAvailability:[t.minimumAvailability,[s.Validators.required]]}),t.defaultQualityProfile&&e.getProfiles(e.form),t.defaultRootPath&&e.getRootFolders(e.form)}),this.qualities=[],this.qualities.push({name:"Please Select",id:-1}),this.rootFolders=[],this.rootFolders.push({path:"Please Select",id:-1}),this.minimumAvailabilityOptions=[{name:"Announced",value:"Announced"},{name:"In Cinemas",value:"InCinemas"},{name:"Physical / Web",value:"Released"},{name:"PreDb",value:"PreDb"}]},e.prototype.getProfiles=function(e){var t=this;this.profilesRunning=!0,this.radarrService.getQualityProfiles(e.value).subscribe(function(e){t.qualities=e,t.qualities.unshift({name:"Please Select",id:-1}),t.profilesRunning=!1,t.notificationService.success("Successfully retrieved the Quality Profiles")})},e.prototype.getRootFolders=function(e){var t=this;this.rootFoldersRunning=!0,this.radarrService.getRootFolders(e.value).subscribe(function(e){t.rootFolders=e,t.rootFolders.unshift({path:"Please Select",id:-1}),t.rootFoldersRunning=!1,t.notificationService.success("Successfully retrieved the Root Folders")})},e.prototype.test=function(e){var t=this;if(e.invalid)this.notificationService.error("Please check your entered values");else{var n=e.value;this.testerService.radarrTest(n).subscribe(function(e){!0===e?t.notificationService.success("Successfully connected to Radarr!"):t.notificationService.error("We could not connect to Radarr!")})}},e.prototype.onSubmit=function(e){var t=this;if(e.invalid)this.notificationService.error("Please check your entered values");else if("-1"!==e.controls.defaultQualityProfile.value&&"Please Select"!==e.controls.defaultRootPath.value){var n=e.value;this.settingsService.saveRadarr(n).subscribe(function(e){e?t.notificationService.success("Successfully saved Radarr settings"):t.notificationService.success("There was an error when saving the Radarr settings")})}else this.notificationService.error("Please check your entered values")},e=o([r.Component({template:n(238)}),i("design:paramtypes",[d.SettingsService,a.RadarrService,c.NotificationService,s.FormBuilder,l.TesterService])],e)}();t.RadarrComponent=u},function(e,t){e.exports='\n<settings-menu></settings-menu>\n<div *ngIf="form">\n    <fieldset>\n        <legend>Radarr Settings</legend>\n        <div style="float: right;">\n            <span style="vertical-align: top;">Advanced</span>\n            <p-inputSwitch id="customInputSwitch" [(ngModel)]="advanced"></p-inputSwitch>\n        </div>\n        <form novalidate [formGroup]="form" (ngSubmit)="onSubmit(form)" style="padding-top:5%;">\n            <div class="col-md-6">\n                <div class="form-group">\n                    <div class="checkbox">\n                        <input type="checkbox" id="enable" formControlName="enabled" ng-checked="form.enabled">\n                        <label for="enable">Enable</label>\n                    </div>\n                </div>\n\n\n\n                <div class="form-group">\n                    <label for="Ip" class="control-label">Hostname or IP</label>\n\n                        <input type="text" class="form-control form-control-custom " id="Ip" name="Ip" placeholder="localhost" formControlName="ip"  [ngClass]="{\'form-error\': form.get(\'ip\').hasError(\'required\')}">\n                        <small *ngIf="form.get(\'ip\').hasError(\'required\')" class="error-text">The IP/Hostname is required</small>\n                </div>\n\n                <div class="form-group">\n                    <label for="portNumber" class="control-label">Port</label>\n\n                        <input type="text" class="form-control form-control-custom " formControlName="port" id="portNumber" name="Port" placeholder="Port Number"  [ngClass]="{\'form-error\': form.get(\'port\').hasError(\'required\')}">\n                        <small *ngIf="form.get(\'port\').hasError(\'required\')" class="error-text">The Port is required</small>\n                </div>\n\n\n                <div class="form-group">\n                    <label for="ApiKey" class="control-label">API Key</label>\n                    \n                        <input type="text" class="form-control form-control-custom "  [ngClass]="{\'form-error\': form.get(\'apiKey\').hasError(\'required\')}" id="ApiKey" name="ApiKey" formControlName="apiKey">\n                        <small *ngIf="form.get(\'apiKey\').hasError(\'required\')" class="error-text">The API Key is required</small>\n                </div>\n                <div class="form-group">\n                    <div class="checkbox">\n\n                        <input type="checkbox" id="Ssl" name="Ssl" formControlName="ssl"><label for="Ssl">SSL</label>\n\n                    </div>\n                </div>\n                <div class="form-group">\n                    <label for="SubDir" class="control-label">Base Url</label>\n                    <div>\n                        <input type="text" class="form-control form-control-custom" formControlName="subDir" id="SubDir" name="SubDir">\n                    </div>\n                </div>\n            </div>\n            <div class="col-md-6">\n                <div class="form-group">\n                    <div>\n                        <button (click)="getProfiles(form)" type="button" class="btn btn-primary-outline">Get Quality Profiles <span *ngIf="profilesRunning" class="fa fa-spinner fa-spin"> </span></button>\n                    </div>\n                </div>\n                <div class="form-group">\n                    <label for="select" class="control-label">Quality Profiles</label>\n                    <div id="profiles">\n                        <select formControlName="defaultQualityProfile" class="form-control form-control-custom" id="select"  [ngClass]="{\'form-error\': form.get(\'defaultQualityProfile\').hasError(\'required\')}">\n                            <option *ngFor="let quality of qualities" value="{{quality.id}}">{{quality.name}}</option>\n                        </select>\n                    </div>\n                    <small *ngIf="form.get(\'defaultQualityProfile\').hasError(\'required\')" class="error-text">A Default Quality Profile is required</small>\n                </div>\n\n                <div class="form-group">\n                    <div>\n                        <button (click)="getRootFolders(form)" type="button" class="btn btn-primary-outline">Get Root Folders <span *ngIf="rootFoldersRunning" class="fa fa-spinner fa-spin"></span></button>\n\n                    </div>\n\n                </div>\n                <div class="form-group">\n                    <label for="rootFolders" class="control-label">Default Root Folders</label>\n                    <div id="rootFolders">\n                        <select formControlName="defaultRootPath" class="form-control form-control-custom"  [ngClass]="{\'form-error\': form.get(\'defaultRootPath\').hasError(\'required\')}">\n                            <option *ngFor="let folder of rootFolders" value="{{folder.path}}" >{{folder.path}}</option>\n                        </select>\n                    </div>                    \n                    <small *ngIf="form.get(\'defaultRootPath\').hasError(\'required\')" class="error-text">A Default Root Path is required</small>\n                </div>\n\n                <div class="form-group">\n                    <label for="rootFolders" class="control-label">Default Minimum Availability</label>\n                    <div id="rootFolders">\n                        <select formControlName="minimumAvailability" class="form-control form-control-custom" [ngClass]="{\'form-error\': form.get(\'minimumAvailability\').hasError(\'required\')}">\n                            <option *ngFor="let min of minimumAvailabilityOptions" value="{{min.value}}">{{min.name}}</option>\n                        </select>\n                    </div>\n                    \n                    <small *ngIf="form.get(\'minimumAvailability\').hasError(\'required\')" type="button" class="error-text">A Default Minimum Availability is required</small>\n                </div>\n\n                <div class="form-group" *ngIf="advanced" style="color:#ff761b">\n                    <div class="checkbox">\n                        <input type="checkbox" id="addOnly" formControlName="addOnly">\n                        <label for="addOnly">Do not search</label>\n                    </div>\n                </div>\n                <div class="form-group">\n                    <div>\n                        <button type="button" [disabled]="form.invalid" (click)="test(form)" class="btn btn-primary-outline">Test Connectivity <span id="spinner"></span></button>\n                    </div>\n                </div>\n\n\n                <div class="form-group">\n                    <div>\n                        <button type="submit" [disabled]="form.invalid" class="btn btn-primary-outline ">Submit</button>\n                    </div>\n                </div>\n            </div>\n        </form>\n    </fieldset>\n</div>\n'},function(e,t,n){"use strict";var o=this&&this.__decorate||function(e,t,n,o){var i,r=arguments.length,s=r<3?t:null===o?o=Object.getOwnPropertyDescriptor(t,n):o;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)s=Reflect.decorate(e,t,n,o);else for(var a=e.length-1;a>=0;a--)(i=e[a])&&(s=(r<3?i(s):r>3?i(t,n,s):i(t,n))||s);return r>3&&s&&Object.defineProperty(t,n,s),s},i=this&&this.__metadata||function(e,t){if("object"==typeof Reflect&&"function"==typeof Reflect.metadata)return Reflect.metadata(e,t)};Object.defineProperty(t,"__esModule",{value:!0});var r=n(0),s=n(7),a=n(3),l=n(3),c=n(3),d=function(){function e(e,t,n,o){this.settingsService=e,this.notificationService=t,this.testerService=n,this.fb=o}return e.prototype.ngOnInit=function(){var e=this;this.settingsService.getSickRageSettings().subscribe(function(t){e.form=e.fb.group({enabled:[t.enabled],apiKey:[t.apiKey,[s.Validators.required]],qualityProfile:[t.qualityProfile,[s.Validators.required]],ssl:[t.ssl],subDir:[t.subDir],ip:[t.ip,[s.Validators.required]],port:[t.port,[s.Validators.required]]}),e.qualities=t.qualities})},e.prototype.test=function(e){var t=this;if(e.invalid)this.notificationService.error("Please check your entered values");else{var n=e.value;this.testerService.sickrageTest(n).subscribe(function(e){e?t.notificationService.success("Successfully connected to SickRage!"):t.notificationService.error("We could not connect to SickRage!")})}},e.prototype.onSubmit=function(e){var t=this;e.invalid?this.notificationService.error("Please check your entered values"):this.settingsService.saveSickRageSettings(e.value).subscribe(function(e){e?t.notificationService.success("Successfully saved SickRage settings"):t.notificationService.error("There was an error when saving the SickRage settings")})},e=o([r.Component({template:n(240)}),i("design:paramtypes",[c.SettingsService,l.NotificationService,a.TesterService,s.FormBuilder])],e)}();t.SickRageComponent=d},function(e,t){e.exports='\n<settings-menu></settings-menu>\n<div *ngIf="form">\n    <fieldset>\n        <legend>SickRage Settings</legend>\n        <form novalidate [formGroup]="form" (ngSubmit)="onSubmit(form)" style="padding-top:5%;">\n\n            <div class="col-md-6">\n                <div class="form-group">\n                    <div class="checkbox">\n                        <input type="checkbox" id="enable" formControlName="enabled">\n                        <label for="enable">Enable</label>\n                    </div>\n                </div>\n\n                <div class="form-group">\n                    <label for="Ip" class="control-label">Hostname or IP</label>\n                    \n                        <input type="text" class="form-control form-control-custom " formControlName="ip" id="Ip" name="Ip" placeholder="localhost" [ngClass]="{\'form-error\': form.get(\'ip\').hasError(\'required\')}">\n                        <small *ngIf="form.get(\'ip\').hasError(\'required\')" class="error-text">The IP/Hostname is required</small>\n                </div>\n\n                <div class="form-group">\n                    <label for="portNumber" class="control-label">Port</label>\n\n                        <input type="text" class="form-control form-control-custom " [ngClass]="{\'form-error\': form.get(\'port\').hasError(\'required\')}" formControlName="port" id="portNumber" name="Port" placeholder="Port Number">\n                        <small *ngIf="form.get(\'port\').hasError(\'required\')" class="error-text">The Port is required</small>\n                </div>\n\n\n                <div class="form-group">\n                    <label for="ApiKey" class="control-label">API Key</label>\n                    \n                        <input type="text" class="form-control form-control-custom " [ngClass]="{\'form-error\': form.get(\'apiKey\').hasError(\'required\')}" formControlName="apiKey" id="ApiKey" name="ApiKey">\n                        <small *ngIf="form.get(\'apiKey\').hasError(\'required\')" class="error-text">The API Key is required</small>\n                </div>\n                <div class="form-group">\n                    <div class="checkbox">\n\n                        <input type="checkbox" id="Ssl" name="Ssl" formControlName="ssl"><label for="Ssl">SSL</label>\n\n                    </div>\n                </div>\n                <div class="form-group">\n                    <label for="SubDir" class="control-label">Base Url</label>\n                    <div>\n                        <input type="text" class="form-control form-control-custom" formControlName="subDir" id="SubDir" name="SubDir">\n                    </div>\n                </div>\n            </div>\n            <div class="col-md-6">\n                <div class="form-group">\n                    <label for="select" class="control-label">Quality Profiles</label>\n                    <div id="profiles">\n                        <select class="form-control form-control-custom"  [ngClass]="{\'form-error\': form.get(\'qualityProfile\').hasError(\'required\')}" id="select" formControlName="qualityProfile">\n                            <option *ngFor="let quality of qualities" value="{{quality.value}}" >{{quality.display}}</option>\n                        </select>\n                    </div>\n                    <small *ngIf="form.get(\'qualityProfile\').hasError(\'required\')" class="error-text">A Default Quality Profile is required</small>\n                    \n                </div>\n\n                <div class="form-group">\n                    <div>\n                        <button type="button" (click)="test(form)" class="btn btn-primary-outline">Test Connectivity <span id="spinner"> </span></button>\n                    </div>\n                </div>\n\n\n                <div class="form-group">\n                    <div>\n                        <button type="submit" class="btn btn-primary-outline ">Submit</button>\n                    </div>\n                </div>\n            </div>\n        </form>\n    </fieldset>\n</div>\n'},function(e,t,n){"use strict";var o=this&&this.__decorate||function(e,t,n,o){var i,r=arguments.length,s=r<3?t:null===o?o=Object.getOwnPropertyDescriptor(t,n):o;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)s=Reflect.decorate(e,t,n,o);else for(var a=e.length-1;a>=0;a--)(i=e[a])&&(s=(r<3?i(s):r>3?i(t,n,s):i(t,n))||s);return r>3&&s&&Object.defineProperty(t,n,s),s},i=this&&this.__metadata||function(e,t){if("object"==typeof Reflect&&"function"==typeof Reflect.metadata)return Reflect.metadata(e,t)};Object.defineProperty(t,"__esModule",{value:!0});var r=n(0),s=n(7),a=n(3),l=n(3),c=n(3),d=n(3),u=function(){function e(e,t,n,o,i){this.settingsService=e,this.sonarrService=t,this.notificationService=n,this.testerService=o,this.fb=i,this.advanced=!1}return e.prototype.ngOnInit=function(){var e=this;this.settingsService.getSonarr().subscribe(function(t){e.form=e.fb.group({enabled:[t.enabled],apiKey:[t.apiKey,[s.Validators.required]],qualityProfile:[t.qualityProfile,[s.Validators.required]],rootPath:[t.rootPath,[s.Validators.required]],ssl:[t.ssl],subDir:[t.subDir],ip:[t.ip,[s.Validators.required]],port:[t.port,[s.Validators.required]],addOnly:[t.addOnly],seasonFolders:[t.seasonFolders]}),t.qualityProfile&&e.getProfiles(e.form),t.rootPath&&e.getRootFolders(e.form)}),this.rootFolders=[],this.qualities=[],this.rootFolders.push({path:"Please Select",id:-1}),this.qualities.push({name:"Please Select",id:-1})},e.prototype.getProfiles=function(e){var t=this;this.profilesRunning=!0,this.sonarrService.getQualityProfiles(e.value).subscribe(function(e){t.qualities=e,t.qualities.unshift({name:"Please Select",id:-1}),t.profilesRunning=!1,t.notificationService.success("Successfully retrieved the Quality Profiles")})},e.prototype.getRootFolders=function(e){var t=this;this.rootFoldersRunning=!0,this.sonarrService.getRootFolders(e.value).subscribe(function(e){t.rootFolders=e,t.rootFolders.unshift({path:"Please Select",id:-1}),t.rootFoldersRunning=!1,t.notificationService.success("Successfully retrieved the Root Folders")})},e.prototype.test=function(e){var t=this;if(e.invalid)this.notificationService.error("Please check your entered values");else{var n=e.value;this.testerService.sonarrTest(n).subscribe(function(e){e?t.notificationService.success("Successfully connected to Sonarr!"):t.notificationService.error("We could not connect to Sonarr!")})}},e.prototype.onSubmit=function(e){var t=this;e.invalid?this.notificationService.error("Please check your entered values"):(e.controls.defaultQualityProfile&&"-1"===e.controls.defaultQualityProfile.value&&this.notificationService.error("Please check your entered values"),e.controls.defaultRootPath&&"Please Select"===e.controls.defaultRootPath.value&&this.notificationService.error("Please check your entered values"),this.settingsService.saveSonarr(e.value).subscribe(function(e){e?t.notificationService.success("Successfully saved Sonarr settings"):t.notificationService.error("There was an error when saving the Sonarr settings")}))},e=o([r.Component({template:n(242)}),i("design:paramtypes",[d.SettingsService,a.SonarrService,c.NotificationService,l.TesterService,s.FormBuilder])],e)}();t.SonarrComponent=u},function(e,t){e.exports='\n<settings-menu></settings-menu>\n<div *ngIf="form">\n    <fieldset>\n        <legend>Sonarr Settings</legend>\n        <div style="float: right;">\n            <span style="vertical-align: top;">Advanced</span>\n            <p-inputSwitch id="customInputSwitch" [(ngModel)]="advanced"></p-inputSwitch>\n        </div>\n        <form novalidate [formGroup]="form" (ngSubmit)="onSubmit(form)" style="padding-top:5%;">\n\n            <div class="col-md-6">\n                <div class="form-group">\n                    <div class="checkbox">\n                        <input type="checkbox" id="enable" formControlName="enabled">\n                        <label for="enable">Enable</label>\n                    </div>\n                </div>\n\n                <div class="form-group">\n                    <label for="Ip" class="control-label">Sonarr Hostname or IP</label>\n                    \n                        <input type="text" class="form-control form-control-custom " formControlName="ip" id="Ip" name="Ip" placeholder="localhost" [ngClass]="{\'form-error\': form.get(\'ip\').hasError(\'required\')}">\n                        <small *ngIf="form.get(\'ip\').hasError(\'required\')" class="error-text">The IP/Hostname is required</small>\n                </div>\n\n                <div class="form-group">\n                    <label for="portNumber" class="control-label">Port</label>\n\n                        <input type="text" class="form-control form-control-custom " [ngClass]="{\'form-error\': form.get(\'port\').hasError(\'required\')}" formControlName="port" id="portNumber" name="Port" placeholder="Port Number">\n                        <small *ngIf="form.get(\'port\').hasError(\'required\')" class="error-text">The Port is required</small>\n                </div>\n\n\n                <div class="form-group">\n                    <label for="ApiKey" class="control-label">Sonarr API Key</label>\n                    \n                        <input type="text" class="form-control form-control-custom " [ngClass]="{\'form-error\': form.get(\'apiKey\').hasError(\'required\')}" formControlName="apiKey" id="ApiKey" name="ApiKey">\n                        <small *ngIf="form.get(\'apiKey\').hasError(\'required\')" class="error-text">The API Key is required</small>\n                </div>\n                <div class="form-group">\n                    <div class="checkbox">\n\n                        <input type="checkbox" id="Ssl" name="Ssl" formControlName="ssl"><label for="Ssl">SSL</label>\n\n                    </div>\n                </div>\n                <div class="form-group">\n                    <label for="SubDir" class="control-label">Sonarr Base Url</label>\n                    <div>\n                        <input type="text" class="form-control form-control-custom" formControlName="subDir" id="SubDir" name="SubDir">\n                    </div>\n                </div>\n            </div>\n            <div class="col-md-6">\n                <div class="form-group">\n                    <div>\n                        <button type="button" (click)="getProfiles(form)" class="btn btn-primary-outline">Get Quality Profiles <span *ngIf="profilesRunning" class="fa fa-spinner fa-spin"></span></button>\n                    </div>\n                </div>\n                <div class="form-group">\n                    <label for="select" class="control-label">Quality Profiles</label>\n                    <div id="profiles">\n                        <select class="form-control form-control-custom"  [ngClass]="{\'form-error\': form.get(\'qualityProfile\').hasError(\'required\')}" id="select" formControlName="qualityProfile">\n                            <option *ngFor="let quality of qualities" value="{{quality.id}}" >{{quality.name}}</option>\n                        </select>\n                    </div>\n                    <small *ngIf="form.get(\'qualityProfile\').hasError(\'required\')" class="error-text">A Default Quality Profile is required</small>\n                    \n                </div>\n\n                <div class="form-group">\n                    <div>\n                        <button type="button" (click)="getRootFolders(form)" class="btn btn-primary-outline">Get Root Folders <span *ngIf="rootFoldersRunning" class="fa fa-spinner fa-spin"></span></button>\n                    </div>\n\n                </div>\n                <div class="form-group">\n                    <label for="rootFolders" class="control-label">Default Root Folders</label>\n                    <div id="rootFolders">\n                        <select class="form-control form-control-custom" formControlName="rootPath" [ngClass]="{\'form-error\': form.get(\'rootPath\').hasError(\'required\')}">\n                            <option *ngFor="let folder of rootFolders" value="{{folder.id}}">{{folder.path}}</option>\n                        </select>\n                    </div>\n                    <small *ngIf="form.get(\'rootPath\').hasError(\'required\')" class="error-text">A Default Root Path is required</small>\n                    \n                </div>\n\n\n                <div class="form-group">\n                    <div class="checkbox">\n                        <input type="checkbox" id="SeasonFolders" name="SeasonFolders" formControlName="seasonFolders">\n                        <label for="SeasonFolders">Enable season folders</label>\n                    </div>\n                    <label>Enabled Season Folders to organize seasons into individual folders within a show.</label>\n                </div>\n\n                <div class="form-group" *ngIf="advanced" style="color:#ff761b">\n                    <div class="checkbox">\n                        <input type="checkbox" id="addOnly" formControlName="addOnly">\n                        <label for="addOnly">Do not search</label>\n                    </div>\n                </div>\n\n                <div class="form-group">\n                    <div>\n                        <button type="button" (click)="test(form)" class="btn btn-primary-outline">Test Connectivity <span id="spinner"> </span></button>\n                    </div>\n                </div>\n\n\n                <div class="form-group">\n                    <div>\n                        <button type="submit" class="btn btn-primary-outline ">Submit</button>\n                    </div>\n                </div>\n            </div>\n        </form>\n    </fieldset>\n</div>\n'},function(e,t,n){"use strict";var o=this&&this.__decorate||function(e,t,n,o){var i,r=arguments.length,s=r<3?t:null===o?o=Object.getOwnPropertyDescriptor(t,n):o;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)s=Reflect.decorate(e,t,n,o);else for(var a=e.length-1;a>=0;a--)(i=e[a])&&(s=(r<3?i(s):r>3?i(t,n,s):i(t,n))||s);return r>3&&s&&Object.defineProperty(t,n,s),s},i=this&&this.__metadata||function(e,t){if("object"==typeof Reflect&&"function"==typeof Reflect.metadata)return Reflect.metadata(e,t)};Object.defineProperty(t,"__esModule",{value:!0});var r=n(0),s=n(7),a=n(3),l=n(3),c=function(){function e(e,t,n,o){this.settingsService=e,this.notificationService=t,this.updateService=n,this.fb=o,this.updateAvailable=!1,this.enableUpdateButton=!1,this.isWindows=!1}return Object.defineProperty(e.prototype,"useScript",{get:function(){return this.form.get("useScript").value},enumerable:!0,configurable:!0}),e.prototype.ngOnInit=function(){var e=this;this.settingsService.getUpdateSettings().subscribe(function(t){e.form=e.fb.group({autoUpdateEnabled:[t.autoUpdateEnabled],username:[t.username],password:[t.password],processName:[t.processName],useScript:[t.useScript],scriptLocation:[t.scriptLocation],windowsService:[t.windowsService],windowsServiceName:[t.windowsServiceName]}),e.isWindows=t.isWindows,e.enableUpdateButton=t.autoUpdateEnabled})},e.prototype.checkForUpdate=function(){var e=this;this.updateService.checkForNewUpdate().subscribe(function(t){!0===t?(e.updateAvailable=!0,e.notificationService.success("There is a new update available")):e.notificationService.success("You are on the latest version!")})},e.prototype.update=function(){this.updateService.forceUpdate().subscribe(),this.notificationService.success("We triggered the update job")},e.prototype.onSubmit=function(e){var t=this;e.invalid?this.notificationService.error("Please check your entered values"):(this.enableUpdateButton=e.value.autoUpdateEnabled,this.settingsService.saveUpdateSettings(e.value).subscribe(function(e){e?t.notificationService.success("Successfully saved Update settings"):t.notificationService.error("There was an error when saving the Update settings")}))},e=o([r.Component({template:n(244)}),i("design:paramtypes",[l.SettingsService,a.NotificationService,l.JobService,s.FormBuilder])],e)}();t.UpdateComponent=c},function(e,t){e.exports='\n<settings-menu></settings-menu>\n<wiki [url]="\'https://github.com/tidusjar/Ombi/wiki/Update-Settings\'"></wiki>\n<div *ngIf="form">\n    <fieldset>\n        <legend>Update Settings</legend>\n        <div class="form-group"  style="float: right">\n            <div *ngIf="updateAvailable">\n                <button (click)="update()" [disabled]="!enableUpdateButton" class="btn btn-success-outline">Update</button>\n            </div>\n            <div *ngIf="!updateAvailable">\n                <button (click)="checkForUpdate()" class="btn btn-primary-outline">Check For Update</button>\n            </div>\n        </div>\n        <form novalidate [formGroup]="form" (ngSubmit)="onSubmit(form)" style="padding-top:5%;">\n            <div class="col-md-6">\n                <div class="form-group">\n                    <div class="checkbox">\n                        <input type="checkbox" id="autoUpdateEnabled" formControlName="autoUpdateEnabled">\n                        <label for="autoUpdateEnabled">Enable Automatic Update</label>\n                    </div>\n                </div>\n\n                <div class="form-group" *ngIf="isWindows">\n                    <div class="checkbox">\n                        <input type="checkbox" id="windowsService" formControlName="windowsService">\n                        <label for="windowsService">Running as a Windows Service</label>\n                    </div>\n                </div>\n                \n                <div class="form-group" *ngIf="!form.value.windowsService">\n                    <div class="checkbox">\n                        <input type="checkbox" id="useScript" formControlName="useScript">\n                        <label for="useScript">Use your own updater script</label>\n                    </div>\n                </div>\n                \n                \n                <div *ngIf="form.value.windowsService">\n                    <div class="form-group">\n                        <label for="windowsServiceName" class="control-label">Windows Service Name</label>\n                        <input type="text" class="form-control form-control-custom " id="windowsServiceName" name="windowsServiceName" formControlName="windowsServiceName">\n                    </div>\n                </div>\n\n\n                <div [hidden]="!useScript || form.value.windowsService">\n                    <small>For information how to use this, please press the wiki button at the top of the page</small>\n                    <div class="form-group">\n                        <label for="scriptLocation" class="control-label">Script Path</label>\n                        <input type="text" class="form-control form-control-custom " id="scriptLocation" name="scriptLocation" formControlName="scriptLocation">\n                    </div>\n                </div>\n\n                \n                <div [hidden]="useScript || form.value.windowsService">\n                <small >By default the process name is Ombi, but this could be different for your system. We need to know the process name so we can kill that process to update the files.</small>\n                    <div class="form-group">\n                        <label for="processName">Ombi Process Name</label>\n                        <input type="text" id="processName" class="form-control form-control-custom" placeholder="Ombi" formControlName="processName">\n                    </div>\n                </div>\n                \n                <div class="form-group">\n                    <div>\n                        <button type="submit" class="btn btn-primary-outline ">Submit</button>\n                    </div>\n                </div>\n            </div>\n            <div class="col-md-6" [hidden]="useScript" *ngIf="isWindows">\n                <small>If you are getting any permissions issues, you can specify a user for the update process to run under.</small>\n\n                <div class="form-group">\n                    <label for="username" class="control-label">Username</label>\n                    <input type="text" class="form-control form-control-custom " id="username" name="username" formControlName="username">\n                </div>\n\n                <div class="form-group">\n                    <label for="password">Password</label>\n                    <input type="password" id="password" class="form-control form-control-custom" formControlName="password">\n                </div>\n            </div>\n        </form>\n    </fieldset>\n</div>\n'},function(e,t,n){"use strict";var o=this&&this.__decorate||function(e,t,n,o){var i,r=arguments.length,s=r<3?t:null===o?o=Object.getOwnPropertyDescriptor(t,n):o;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)s=Reflect.decorate(e,t,n,o);else for(var a=e.length-1;a>=0;a--)(i=e[a])&&(s=(r<3?i(s):r>3?i(t,n,s):i(t,n))||s);return r>3&&s&&Object.defineProperty(t,n,s),s},i=this&&this.__metadata||function(e,t){if("object"==typeof Reflect&&"function"==typeof Reflect.metadata)return Reflect.metadata(e,t)};Object.defineProperty(t,"__esModule",{value:!0});var r=n(0),s=n(3),a=function(){function e(e,t,n,o,i,r){this.settingsService=e,this.notificationService=t,this.identityService=n,this.plexService=o,this.jobService=i,this.embyService=r,this.bannedPlexUsers=[],this.bannedEmbyUsers=[],this.enableImportButton=!1}return e.prototype.ngOnInit=function(){var e=this;this.settingsService.getUserManagementSettings().subscribe(function(t){e.settings=t,(t.importEmbyUsers||t.importPlexUsers)&&(e.enableImportButton=!0),e.plexService.getFriends().subscribe(function(t){e.plexUsers=t,e.plexUsers.forEach(function(t){e.settings.bannedPlexUserIds.some(function(e){return t.id===e})&&e.bannedPlexUsers.push(t)})}),e.embyService.getUsers().subscribe(function(t){e.embyUsers=t,e.embyUsers.forEach(function(t){e.settings.bannedPlexUserIds.some(function(e){return t.id===e})&&e.bannedEmbyUsers.push(t)})}),e.identityService.getAllAvailableClaims().subscribe(function(t){e.claims=t,e.claims.forEach(function(t){if(e.settings.defaultRoles){var n=e.settings.defaultRoles.some(function(e){return e===t.value});t.enabled=n}})})}),this.settingsService.getPlex().subscribe(function(t){return e.plexEnabled=t.enable}),this.settingsService.getEmby().subscribe(function(t){return e.embyEnabled=t.enable})},e.prototype.submit=function(){var e=this,t=this.claims.filter(function(e){return e.enabled});this.settings.defaultRoles=t.map(function(e){return e.value}),this.settings.bannedPlexUserIds=this.bannedPlexUsers.map(function(e){return e.id}),this.settings.bannedEmbyUserIds=this.bannedEmbyUsers.map(function(e){return e.id}),(this.settings.importEmbyUsers||this.settings.importPlexUsers)&&(this.enableImportButton=!0),this.settingsService.saveUserManagementSettings(this.settings).subscribe(function(t){!0===t?e.notificationService.success("Successfully saved the User Management Settings"):e.notificationService.success("There was an error when saving the Ombi settings")})},e.prototype.filterPlexList=function(e){this.filteredPlexUsers=this.filter(e.query,this.plexUsers)},e.prototype.filterEmbyList=function(e){this.filteredEmbyUsers=this.filter(e.query,this.embyUsers)},e.prototype.runImporter=function(){this.jobService.runPlexImporter().subscribe(),this.jobService.runEmbyImporter().subscribe()},e.prototype.filter=function(e,t){return t.filter(function(t){return 0===t.username.toLowerCase().indexOf(e.toLowerCase())})},e=o([r.Component({template:n(246)}),i("design:paramtypes",[s.SettingsService,s.NotificationService,s.IdentityService,s.PlexService,s.JobService,s.EmbyService])],e)}();t.UserManagementComponent=a},function(e,t){e.exports='<settings-menu></settings-menu>\n\n<wiki [url]="\'https://github.com/tidusjar/Ombi/wiki/User-Importer-Settings\'"></wiki>\n<fieldset *ngIf="settings">\n    <legend>User Importer Settings</legend>\n\n    <div class="col-md-6">\n        <div *ngIf="plexEnabled">\n\n            <div class="form-group">\n                <div class="checkbox">\n                    <input type="checkbox" id="importPlex" [(ngModel)]="settings.importPlexUsers">\n                    <label for="importPlex">Import Plex Users</label>\n                </div>\n            </div>\n            \n            <div class="form-group">\n                <div class="checkbox">\n                    <input type="checkbox" id="importAdmin" [(ngModel)]="settings.importPlexAdmin">\n                    <label for="importAdmin">Import Plex Admin</label>\n                </div>\n            </div>\n            <div *ngIf="plexUsers">\n                <p>Plex Users exclude from Import</p>\n                \n                <p-autoComplete [(ngModel)]="bannedPlexUsers" [suggestions]="filteredPlexUsers" [multiple]="true" field="username" (completeMethod)="filterPlexList($event)"></p-autoComplete>\n            </div>\n        </div>\n\n        <div *ngIf="embyEnabled">\n\n\n            <div class="form-group">\n                <div class="checkbox">\n                    <input type="checkbox" id="importEmbyUsers" [(ngModel)]="settings.importEmbyUsers">\n                    <label for="importEmbyUsers">Import Emby Users</label>\n                </div>\n            </div>\n            \n            <div *ngIf="embyUsers">\n                <p>Emby Users exclude from Import</p>\n                \n                <p-autoComplete [(ngModel)]="bannedEmbyUsers" [suggestions]="filteredEmbyUsers" [multiple]="true" field="username" (completeMethod)="filterEmbyList($event)"></p-autoComplete>\n            </div>\n\n        </div>\n    </div>\n    <div class="col-md-6">\n        <h4>Default Roles</h4>\n\n        <div *ngFor="let c of claims">\n            <div class="form-group">\n                <div class="checkbox">\n                    <input type="checkbox" [(ngModel)]="c.enabled" [value]="c.value" id="create{{c.value}}" [attr.name]="\'create\' + c.value" ng-checked="c.enabled">\n                    <label for="create{{c.value}}">{{c.value | humanize}}</label>\n                </div>\n            </div>\n        </div>\n\n        <h4>Default Request Limits</h4>\n        <div class="form-group">\n            <label for="movieRequestLimit" class="control-label">Movie Request Limit</label>\n            <div>\n                <input type="text" [(ngModel)]="settings.movieRequestLimit" class="form-control form-small form-control-custom " id="movieRequestLimit" name="movieRequestLimit" value="{{settings?.movieRequestLimit}}">\n            </div>\n        </div>\n\n        <div class="form-group">\n            <label for="episodeRequestLimit" class="control-label">Episode Request Limit</label>\n            <div>\n                <input type="text" [(ngModel)]="settings.episodeRequestLimit" class="form-control form-small form-control-custom " id="episodeRequestLimit" name="episodeRequestLimit" value="{{settings?.episodeRequestLimit}}">\n            </div>\n        </div>\n\n    </div>\n    <div class="col-md-6">\n        <div class="form-group">\n            <button type="submit" id="save" (click)="submit()" class="btn btn-primary-outline">Submit</button>\n            <button type="button" [disabled]="!enableImportButton" (click)="runImporter()" class="btn btn-info-outline">Run Importer</button>\n        </div>     \n        <div class="form-group">\n        </div>\n    </div>\n</fieldset>'},function(e,t,n){"use strict";var o=this&&this.__decorate||function(e,t,n,o){var i,r=arguments.length,s=r<3?t:null===o?o=Object.getOwnPropertyDescriptor(t,n):o;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)s=Reflect.decorate(e,t,n,o);else for(var a=e.length-1;a>=0;a--)(i=e[a])&&(s=(r<3?i(s):r>3?i(t,n,s):i(t,n))||s);return r>3&&s&&Object.defineProperty(t,n,s),s},i=this&&this.__metadata||function(e,t){if("object"==typeof Reflect&&"function"==typeof Reflect.metadata)return Reflect.metadata(e,t)};Object.defineProperty(t,"__esModule",{value:!0});var r=n(0),s=function(){function e(){}return o([r.Input(),i("design:type",String)],e.prototype,"url",void 0),o([r.Input(),i("design:type",String)],e.prototype,"text",void 0),e=o([r.Component({selector:"wiki",template:n(248)})],e)}();t.WikiComponent=s},function(e,t){e.exports='<div class="col-md-12">\n\n    <div *ngIf="!text" class="col-md-1 col-md-push-11">\n        <a href="{{url}}" target="_blank" class="btn btn-sm btn-info-outline">\n            <span >Wiki</span>\n        </a>\n    </div>\n\n    <div  *ngIf="text" class="col-md-1 col-md-push-9">\n            <a href="{{url}}" target="_blank" class="btn btn-sm btn-info-outline">\n                <span>{{text}}</span>\n            </a>\n        </div>\n\n</div>'},function(e,t,n){"use strict";var o=this&&this.__decorate||function(e,t,n,o){var i,r=arguments.length,s=r<3?t:null===o?o=Object.getOwnPropertyDescriptor(t,n):o;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)s=Reflect.decorate(e,t,n,o);else for(var a=e.length-1;a>=0;a--)(i=e[a])&&(s=(r<3?i(s):r>3?i(t,n,s):i(t,n))||s);return r>3&&s&&Object.defineProperty(t,n,s),s};Object.defineProperty(t,"__esModule",{value:!0});var i=n(0),r=function(){function e(){}return e.prototype.ignore=function(e){e.preventDefault()},e=o([i.Component({selector:"settings-menu",template:n(250)})],e)}();t.SettingsMenuComponent=r},function(e,t){e.exports='<ul class="nav nav-tabs">\n    \n    <li [routerLinkActive]="[\'active\']"><a [routerLink]="[\'/Settings/Ombi\']">Ombi</a></li>\n\n    <li class="dropdown" [routerLinkActive]="[\'active\']">\n        <a href="ignore($event)" class="dropdown-toggle" data-toggle="dropdown">\n            <i class="fa fa-cogs" aria-hidden="true"></i> Configuration <span class="caret"></span>\n        </a>\n        <ul class="dropdown-menu">\n            <li [routerLinkActive]="[\'active\']"><a [routerLink]="[\'/Settings/Customization\']">Customization</a></li>\n            <li [routerLinkActive]="[\'active\']"><a [routerLink]="[\'/Settings/LandingPage\']">Landing Page</a></li>\n            <li [routerLinkActive]="[\'active\']"><a [routerLink]="[\'/Settings/Issues\']">Issues</a></li>\n            <li [routerLinkActive]="[\'active\']"><a [routerLink]="[\'/Settings/UserManagement\']">User Importer</a></li>\n            <li [routerLinkActive]="[\'active\']"><a [routerLink]="[\'/Settings/Authentication\']">Authentication</a></li>\n        </ul>\n    </li>\n\n    <li class="dropdown" [routerLinkActive]="[\'active\']">\n        <a href="ignore($event)" class="dropdown-toggle" data-toggle="dropdown">\n            <i class="fa fa-server" aria-hidden="true"></i> Media Server <span class="caret"></span>\n        </a>\n        <ul class="dropdown-menu">\n            <li [routerLinkActive]="[\'active\']"><a [routerLink]="[\'/Settings/Plex\']">Plex</a></li>\n            <li [routerLinkActive]="[\'active\']"><a [routerLink]="[\'/Settings/Emby\']">Emby</a></li>\n        </ul>\n    </li>\n\n    <li class="dropdown" [routerLinkActive]="[\'active\']">\n        <a href="ignore($event)" class="dropdown-toggle" data-toggle="dropdown">\n            <i class="fa fa-television" aria-hidden="true"></i> TV <span class="caret"></span>\n        </a>\n        <ul class="dropdown-menu">\n            <li [routerLinkActive]="[\'active\']"><a [routerLink]="[\'/Settings/Sonarr\']">Sonarr</a></li>\n            <li [routerLinkActive]="[\'active\']"><a [routerLink]="[\'/Settings/DogNzb\']">DogNzb</a></li>\n            <li [routerLinkActive]="[\'active\']"><a [routerLink]="[\'/Settings/SickRage\']">SickRage</a></li>\n        </ul>\n    </li>\n\n    <li class="dropdown" [routerLinkActive]="[\'active\']">\n        <a href="ignore($event)" class="dropdown-toggle" data-toggle="dropdown">\n            <i class="fa fa-film" aria-hidden="true"></i> Movies <span class="caret"></span>\n        </a>\n        <ul class="dropdown-menu">\n            <li [routerLinkActive]="[\'active\']"><a [routerLink]="[\'/Settings/CouchPotato\']">CouchPotato</a></li>\n            <li [routerLinkActive]="[\'active\']"><a [routerLink]="[\'/Settings/DogNzb\']">DogNzb</a></li>\n            <li [routerLinkActive]="[\'active\']"><a [routerLink]="[\'/Settings/Radarr\']">Radarr</a></li>\n            \x3c!--<li [routerLinkActive]="[\'active\']"><a [routerLink]="[\'/Settings/Watcher\']">Watcher</a></li>--\x3e\n        </ul>\n    </li>\n\n\n    <li class="dropdown" [routerLinkActive]="[\'active\']">\n        <a href="ignore($event)" class="dropdown-toggle" data-toggle="dropdown">\n            <i class="fa fa-bell-o" aria-hidden="true"></i> Notifications <span class="caret"></span>\n        </a>\n        <ul class="dropdown-menu">\n            <li [routerLinkActive]="[\'active\']"><a [routerLink]="[\'/Settings/Email\']">Email</a></li>\n            \x3c!--<li [routerLinkActive]="[\'active\']"><a [routerLink]="[\'/Settings/Newsletter\']">Newsletter</a></li>--\x3e\n            <li [routerLinkActive]="[\'active\']"><a [routerLink]="[\'/Settings/Discord\']">Discord</a></li>\n            <li [routerLinkActive]="[\'active\']"><a [routerLink]="[\'/Settings/Slack\']">Slack</a></li>\n            <li [routerLinkActive]="[\'active\']"><a [routerLink]="[\'/Settings/Pushbullet\']">Pushbullet</a></li>\n            <li [routerLinkActive]="[\'active\']"><a [routerLink]="[\'/Settings/Pushover\']">Pushover</a></li>\n            <li [routerLinkActive]="[\'active\']"><a [routerLink]="[\'/Settings/Mattermost\']">Mattermost</a></li>\n            <li [routerLinkActive]="[\'active\']"><a [routerLink]="[\'/Settings/Telegram\']">Telegram</a></li>\n        </ul>\n    </li>\n\n\n    <li class="dropdown" [routerLinkActive]="[\'active\']">\n        <a href="ignore($event)" class="dropdown-toggle" data-toggle="dropdown">\n            <i class="fa fa-tachometer" aria-hidden="true"></i> System <span class="caret"></span>\n        </a>\n        <ul class="dropdown-menu">\n            <li [routerLinkActive]="[\'active\']"><a [routerLink]="[\'/Settings/About\']">About</a></li>\n            <li [routerLinkActive]="[\'active\']"><a [routerLink]="[\'/Settings/Update\']">Update</a></li>\n            <li [routerLinkActive]="[\'active\']"><a [routerLink]="[\'/Settings/Jobs\']">Jobs</a></li>\n            \x3c!-- <li [routerLinkActive]="[\'active\']"><a [routerLink]="[\'/Settings/Logs\']">Logs (Not available)</a></li>\n            <li [routerLinkActive]="[\'active\']"><a [routerLink]="[\'/Settings/ScheduledJobs\']">Scheduled Jobs (Not available)</a></li> --\x3e\n        </ul>\n    </li>\n\n</ul>\n\n<hr/>\n'}]));
//# sourceMappingURL=0.js.map